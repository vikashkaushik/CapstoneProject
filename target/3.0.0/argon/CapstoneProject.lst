
c:/Users/evanh/OneDrive/Desktop/CTD/InternetOfThings/CapstoneProject/target/3.0.0/argon/CapstoneProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005f44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9f60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e434  000d9f64  0001e434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000034c  2003e4a4  2003e4a4  0002e4a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9fd4  000d9fd4  00029fd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9ffc  000d9ffc  00029ffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023ced3  00000000  00000000  0002a000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020b30  00000000  00000000  00266ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00048177  00000000  00000000  00287a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003658  00000000  00000000  002cfb7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000ae18  00000000  00000000  002d31d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00045a13  00000000  00000000  002ddfea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000575b7  00000000  00000000  003239fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00130ca1  00000000  00000000  0037afb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a0a0  00000000  00000000  004abc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fc89 	bl	d8944 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fc91 	bl	d8960 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e434 	.word	0x2003e434
   d4048:	000d9f64 	.word	0x000d9f64
   d404c:	2003e4a4 	.word	0x2003e4a4
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f003 fc53 	bl	d7908 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d9f3c 	.word	0x000d9f3c
   d407c:	000d9f60 	.word	0x000d9f60

000d4080 <module_user_setup>:
   d4080:	f000 bd92 	b.w	d4ba8 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 fe91 	bl	d4dac <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f003 bbfd 	b.w	d788c <_post_loop>

000d4092 <_Znwj>:
   d4092:	f003 b8a5 	b.w	d71e0 <malloc>

000d4096 <_Znaj>:
   d4096:	f003 b8a3 	b.w	d71e0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f003 b8a9 	b.w	d71f0 <free>

000d409e <_ZdaPv>:
   d409e:	f003 b8a7 	b.w	d71f0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
   d40a4:	b508      	push	{r3, lr}
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 ffe4 	bl	d7078 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6d49 	.word	0x000d6d49

000d40b8 <__cxa_guard_acquire>:
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <__tcf_0>:
String channel = "madlibs";

//count votes
int countList[3] = {0, 0, 0};

String choiceList[3] = {"", "", ""};
   d40c8:	b510      	push	{r4, lr}
   d40ca:	4c07      	ldr	r4, [pc, #28]	; (d40e8 <__tcf_0+0x20>)
   d40cc:	f104 0020 	add.w	r0, r4, #32
   d40d0:	f003 f9e7 	bl	d74a2 <_ZN6StringD1Ev>
   d40d4:	f104 0010 	add.w	r0, r4, #16
   d40d8:	f003 f9e3 	bl	d74a2 <_ZN6StringD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40e2:	f003 b9de 	b.w	d74a2 <_ZN6StringD1Ev>
   d40e6:	bf00      	nop
   d40e8:	2003e518 	.word	0x2003e518

000d40ec <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ee:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40f0:	4608      	mov	r0, r1
   d40f2:	9101      	str	r1, [sp, #4]
   d40f4:	f004 fc72 	bl	d89dc <strlen>
    if (len + l > buff_size)
   d40f8:	6863      	ldr	r3, [r4, #4]
   d40fa:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40fc:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40fe:	18e8      	adds	r0, r5, r3
   d4100:	4290      	cmp	r0, r2
   d4102:	d808      	bhi.n	d4116 <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d4104:	6820      	ldr	r0, [r4, #0]
   d4106:	9901      	ldr	r1, [sp, #4]
   d4108:	462a      	mov	r2, r5
   d410a:	4418      	add	r0, r3
   d410c:	f004 fc1a 	bl	d8944 <memcpy>
    len += l;
   d4110:	6860      	ldr	r0, [r4, #4]
   d4112:	4428      	add	r0, r5
   d4114:	6060      	str	r0, [r4, #4]
}
   d4116:	b003      	add	sp, #12
   d4118:	bd30      	pop	{r4, r5, pc}
	...

000d411c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d411c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d411e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4120:	4b0a      	ldr	r3, [pc, #40]	; (d414c <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d4122:	6003      	str	r3, [r0, #0]
   d4124:	4605      	mov	r5, r0
   d4126:	b17c      	cbz	r4, d4148 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4128:	6863      	ldr	r3, [r4, #4]
   d412a:	3b01      	subs	r3, #1
   d412c:	6063      	str	r3, [r4, #4]
   d412e:	b95b      	cbnz	r3, d4148 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4130:	6823      	ldr	r3, [r4, #0]
   d4132:	4620      	mov	r0, r4
   d4134:	689b      	ldr	r3, [r3, #8]
   d4136:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4138:	68a3      	ldr	r3, [r4, #8]
   d413a:	3b01      	subs	r3, #1
   d413c:	60a3      	str	r3, [r4, #8]
   d413e:	b91b      	cbnz	r3, d4148 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4140:	6823      	ldr	r3, [r4, #0]
   d4142:	4620      	mov	r0, r4
   d4144:	68db      	ldr	r3, [r3, #12]
   d4146:	4798      	blx	r3
   d4148:	4628      	mov	r0, r5
   d414a:	bd38      	pop	{r3, r4, r5, pc}
   d414c:	000d9c88 	.word	0x000d9c88

000d4150 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4150:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4152:	f002 fe01 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4156:	4b03      	ldr	r3, [pc, #12]	; (d4164 <_ZN10CloudClass7processEv+0x14>)
   d4158:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d415a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d415e:	f003 b827 	b.w	d71b0 <spark_process>
   d4162:	bf00      	nop
   d4164:	2003e7d4 	.word	0x2003e7d4

000d4168 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4168:	6803      	ldr	r3, [r0, #0]
   d416a:	b12b      	cbz	r3, d4178 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d416c:	6842      	ldr	r2, [r0, #4]
   d416e:	4293      	cmp	r3, r2
   d4170:	d202      	bcs.n	d4178 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4172:	4618      	mov	r0, r3
   d4174:	f004 bbd0 	b.w	d8918 <atoi>
   d4178:	2000      	movs	r0, #0
   d417a:	4770      	bx	lr

000d417c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d417c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d417e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4180:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4182:	b145      	cbz	r5, d4196 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4184:	6843      	ldr	r3, [r0, #4]
   d4186:	429d      	cmp	r5, r3
   d4188:	d205      	bcs.n	d4196 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d418a:	4628      	mov	r0, r5
   d418c:	f004 fc26 	bl	d89dc <strlen>
   d4190:	3001      	adds	r0, #1
   d4192:	4405      	add	r5, r0
   d4194:	6025      	str	r5, [r4, #0]
        }
   d4196:	4620      	mov	r0, r4
   d4198:	bd38      	pop	{r3, r4, r5, pc}
	...

000d419c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d419c:	b538      	push	{r3, r4, r5, lr}
   d419e:	4604      	mov	r4, r0
   d41a0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d41a2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41a6:	6825      	ldr	r5, [r4, #0]
   d41a8:	4a04      	ldr	r2, [pc, #16]	; (d41bc <_ZN10BlynkParam3addEi+0x20>)
   d41aa:	1a09      	subs	r1, r1, r0
   d41ac:	4428      	add	r0, r5
   d41ae:	f003 f82f 	bl	d7210 <snprintf>
   d41b2:	6863      	ldr	r3, [r4, #4]
   d41b4:	3001      	adds	r0, #1
   d41b6:	4403      	add	r3, r0
   d41b8:	6063      	str	r3, [r4, #4]
    }
   d41ba:	bd38      	pop	{r3, r4, r5, pc}
   d41bc:	000d8b30 	.word	0x000d8b30

000d41c0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41c0:	b538      	push	{r3, r4, r5, lr}
   d41c2:	4604      	mov	r4, r0
   d41c4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41c6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41ca:	6825      	ldr	r5, [r4, #0]
   d41cc:	4a04      	ldr	r2, [pc, #16]	; (d41e0 <_ZN10BlynkParam3addEl+0x20>)
   d41ce:	1a09      	subs	r1, r1, r0
   d41d0:	4428      	add	r0, r5
   d41d2:	f003 f81d 	bl	d7210 <snprintf>
   d41d6:	6863      	ldr	r3, [r4, #4]
   d41d8:	3001      	adds	r0, #1
   d41da:	4403      	add	r3, r0
   d41dc:	6063      	str	r3, [r4, #4]
    }
   d41de:	bd38      	pop	{r3, r4, r5, pc}
   d41e0:	000d8b33 	.word	0x000d8b33

000d41e4 <_Z17viewChoiceDisplayv>:
    madlibSend("3");
  }

}

void viewChoiceDisplay(){
   d41e4:	b538      	push	{r3, r4, r5, lr}
  display.clearDisplay();
   d41e6:	4c12      	ldr	r4, [pc, #72]	; (d4230 <_Z17viewChoiceDisplayv+0x4c>)
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d41e8:	4d12      	ldr	r5, [pc, #72]	; (d4234 <_Z17viewChoiceDisplayv+0x50>)
   d41ea:	4620      	mov	r0, r4
   d41ec:	f002 fa2a 	bl	d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d41f0:	4620      	mov	r0, r4
   d41f2:	2101      	movs	r1, #1
   d41f4:	f001 fb17 	bl	d5826 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d41f8:	2200      	movs	r2, #0
   d41fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4202:	4b0d      	ldr	r3, [pc, #52]	; (d4238 <_Z17viewChoiceDisplayv+0x54>)
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println(wordType);
   d4204:	4620      	mov	r0, r4
   d4206:	6819      	ldr	r1, [r3, #0]
   d4208:	f003 fa6f 	bl	d76ea <_ZN5Print7printlnEPKc>
  display.println(choiceList[0]);
   d420c:	6829      	ldr	r1, [r5, #0]
   d420e:	4620      	mov	r0, r4
   d4210:	f003 fa6b 	bl	d76ea <_ZN5Print7printlnEPKc>
  display.println(choiceList[1]);
   d4214:	6929      	ldr	r1, [r5, #16]
   d4216:	4620      	mov	r0, r4
   d4218:	f003 fa67 	bl	d76ea <_ZN5Print7printlnEPKc>
  display.println(choiceList[2]);
   d421c:	6a29      	ldr	r1, [r5, #32]
   d421e:	4620      	mov	r0, r4
   d4220:	f003 fa63 	bl	d76ea <_ZN5Print7printlnEPKc>
  display.display();
   d4224:	4620      	mov	r0, r4
}
   d4226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display();
   d422a:	f002 bc77 	b.w	d6b1c <_ZN16Adafruit_SSD13067displayEv>
   d422e:	bf00      	nop
   d4230:	2003e5b4 	.word	0x2003e5b4
   d4234:	2003e518 	.word	0x2003e518
   d4238:	2003e634 	.word	0x2003e634

000d423c <_Z10madlibSend6String>:
  display.println(countList[2]);
  display.display();
}
// function - sends OUTPUT to "madlibs"
void madlibSend(String output){
    client.publish(channel, output);
   d423c:	4b02      	ldr	r3, [pc, #8]	; (d4248 <_Z10madlibSend6String+0xc>)
   d423e:	6802      	ldr	r2, [r0, #0]
   d4240:	6819      	ldr	r1, [r3, #0]
   d4242:	4802      	ldr	r0, [pc, #8]	; (d424c <_Z10madlibSend6String+0x10>)
   d4244:	f001 beb7 	b.w	d5fb6 <_ZN4MQTT7publishEPKcS1_>
   d4248:	2003e508 	.word	0x2003e508
   d424c:	2003e548 	.word	0x2003e548

000d4250 <BlynkWidgetWrite1>:
}

BLYNK_WRITE(V1){
   d4250:	b500      	push	{lr}
   d4252:	b08d      	sub	sp, #52	; 0x34
// uses blynk to write messages
  String inputText = param.asString();
   d4254:	6809      	ldr	r1, [r1, #0]
   d4256:	4668      	mov	r0, sp
   d4258:	f003 f96e 	bl	d7538 <_ZN6StringC1EPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d425c:	4916      	ldr	r1, [pc, #88]	; (d42b8 <BlynkWidgetWrite1+0x68>)
   d425e:	a808      	add	r0, sp, #32
   d4260:	f003 f98d 	bl	d757e <_ZN6StringC1ERKS_>
  String outputText =  playerString + "." + inputText;
   d4264:	4915      	ldr	r1, [pc, #84]	; (d42bc <BlynkWidgetWrite1+0x6c>)
   d4266:	a808      	add	r0, sp, #32
   d4268:	f003 f9c9 	bl	d75fe <_ZplRK15StringSumHelperPKc>
   d426c:	4669      	mov	r1, sp
   d426e:	f003 f9ba 	bl	d75e6 <_ZplRK15StringSumHelperRK6String>
   d4272:	4601      	mov	r1, r0
   d4274:	a804      	add	r0, sp, #16
   d4276:	f003 f982 	bl	d757e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
   d427a:	a808      	add	r0, sp, #32
   d427c:	f003 f911 	bl	d74a2 <_ZN6StringD1Ev>
  madlibSend(outputText);
   d4280:	a904      	add	r1, sp, #16
   d4282:	a808      	add	r0, sp, #32
   d4284:	f003 f97b 	bl	d757e <_ZN6StringC1ERKS_>
   d4288:	a808      	add	r0, sp, #32
   d428a:	f7ff ffd7 	bl	d423c <_Z10madlibSend6String>
   d428e:	a808      	add	r0, sp, #32
   d4290:	f003 f907 	bl	d74a2 <_ZN6StringD1Ev>
  choiceList[playerID-1] = inputText;
   d4294:	4b0a      	ldr	r3, [pc, #40]	; (d42c0 <BlynkWidgetWrite1+0x70>)
   d4296:	480b      	ldr	r0, [pc, #44]	; (d42c4 <BlynkWidgetWrite1+0x74>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	3b01      	subs	r3, #1
   d429c:	4669      	mov	r1, sp
   d429e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   d42a2:	f003 f95d 	bl	d7560 <_ZN6StringaSERKS_>
  String outputText =  playerString + "." + inputText;
   d42a6:	a804      	add	r0, sp, #16
   d42a8:	f003 f8fb 	bl	d74a2 <_ZN6StringD1Ev>
  String inputText = param.asString();
   d42ac:	4668      	mov	r0, sp
   d42ae:	f003 f8f8 	bl	d74a2 <_ZN6StringD1Ev>
  /*output format:
  1. <INPUT>
  */
   d42b2:	b00d      	add	sp, #52	; 0x34
   d42b4:	f85d fb04 	ldr.w	pc, [sp], #4
   d42b8:	2003e624 	.word	0x2003e624
   d42bc:	000d8b37 	.word	0x000d8b37
   d42c0:	2003e434 	.word	0x2003e434
   d42c4:	2003e518 	.word	0x2003e518

000d42c8 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d42c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d42ca:	4605      	mov	r5, r0
   d42cc:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d42ce:	4616      	mov	r6, r2
   d42d0:	b94a      	cbnz	r2, d42e6 <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d42d2:	6803      	ldr	r3, [r0, #0]
   d42d4:	b2c9      	uxtb	r1, r1
   d42d6:	689b      	ldr	r3, [r3, #8]
   d42d8:	4798      	blx	r3
   d42da:	4607      	mov	r7, r0
        n += println();
   d42dc:	4628      	mov	r0, r5
   d42de:	f003 f9f8 	bl	d76d2 <_ZN5Print7printlnEv>
    }
   d42e2:	4438      	add	r0, r7
   d42e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d42e6:	2900      	cmp	r1, #0
   d42e8:	da0c      	bge.n	d4304 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d42ea:	2a0a      	cmp	r2, #10
   d42ec:	d10a      	bne.n	d4304 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d42ee:	212d      	movs	r1, #45	; 0x2d
   d42f0:	f003 f9ec 	bl	d76cc <_ZN5Print5printEc>
            val = -n;
   d42f4:	4261      	negs	r1, r4
            t = print('-');
   d42f6:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d42f8:	b2f2      	uxtb	r2, r6
   d42fa:	4628      	mov	r0, r5
   d42fc:	f003 f9ff 	bl	d76fe <_ZN5Print11printNumberEmh>
   d4300:	4407      	add	r7, r0
   d4302:	e7eb      	b.n	d42dc <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4304:	4621      	mov	r1, r4
        size_t t = 0;
   d4306:	2700      	movs	r7, #0
   d4308:	e7f6      	b.n	d42f8 <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
	...

000d430c <_Z16viewCountDisplayv>:
void viewCountDisplay(){
   d430c:	b538      	push	{r3, r4, r5, lr}
  display.clearDisplay();
   d430e:	4c17      	ldr	r4, [pc, #92]	; (d436c <_Z16viewCountDisplayv+0x60>)
  display.println(countList[0]);
   d4310:	4d17      	ldr	r5, [pc, #92]	; (d4370 <_Z16viewCountDisplayv+0x64>)
  display.clearDisplay();
   d4312:	4620      	mov	r0, r4
   d4314:	f002 f996 	bl	d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4318:	4620      	mov	r0, r4
   d431a:	2101      	movs	r1, #1
   d431c:	f001 fa83 	bl	d5826 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4320:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4324:	2200      	movs	r2, #0
  display.print("Choice 1: ");
   d4326:	4913      	ldr	r1, [pc, #76]	; (d4374 <_Z16viewCountDisplayv+0x68>)
   d4328:	4620      	mov	r0, r4
   d432a:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d432e:	f003 f9c9 	bl	d76c4 <_ZN5Print5printEPKc>
  display.println(countList[0]);
   d4332:	6829      	ldr	r1, [r5, #0]
   d4334:	220a      	movs	r2, #10
   d4336:	4620      	mov	r0, r4
   d4338:	f7ff ffc6 	bl	d42c8 <_ZN5Print7printlnIiLi0EEEjT_i>
  display.print("Choice 2: ");
   d433c:	490e      	ldr	r1, [pc, #56]	; (d4378 <_Z16viewCountDisplayv+0x6c>)
   d433e:	4620      	mov	r0, r4
   d4340:	f003 f9c0 	bl	d76c4 <_ZN5Print5printEPKc>
  display.println(countList[1]);
   d4344:	6869      	ldr	r1, [r5, #4]
   d4346:	220a      	movs	r2, #10
   d4348:	4620      	mov	r0, r4
   d434a:	f7ff ffbd 	bl	d42c8 <_ZN5Print7printlnIiLi0EEEjT_i>
  display.print("Choice 3: ");
   d434e:	490b      	ldr	r1, [pc, #44]	; (d437c <_Z16viewCountDisplayv+0x70>)
   d4350:	4620      	mov	r0, r4
   d4352:	f003 f9b7 	bl	d76c4 <_ZN5Print5printEPKc>
  display.println(countList[2]);
   d4356:	68a9      	ldr	r1, [r5, #8]
   d4358:	4620      	mov	r0, r4
   d435a:	220a      	movs	r2, #10
   d435c:	f7ff ffb4 	bl	d42c8 <_ZN5Print7printlnIiLi0EEEjT_i>
  display.display();
   d4360:	4620      	mov	r0, r4
}
   d4362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display();
   d4366:	f002 bbd9 	b.w	d6b1c <_ZN16Adafruit_SSD13067displayEv>
   d436a:	bf00      	nop
   d436c:	2003e5b4 	.word	0x2003e5b4
   d4370:	2003e5a8 	.word	0x2003e5a8
   d4374:	000d8b39 	.word	0x000d8b39
   d4378:	000d8b44 	.word	0x000d8b44
   d437c:	000d8b4f 	.word	0x000d8b4f

000d4380 <_Z8callbackPcPhj>:
{
   d4380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  char p[length + 1];
   d4382:	f102 0308 	add.w	r3, r2, #8
   d4386:	f023 0307 	bic.w	r3, r3, #7
{
   d438a:	af00      	add	r7, sp, #0
  char p[length + 1];
   d438c:	ebad 0d03 	sub.w	sp, sp, r3
{
   d4390:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   d4392:	4668      	mov	r0, sp
   d4394:	f004 fad6 	bl	d8944 <memcpy>
  p[length] = NULL;
   d4398:	2300      	movs	r3, #0
  if(length>1 && p[0] == '1'){
   d439a:	2c01      	cmp	r4, #1
  p[length] = NULL;
   d439c:	f80d 3004 	strb.w	r3, [sp, r4]
   d43a0:	4d3e      	ldr	r5, [pc, #248]	; (d449c <_Z8callbackPcPhj+0x11c>)
   d43a2:	4c3f      	ldr	r4, [pc, #252]	; (d44a0 <_Z8callbackPcPhj+0x120>)
  char p[length + 1];
   d43a4:	466e      	mov	r6, sp
  if(length>1 && p[0] == '1'){
   d43a6:	d921      	bls.n	d43ec <_Z8callbackPcPhj+0x6c>
   d43a8:	f89d 3000 	ldrb.w	r3, [sp]
   d43ac:	2b31      	cmp	r3, #49	; 0x31
   d43ae:	d113      	bne.n	d43d8 <_Z8callbackPcPhj+0x58>
    choiceList[0] = p;
   d43b0:	483c      	ldr	r0, [pc, #240]	; (d44a4 <_Z8callbackPcPhj+0x124>)
   d43b2:	4669      	mov	r1, sp
    choiceList[1] = p;
   d43b4:	f003 f8ee 	bl	d7594 <_ZN6StringaSEPKc>
  if (countList[0] == 0 && countList[1] == 0 && countList[2] == 0){
   d43b8:	e9d4 1300 	ldrd	r1, r3, [r4]
   d43bc:	4319      	orrs	r1, r3
   d43be:	68a3      	ldr	r3, [r4, #8]
   d43c0:	4319      	orrs	r1, r3
   d43c2:	d141      	bne.n	d4448 <_Z8callbackPcPhj+0xc8>
        analogWrite(A5, 1); //last
   d43c4:	200e      	movs	r0, #14
   d43c6:	f004 f925 	bl	d8614 <_Z11analogWritetm>
  if (viewChoices == true){
   d43ca:	782b      	ldrb	r3, [r5, #0]
   d43cc:	2b00      	cmp	r3, #0
   d43ce:	d061      	beq.n	d4494 <_Z8callbackPcPhj+0x114>
    viewChoiceDisplay();
   d43d0:	f7ff ff08 	bl	d41e4 <_Z17viewChoiceDisplayv>
}  
   d43d4:	46bd      	mov	sp, r7
   d43d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if(length>1 && p[0] == '2'){
   d43d8:	2b32      	cmp	r3, #50	; 0x32
   d43da:	d102      	bne.n	d43e2 <_Z8callbackPcPhj+0x62>
    choiceList[1] = p;
   d43dc:	4832      	ldr	r0, [pc, #200]	; (d44a8 <_Z8callbackPcPhj+0x128>)
   d43de:	4669      	mov	r1, sp
   d43e0:	e7e8      	b.n	d43b4 <_Z8callbackPcPhj+0x34>
  else if(length>1 && p[0] == '3'){
   d43e2:	2b33      	cmp	r3, #51	; 0x33
   d43e4:	d117      	bne.n	d4416 <_Z8callbackPcPhj+0x96>
    choiceList[2] = p;
   d43e6:	4831      	ldr	r0, [pc, #196]	; (d44ac <_Z8callbackPcPhj+0x12c>)
   d43e8:	4669      	mov	r1, sp
   d43ea:	e7e3      	b.n	d43b4 <_Z8callbackPcPhj+0x34>
  else if(length == 1 && p[0] == '1'){
   d43ec:	d113      	bne.n	d4416 <_Z8callbackPcPhj+0x96>
   d43ee:	f89d 3000 	ldrb.w	r3, [sp]
   d43f2:	2b31      	cmp	r3, #49	; 0x31
   d43f4:	d103      	bne.n	d43fe <_Z8callbackPcPhj+0x7e>
    countList[0]++;
   d43f6:	6823      	ldr	r3, [r4, #0]
   d43f8:	3301      	adds	r3, #1
   d43fa:	6023      	str	r3, [r4, #0]
   d43fc:	e7dc      	b.n	d43b8 <_Z8callbackPcPhj+0x38>
  else if(length == 1 && p[0] == '2'){
   d43fe:	2b32      	cmp	r3, #50	; 0x32
   d4400:	d103      	bne.n	d440a <_Z8callbackPcPhj+0x8a>
    countList[1]++;
   d4402:	6863      	ldr	r3, [r4, #4]
   d4404:	3301      	adds	r3, #1
   d4406:	6063      	str	r3, [r4, #4]
   d4408:	e7d6      	b.n	d43b8 <_Z8callbackPcPhj+0x38>
  else if(length == 1 && p[0] == '3'){
   d440a:	2b33      	cmp	r3, #51	; 0x33
   d440c:	d103      	bne.n	d4416 <_Z8callbackPcPhj+0x96>
    countList[2]++;
   d440e:	68a3      	ldr	r3, [r4, #8]
   d4410:	3301      	adds	r3, #1
   d4412:	60a3      	str	r3, [r4, #8]
   d4414:	e7d0      	b.n	d43b8 <_Z8callbackPcPhj+0x38>
    wordType = p;
   d4416:	4631      	mov	r1, r6
   d4418:	4825      	ldr	r0, [pc, #148]	; (d44b0 <_Z8callbackPcPhj+0x130>)
   d441a:	f003 f8bb 	bl	d7594 <_ZN6StringaSEPKc>
    countList[0] = 0;
   d441e:	2600      	movs	r6, #0
    choiceList[0] = "";
   d4420:	4924      	ldr	r1, [pc, #144]	; (d44b4 <_Z8callbackPcPhj+0x134>)
   d4422:	4820      	ldr	r0, [pc, #128]	; (d44a4 <_Z8callbackPcPhj+0x124>)
    countList[2] = 0;
   d4424:	60a6      	str	r6, [r4, #8]
    countList[1] = 0;
   d4426:	e9c4 6600 	strd	r6, r6, [r4]
    choiceList[0] = "";
   d442a:	f003 f8b3 	bl	d7594 <_ZN6StringaSEPKc>
    choiceList[1] = "";
   d442e:	4921      	ldr	r1, [pc, #132]	; (d44b4 <_Z8callbackPcPhj+0x134>)
   d4430:	481d      	ldr	r0, [pc, #116]	; (d44a8 <_Z8callbackPcPhj+0x128>)
   d4432:	f003 f8af 	bl	d7594 <_ZN6StringaSEPKc>
    choiceList[2] = "";
   d4436:	491f      	ldr	r1, [pc, #124]	; (d44b4 <_Z8callbackPcPhj+0x134>)
   d4438:	481c      	ldr	r0, [pc, #112]	; (d44ac <_Z8callbackPcPhj+0x12c>)
   d443a:	f003 f8ab 	bl	d7594 <_ZN6StringaSEPKc>
    viewChoices = true;
   d443e:	2301      	movs	r3, #1
   d4440:	702b      	strb	r3, [r5, #0]
    answerSubmitted = false;
   d4442:	4b1d      	ldr	r3, [pc, #116]	; (d44b8 <_Z8callbackPcPhj+0x138>)
   d4444:	701e      	strb	r6, [r3, #0]
   d4446:	e7b7      	b.n	d43b8 <_Z8callbackPcPhj+0x38>
    if (countList[(playerID+2)%3] >= countList[(playerID)%3]){
   d4448:	4b1c      	ldr	r3, [pc, #112]	; (d44bc <_Z8callbackPcPhj+0x13c>)
   d444a:	681a      	ldr	r2, [r3, #0]
   d444c:	2303      	movs	r3, #3
   d444e:	1c91      	adds	r1, r2, #2
   d4450:	fb91 f0f3 	sdiv	r0, r1, r3
   d4454:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d4458:	1a09      	subs	r1, r1, r0
   d445a:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
   d445e:	1c51      	adds	r1, r2, #1
   d4460:	fb91 f0f3 	sdiv	r0, r1, r3
   d4464:	fb92 f3f3 	sdiv	r3, r2, r3
   d4468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d446c:	1ad3      	subs	r3, r2, r3
   d446e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d4472:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
   d4476:	1a09      	subs	r1, r1, r0
   d4478:	429e      	cmp	r6, r3
   d447a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   d447e:	db05      	blt.n	d448c <_Z8callbackPcPhj+0x10c>
      if (countList[(playerID+2)%3] >= countList[(playerID + 1)%3]){
   d4480:	428e      	cmp	r6, r1
   d4482:	db01      	blt.n	d4488 <_Z8callbackPcPhj+0x108>
        analogWrite(A5, 255); //tied for first
   d4484:	21ff      	movs	r1, #255	; 0xff
   d4486:	e79d      	b.n	d43c4 <_Z8callbackPcPhj+0x44>
        analogWrite(A5, 90); //second
   d4488:	215a      	movs	r1, #90	; 0x5a
   d448a:	e79b      	b.n	d43c4 <_Z8callbackPcPhj+0x44>
      if (countList[(playerID+2) % 3] >= countList[(playerID+1)%3]){
   d448c:	428e      	cmp	r6, r1
   d448e:	dafb      	bge.n	d4488 <_Z8callbackPcPhj+0x108>
        analogWrite(A5, 1); //last
   d4490:	2101      	movs	r1, #1
   d4492:	e797      	b.n	d43c4 <_Z8callbackPcPhj+0x44>
    viewCountDisplay();
   d4494:	f7ff ff3a 	bl	d430c <_Z16viewCountDisplayv>
}  
   d4498:	e79c      	b.n	d43d4 <_Z8callbackPcPhj+0x54>
   d449a:	bf00      	nop
   d449c:	2003e438 	.word	0x2003e438
   d44a0:	2003e5a8 	.word	0x2003e5a8
   d44a4:	2003e518 	.word	0x2003e518
   d44a8:	2003e528 	.word	0x2003e528
   d44ac:	2003e538 	.word	0x2003e538
   d44b0:	2003e634 	.word	0x2003e634
   d44b4:	000d8b43 	.word	0x000d8b43
   d44b8:	2003e504 	.word	0x2003e504
   d44bc:	2003e434 	.word	0x2003e434

000d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d44c0:	b508      	push	{r3, lr}
        state = CONNECTING;
   d44c2:	2300      	movs	r3, #0
   d44c4:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d44c6:	6800      	ldr	r0, [r0, #0]
   d44c8:	f003 fe48 	bl	d815c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d44cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d44d0:	f002 bbc4 	b.w	d6c5c <BlynkNoOpCbk>

000d44d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d44d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d44d8:	eb01 0902 	add.w	r9, r1, r2
   d44dc:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d44de:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d44e0:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d44e4:	4680      	mov	r8, r0
   d44e6:	460d      	mov	r5, r1
   d44e8:	4616      	mov	r6, r2
    if (it >= param.end())
   d44ea:	f080 8092 	bcs.w	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d44ee:	a805      	add	r0, sp, #20
   d44f0:	880f      	ldrh	r7, [r1, #0]
   d44f2:	f7ff fe43 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
   d44f6:	6803      	ldr	r3, [r0, #0]
   d44f8:	4599      	cmp	r9, r3
   d44fa:	f240 808a 	bls.w	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d44fe:	a805      	add	r0, sp, #20
   d4500:	f7ff fe32 	bl	d4168 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d4504:	f247 2376 	movw	r3, #29302	; 0x7276
   d4508:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d450a:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   d450c:	f000 80a9 	beq.w	d4662 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   d4510:	d827      	bhi.n	d4562 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   d4512:	f247 2361 	movw	r3, #29281	; 0x7261
   d4516:	429f      	cmp	r7, r3
   d4518:	d07e      	beq.n	d4618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   d451a:	f247 2364 	movw	r3, #29284	; 0x7264
   d451e:	429f      	cmp	r7, r3
   d4520:	d042      	beq.n	d45a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   d4522:	f646 5370 	movw	r3, #28016	; 0x6d70
   d4526:	429f      	cmp	r7, r3
   d4528:	d128      	bne.n	d457c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d452a:	4e63      	ldr	r6, [pc, #396]	; (d46b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d452c:	4f63      	ldr	r7, [pc, #396]	; (d46bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   d452e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; d46d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   d4532:	9b05      	ldr	r3, [sp, #20]
   d4534:	4599      	cmp	r9, r3
   d4536:	d96c      	bls.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4538:	a805      	add	r0, sp, #20
   d453a:	f7ff fe15 	bl	d4168 <_ZNK10BlynkParam8iterator5asIntEv>
   d453e:	b2c4      	uxtb	r4, r0
            ++it;
   d4540:	a805      	add	r0, sp, #20
   d4542:	f7ff fe1b 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4546:	9d05      	ldr	r5, [sp, #20]
   d4548:	4631      	mov	r1, r6
   d454a:	4628      	mov	r0, r5
   d454c:	f004 fa34 	bl	d89b8 <strcmp>
   d4550:	4601      	mov	r1, r0
   d4552:	b9e0      	cbnz	r0, d458e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   d4554:	4620      	mov	r0, r4
   d4556:	f004 f809 	bl	d856c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d455a:	a805      	add	r0, sp, #20
   d455c:	f7ff fe0e 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4560:	e7e7      	b.n	d4532 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   d4562:	f247 7364 	movw	r3, #30564	; 0x7764
   d4566:	429f      	cmp	r7, r3
   d4568:	d03f      	beq.n	d45ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d456a:	f247 7376 	movw	r3, #30582	; 0x7776
   d456e:	429f      	cmp	r7, r3
   d4570:	f000 8087 	beq.w	d4682 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   d4574:	f247 7361 	movw	r3, #30561	; 0x7761
   d4578:	429f      	cmp	r7, r3
   d457a:	d05f      	beq.n	d463c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d457c:	2300      	movs	r3, #0
   d457e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4582:	2202      	movs	r2, #2
   d4584:	9200      	str	r2, [sp, #0]
   d4586:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d458a:	4619      	mov	r1, r3
   d458c:	e029      	b.n	d45e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d458e:	4639      	mov	r1, r7
   d4590:	4628      	mov	r0, r5
   d4592:	f004 fa11 	bl	d89b8 <strcmp>
   d4596:	b128      	cbz	r0, d45a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   d4598:	4641      	mov	r1, r8
   d459a:	4628      	mov	r0, r5
   d459c:	f004 fa0c 	bl	d89b8 <strcmp>
   d45a0:	2800      	cmp	r0, #0
   d45a2:	d1da      	bne.n	d455a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   d45a4:	2101      	movs	r1, #1
   d45a6:	e7d5      	b.n	d4554 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d45a8:	ab0a      	add	r3, sp, #40	; 0x28
   d45aa:	4945      	ldr	r1, [pc, #276]	; (d46c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   d45ac:	9307      	str	r3, [sp, #28]
   d45ae:	a807      	add	r0, sp, #28
   d45b0:	2310      	movs	r3, #16
   d45b2:	2500      	movs	r5, #0
   d45b4:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d45b8:	f7ff fd98 	bl	d40ec <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d45bc:	a807      	add	r0, sp, #28
   d45be:	4621      	mov	r1, r4
   d45c0:	f7ff fdec 	bl	d419c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d45c4:	4620      	mov	r0, r4
   d45c6:	f003 fffb 	bl	d85c0 <digitalRead>
        rsp.add(analogRead(pin));
   d45ca:	4601      	mov	r1, r0
   d45cc:	a807      	add	r0, sp, #28
   d45ce:	f7ff fdf7 	bl	d41c0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d45d2:	9b08      	ldr	r3, [sp, #32]
   d45d4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d45d8:	3b01      	subs	r3, #1
   d45da:	9300      	str	r3, [sp, #0]
   d45dc:	9b07      	ldr	r3, [sp, #28]
   d45de:	462a      	mov	r2, r5
   d45e0:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d45e2:	4640      	mov	r0, r8
   d45e4:	f000 fb22 	bl	d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d45e8:	e013      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   d45ea:	a805      	add	r0, sp, #20
   d45ec:	f7ff fdc6 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
   d45f0:	6803      	ldr	r3, [r0, #0]
   d45f2:	4599      	cmp	r9, r3
   d45f4:	d90d      	bls.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d45f6:	b2a4      	uxth	r4, r4
   d45f8:	2101      	movs	r1, #1
   d45fa:	4620      	mov	r0, r4
   d45fc:	f003 ffb6 	bl	d856c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4600:	a805      	add	r0, sp, #20
   d4602:	f7ff fdb1 	bl	d4168 <_ZNK10BlynkParam8iterator5asIntEv>
   d4606:	1e01      	subs	r1, r0, #0
   d4608:	bf18      	it	ne
   d460a:	2101      	movne	r1, #1
   d460c:	4620      	mov	r0, r4
   d460e:	f003 ffbe 	bl	d858e <digitalWrite>
    }
}
   d4612:	b00f      	add	sp, #60	; 0x3c
   d4614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4618:	ab0a      	add	r3, sp, #40	; 0x28
   d461a:	9307      	str	r3, [sp, #28]
   d461c:	a807      	add	r0, sp, #28
   d461e:	2310      	movs	r3, #16
   d4620:	4928      	ldr	r1, [pc, #160]	; (d46c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   d4622:	2500      	movs	r5, #0
   d4624:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d4628:	f7ff fd60 	bl	d40ec <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d462c:	a807      	add	r0, sp, #28
   d462e:	4621      	mov	r1, r4
   d4630:	f7ff fdb4 	bl	d419c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4634:	4620      	mov	r0, r4
   d4636:	f003 ffd6 	bl	d85e6 <analogRead>
   d463a:	e7c6      	b.n	d45ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   d463c:	a805      	add	r0, sp, #20
   d463e:	f7ff fd9d 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
   d4642:	6803      	ldr	r3, [r0, #0]
   d4644:	4599      	cmp	r9, r3
   d4646:	d9e4      	bls.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   d4648:	b2a4      	uxth	r4, r4
   d464a:	2101      	movs	r1, #1
   d464c:	4620      	mov	r0, r4
   d464e:	f003 ff8d 	bl	d856c <pinMode>
        analogWrite(pin, it.asInt());
   d4652:	a805      	add	r0, sp, #20
   d4654:	f7ff fd88 	bl	d4168 <_ZNK10BlynkParam8iterator5asIntEv>
   d4658:	4601      	mov	r1, r0
   d465a:	4620      	mov	r0, r4
   d465c:	f003 ffda 	bl	d8614 <_Z11analogWritetm>
    } break;
   d4660:	e7d7      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4662:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4664:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d4668:	f002 fafa 	bl	d6c60 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d466c:	4603      	mov	r3, r0
            handler(req);
   d466e:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4670:	b123      	cbz	r3, d467c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   d4672:	4a15      	ldr	r2, [pc, #84]	; (d46c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   d4674:	4293      	cmp	r3, r2
   d4676:	d001      	beq.n	d467c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   d4678:	4798      	blx	r3
   d467a:	e7ca      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   d467c:	f002 faec 	bl	d6c58 <BlynkWidgetRead>
        }
    }
   d4680:	e7c7      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   d4682:	a805      	add	r0, sp, #20
   d4684:	f7ff fd7a 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d4688:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d468a:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d468e:	1b5d      	subs	r5, r3, r5
   d4690:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4692:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d4694:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   d4698:	950c      	str	r5, [sp, #48]	; 0x30
   d469a:	f002 faeb 	bl	d6c74 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d469e:	4603      	mov	r3, r0
            handler(req, param);
   d46a0:	a90a      	add	r1, sp, #40	; 0x28
   d46a2:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d46a4:	b123      	cbz	r3, d46b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d46a6:	4a09      	ldr	r2, [pc, #36]	; (d46cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d46a8:	4293      	cmp	r3, r2
   d46aa:	d001      	beq.n	d46b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   d46ac:	4798      	blx	r3
   d46ae:	e7b0      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   d46b0:	f002 fad3 	bl	d6c5a <BlynkWidgetWrite>
    } break;
   d46b4:	e7ad      	b.n	d4612 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   d46b6:	bf00      	nop
   d46b8:	000d8b5a 	.word	0x000d8b5a
   d46bc:	000d8b5d 	.word	0x000d8b5d
   d46c0:	000d8b65 	.word	0x000d8b65
   d46c4:	000d8b68 	.word	0x000d8b68
   d46c8:	000d6c59 	.word	0x000d6c59
   d46cc:	000d6c5b 	.word	0x000d6c5b
   d46d0:	000d8b61 	.word	0x000d8b61

000d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46d8:	b08c      	sub	sp, #48	; 0x30
   d46da:	af04      	add	r7, sp, #16
   d46dc:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d46de:	2205      	movs	r2, #5
   d46e0:	6800      	ldr	r0, [r0, #0]
   d46e2:	1d39      	adds	r1, r7, #4
   d46e4:	f003 f86f 	bl	d77c6 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d46e8:	b3b8      	cbz	r0, d475a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d46ea:	2805      	cmp	r0, #5
   d46ec:	d004      	beq.n	d46f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d46ee:	2000      	movs	r0, #0
}
   d46f0:	3720      	adds	r7, #32
   d46f2:	46bd      	mov	sp, r7
   d46f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d46f8:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d46fc:	0a13      	lsrs	r3, r2, #8
   d46fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4702:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d4706:	f8a7 3005 	strh.w	r3, [r7, #5]
   d470a:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d470c:	0a13      	lsrs	r3, r2, #8
   d470e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4712:	fa1f f883 	uxth.w	r8, r3
   d4716:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d471a:	2900      	cmp	r1, #0
   d471c:	d0e7      	beq.n	d46ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d471e:	793b      	ldrb	r3, [r7, #4]
   d4720:	bb23      	cbnz	r3, d476c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4722:	f002 fa97 	bl	d6c54 <_Z11BlynkMillisv>
   d4726:	4602      	mov	r2, r0
   d4728:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d472a:	7f60      	ldrb	r0, [r4, #29]
   d472c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4730:	b9c0      	cbnz	r0, d4764 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4732:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d4736:	2901      	cmp	r1, #1
   d4738:	d114      	bne.n	d4764 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d473a:	2b09      	cmp	r3, #9
   d473c:	d00f      	beq.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d473e:	2bc8      	cmp	r3, #200	; 0xc8
   d4740:	d001      	beq.n	d4746 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4742:	2b04      	cmp	r3, #4
   d4744:	d1d4      	bne.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d4746:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4748:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d474a:	4620      	mov	r0, r4
                state = CONNECTED;
   d474c:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d474e:	f000 fb1b 	bl	d4d88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4752:	f7ff fcfd 	bl	d4150 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4756:	f002 fa81 	bl	d6c5c <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d475a:	2001      	movs	r0, #1
   d475c:	e7c8      	b.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d475e:	2303      	movs	r3, #3
   d4760:	7763      	strb	r3, [r4, #29]
                break;
   d4762:	e7c5      	b.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4764:	1f58      	subs	r0, r3, #5
   d4766:	bf18      	it	ne
   d4768:	2001      	movne	r0, #1
   d476a:	e7c1      	b.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d476c:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4770:	d903      	bls.n	d477a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4772:	4620      	mov	r0, r4
   d4774:	f7ff fea4 	bl	d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4778:	e7ef      	b.n	d475a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d477a:	f108 0308 	add.w	r3, r8, #8
   d477e:	f023 0307 	bic.w	r3, r3, #7
   d4782:	466e      	mov	r6, sp
   d4784:	ebad 0d03 	sub.w	sp, sp, r3
   d4788:	ad04      	add	r5, sp, #16
   d478a:	6820      	ldr	r0, [r4, #0]
   d478c:	4642      	mov	r2, r8
   d478e:	4629      	mov	r1, r5
   d4790:	f003 f819 	bl	d77c6 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4794:	4580      	cmp	r8, r0
   d4796:	f04f 0000 	mov.w	r0, #0
   d479a:	d17f      	bne.n	d489c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d479c:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d47a0:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d47a2:	f002 fa57 	bl	d6c54 <_Z11BlynkMillisv>
    switch (hdr.type)
   d47a6:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d47a8:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d47aa:	2b14      	cmp	r3, #20
   d47ac:	f000 80a6 	beq.w	d48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d47b0:	d848      	bhi.n	d4844 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d47b2:	2b0f      	cmp	r3, #15
   d47b4:	f000 80a2 	beq.w	d48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d47b8:	d807      	bhi.n	d47ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d47ba:	2b02      	cmp	r3, #2
   d47bc:	d048      	beq.n	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d47be:	2b06      	cmp	r3, #6
   d47c0:	d051      	beq.n	d4866 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d47c2:	4620      	mov	r0, r4
   d47c4:	f7ff fe7c 	bl	d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d47c8:	e058      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d47ca:	2b11      	cmp	r3, #17
   d47cc:	d1f9      	bne.n	d47c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d47ce:	2300      	movs	r3, #0
   d47d0:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d47d2:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d47d6:	442b      	add	r3, r5
        if (it >= param.end())
   d47d8:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d47da:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d47de:	d24d      	bcs.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d47e0:	f107 000c 	add.w	r0, r7, #12
   d47e4:	f8d5 8000 	ldr.w	r8, [r5]
   d47e8:	f7ff fcc8 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d47ec:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d47ee:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d47f2:	1b5d      	subs	r5, r3, r5
   d47f4:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d47f6:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d47fa:	687b      	ldr	r3, [r7, #4]
   d47fc:	61fd      	str	r5, [r7, #28]
   d47fe:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4802:	8363      	strh	r3, [r4, #26]
   d4804:	4b64      	ldr	r3, [pc, #400]	; (d4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d4806:	4598      	cmp	r8, r3
   d4808:	f000 80bf 	beq.w	d498a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d480c:	f200 808c 	bhi.w	d4928 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4810:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4814:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d4818:	4413      	add	r3, r2
   d481a:	4598      	cmp	r8, r3
   d481c:	f000 809d 	beq.w	d495a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4820:	d879      	bhi.n	d4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4822:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d4826:	3b06      	subs	r3, #6
   d4828:	4598      	cmp	r8, r3
   d482a:	f000 809c 	beq.w	d4966 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d482e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4832:	3303      	adds	r3, #3
   d4834:	4598      	cmp	r8, r3
   d4836:	d16b      	bne.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4838:	f107 0114 	add.w	r1, r7, #20
   d483c:	4638      	mov	r0, r7
   d483e:	f002 fa0c 	bl	d6c5a <BlynkWidgetWrite>
   d4842:	e065      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4844:	2b29      	cmp	r3, #41	; 0x29
   d4846:	d01b      	beq.n	d4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4848:	2b37      	cmp	r3, #55	; 0x37
   d484a:	d017      	beq.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d484c:	2b1d      	cmp	r3, #29
   d484e:	d1b8      	bne.n	d47c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4850:	7f63      	ldrb	r3, [r4, #29]
   d4852:	b943      	cbnz	r3, d4866 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4854:	2301      	movs	r3, #1
   d4856:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4858:	4620      	mov	r0, r4
   d485a:	f000 fa95 	bl	d4d88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d485e:	f7ff fc77 	bl	d4150 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4862:	f002 f9fb 	bl	d6c5c <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d4866:	2300      	movs	r3, #0
   d4868:	21c8      	movs	r1, #200	; 0xc8
   d486a:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d486e:	9100      	str	r1, [sp, #0]
   d4870:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4874:	4619      	mov	r1, r3
   d4876:	4620      	mov	r0, r4
   d4878:	f000 f9d8 	bl	d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d487c:	2001      	movs	r0, #1
   d487e:	e00d      	b.n	d489c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4880:	68a3      	ldr	r3, [r4, #8]
   d4882:	b91b      	cbnz	r3, d488c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4884:	2040      	movs	r0, #64	; 0x40
   d4886:	f002 fcab 	bl	d71e0 <malloc>
   d488a:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d488c:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4890:	44a8      	add	r8, r5
        if (it >= param.end())
   d4892:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4894:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4898:	d302      	bcc.n	d48a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d489a:	2000      	movs	r0, #0
   d489c:	46b5      	mov	sp, r6
   d489e:	e727      	b.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d48a0:	4629      	mov	r1, r5
   d48a2:	2240      	movs	r2, #64	; 0x40
   d48a4:	68a0      	ldr	r0, [r4, #8]
   d48a6:	f004 f8a1 	bl	d89ec <strncpy>
        redir_serv[63] = '\0';
   d48aa:	68a3      	ldr	r3, [r4, #8]
   d48ac:	2500      	movs	r5, #0
   d48ae:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d48b2:	f107 0014 	add.w	r0, r7, #20
   d48b6:	f7ff fc61 	bl	d417c <_ZN10BlynkParam8iteratorppEv>
   d48ba:	6803      	ldr	r3, [r0, #0]
   d48bc:	4543      	cmp	r3, r8
   d48be:	d21b      	bcs.n	d48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d48c0:	6978      	ldr	r0, [r7, #20]
   d48c2:	b120      	cbz	r0, d48ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d48c4:	69bb      	ldr	r3, [r7, #24]
   d48c6:	4298      	cmp	r0, r3
   d48c8:	d214      	bcs.n	d48f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d48ca:	f004 f829 	bl	d8920 <atol>
            redir_port = it.asLong();
   d48ce:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d48d0:	6820      	ldr	r0, [r4, #0]
   d48d2:	f003 fc43 	bl	d815c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d48d6:	6823      	ldr	r3, [r4, #0]
   d48d8:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d48da:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d48dc:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d48de:	2300      	movs	r3, #0
   d48e0:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48e2:	f002 f9b7 	bl	d6c54 <_Z11BlynkMillisv>
   d48e6:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48ea:	3808      	subs	r0, #8
   d48ec:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d48f0:	6160      	str	r0, [r4, #20]
   d48f2:	e7c3      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d48f4:	4628      	mov	r0, r5
   d48f6:	e7ea      	b.n	d48ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d48f8:	2550      	movs	r5, #80	; 0x50
   d48fa:	e7e9      	b.n	d48d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d48fc:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d48fe:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4902:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4906:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4908:	4629      	mov	r1, r5
   d490a:	4620      	mov	r0, r4
   d490c:	f7ff fde2 	bl	d44d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4910:	2300      	movs	r3, #0
   d4912:	8363      	strh	r3, [r4, #26]
   d4914:	e7b2      	b.n	d487c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4916:	4b21      	ldr	r3, [pc, #132]	; (d499c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d4918:	4598      	cmp	r8, r3
   d491a:	d1f9      	bne.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d491c:	f107 0114 	add.w	r1, r7, #20
   d4920:	4638      	mov	r0, r7
   d4922:	f002 f99a 	bl	d6c5a <BlynkWidgetWrite>
   d4926:	e7f3      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4928:	4b1d      	ldr	r3, [pc, #116]	; (d49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d492a:	4598      	cmp	r8, r3
   d492c:	d021      	beq.n	d4972 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d492e:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4932:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4936:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d493a:	4598      	cmp	r8, r3
   d493c:	d01f      	beq.n	d497e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d493e:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4942:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d4946:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d494a:	4598      	cmp	r8, r3
   d494c:	d1e0      	bne.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d494e:	f107 0114 	add.w	r1, r7, #20
   d4952:	4638      	mov	r0, r7
   d4954:	f002 f981 	bl	d6c5a <BlynkWidgetWrite>
   d4958:	e7da      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d495a:	f107 0114 	add.w	r1, r7, #20
   d495e:	4638      	mov	r0, r7
   d4960:	f002 f97b 	bl	d6c5a <BlynkWidgetWrite>
   d4964:	e7d4      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4966:	f107 0114 	add.w	r1, r7, #20
   d496a:	4638      	mov	r0, r7
   d496c:	f002 f975 	bl	d6c5a <BlynkWidgetWrite>
   d4970:	e7ce      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4972:	f107 0114 	add.w	r1, r7, #20
   d4976:	4638      	mov	r0, r7
   d4978:	f002 f96f 	bl	d6c5a <BlynkWidgetWrite>
   d497c:	e7c8      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d497e:	f107 0114 	add.w	r1, r7, #20
   d4982:	4638      	mov	r0, r7
   d4984:	f002 f969 	bl	d6c5a <BlynkWidgetWrite>
   d4988:	e7c2      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d498a:	f107 0114 	add.w	r1, r7, #20
   d498e:	4638      	mov	r0, r7
   d4990:	f002 f963 	bl	d6c5a <BlynkWidgetWrite>
   d4994:	e7bc      	b.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4996:	bf00      	nop
   d4998:	00736676 	.word	0x00736676
   d499c:	00676264 	.word	0x00676264
   d49a0:	6e6f6361 	.word	0x6e6f6361

000d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d49a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d49a8:	4604      	mov	r4, r0
   d49aa:	b08c      	sub	sp, #48	; 0x30
   d49ac:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d49ae:	f7ff fbcf 	bl	d4150 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d49b2:	7f63      	ldrb	r3, [r4, #29]
   d49b4:	2b02      	cmp	r3, #2
   d49b6:	f000 80a8 	beq.w	d4b0a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d49ba:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d49bc:	8b62      	ldrh	r2, [r4, #26]
   d49be:	3301      	adds	r3, #1
   d49c0:	b2db      	uxtb	r3, r3
   d49c2:	7723      	strb	r3, [r4, #28]
   d49c4:	b10a      	cbz	r2, d49ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d49c6:	2501      	movs	r5, #1
   d49c8:	e016      	b.n	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d49ca:	2b02      	cmp	r3, #2
   d49cc:	d8fb      	bhi.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d49ce:	6820      	ldr	r0, [r4, #0]
   d49d0:	f003 f9e3 	bl	d7d9a <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d49d4:	b1b8      	cbz	r0, d4a06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d49d6:	b925      	cbnz	r5, d49e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d49d8:	6820      	ldr	r0, [r4, #0]
   d49da:	f003 fb65 	bl	d80a8 <_ZN9TCPClient9availableEv>
   d49de:	2800      	cmp	r0, #0
   d49e0:	dd11      	ble.n	d4a06 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d49e2:	4620      	mov	r0, r4
   d49e4:	f7ff fe76 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d49e8:	4605      	mov	r5, r0
   d49ea:	2800      	cmp	r0, #0
   d49ec:	d1f4      	bne.n	d49d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d49ee:	6820      	ldr	r0, [r4, #0]
   d49f0:	f003 fbb4 	bl	d815c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d49f4:	f002 f932 	bl	d6c5c <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d49f8:	7f23      	ldrb	r3, [r4, #28]
   d49fa:	3b01      	subs	r3, #1
   d49fc:	7723      	strb	r3, [r4, #28]
}
   d49fe:	4628      	mov	r0, r5
   d4a00:	b00c      	add	sp, #48	; 0x30
   d4a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d4a06:	f002 f925 	bl	d6c54 <_Z11BlynkMillisv>
   d4a0a:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4a0c:	6820      	ldr	r0, [r4, #0]
   d4a0e:	f003 f9c4 	bl	d7d9a <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4a12:	7f67      	ldrb	r7, [r4, #29]
   d4a14:	2f01      	cmp	r7, #1
   d4a16:	4605      	mov	r5, r0
   d4a18:	d129      	bne.n	d4a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d4a1a:	b920      	cbnz	r0, d4a26 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4a1c:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f7ff fd4e 	bl	d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4a24:	e7e8      	b.n	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4a26:	68e3      	ldr	r3, [r4, #12]
   d4a28:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4a2c:	1af3      	subs	r3, r6, r3
   d4a2e:	4293      	cmp	r3, r2
   d4a30:	d904      	bls.n	d4a3c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4a32:	4620      	mov	r0, r4
   d4a34:	f7ff fd44 	bl	d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4a38:	2500      	movs	r5, #0
   d4a3a:	e7dd      	b.n	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4a3c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4a40:	4293      	cmp	r3, r2
   d4a42:	d803      	bhi.n	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4a44:	6923      	ldr	r3, [r4, #16]
   d4a46:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4a48:	4293      	cmp	r3, r2
   d4a4a:	d9bc      	bls.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4a4c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4a4e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4a52:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4a54:	4293      	cmp	r3, r2
   d4a56:	d9b6      	bls.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4a58:	2300      	movs	r3, #0
   d4a5a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4a5e:	9300      	str	r3, [sp, #0]
   d4a60:	461a      	mov	r2, r3
   d4a62:	2106      	movs	r1, #6
   d4a64:	4620      	mov	r0, r4
   d4a66:	f000 f8e1 	bl	d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4a6a:	6166      	str	r6, [r4, #20]
   d4a6c:	e7ab      	b.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4a6e:	2f00      	cmp	r7, #0
   d4a70:	d1a9      	bne.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4a72:	6962      	ldr	r2, [r4, #20]
   d4a74:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4a76:	b140      	cbz	r0, d4a8a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4a78:	f241 7370 	movw	r3, #6000	; 0x1770
   d4a7c:	429a      	cmp	r2, r3
   d4a7e:	d9a2      	bls.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4a80:	6820      	ldr	r0, [r4, #0]
   d4a82:	f003 fb6b 	bl	d815c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4a86:	7767      	strb	r7, [r4, #29]
   d4a88:	e7d6      	b.n	d4a38 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4a8a:	f241 3388 	movw	r3, #5000	; 0x1388
   d4a8e:	429a      	cmp	r2, r3
   d4a90:	d999      	bls.n	d49c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4a92:	6820      	ldr	r0, [r4, #0]
   d4a94:	f003 fb62 	bl	d815c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4a98:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4a9c:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4aa0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d4aa4:	f1be 0f00 	cmp.w	lr, #0
   d4aa8:	d00b      	beq.n	d4ac2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4aaa:	462b      	mov	r3, r5
   d4aac:	4642      	mov	r2, r8
   d4aae:	4671      	mov	r1, lr
   d4ab0:	4660      	mov	r0, ip
   d4ab2:	f003 fbb1 	bl	d8218 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d4ab6:	1e43      	subs	r3, r0, #1
   d4ab8:	425d      	negs	r5, r3
   d4aba:	415d      	adcs	r5, r3
   d4abc:	b98d      	cbnz	r5, d4ae2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4abe:	6166      	str	r6, [r4, #20]
                return false;
   d4ac0:	e79a      	b.n	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4ac2:	4b13      	ldr	r3, [pc, #76]	; (d4b10 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d4ac4:	9306      	str	r3, [sp, #24]
   d4ac6:	f10c 0720 	add.w	r7, ip, #32
   d4aca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4acc:	ad07      	add	r5, sp, #28
   d4ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4ad0:	683b      	ldr	r3, [r7, #0]
   d4ad2:	702b      	strb	r3, [r5, #0]
   d4ad4:	4642      	mov	r2, r8
   d4ad6:	4673      	mov	r3, lr
   d4ad8:	a906      	add	r1, sp, #24
   d4ada:	4660      	mov	r0, ip
   d4adc:	f003 fa69 	bl	d7fb2 <_ZN9TCPClient7connectE9IPAddresstm>
   d4ae0:	e7e9      	b.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4ae2:	6863      	ldr	r3, [r4, #4]
   d4ae4:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d4ae6:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4ae8:	4618      	mov	r0, r3
            msgIdOut = 1;
   d4aea:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4aec:	f003 ff76 	bl	d89dc <strlen>
   d4af0:	2200      	movs	r2, #0
   d4af2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4af6:	9b05      	ldr	r3, [sp, #20]
   d4af8:	9000      	str	r0, [sp, #0]
   d4afa:	4632      	mov	r2, r6
   d4afc:	211d      	movs	r1, #29
   d4afe:	4620      	mov	r0, r4
   d4b00:	f000 f894 	bl	d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4b04:	6923      	ldr	r3, [r4, #16]
   d4b06:	6163      	str	r3, [r4, #20]
            return true;
   d4b08:	e776      	b.n	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d4b0a:	2500      	movs	r5, #0
   d4b0c:	e777      	b.n	d49fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4b0e:	bf00      	nop
   d4b10:	000d9bb8 	.word	0x000d9bb8

000d4b14 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b18:	4615      	mov	r5, r2
   d4b1a:	b08c      	sub	sp, #48	; 0x30
   d4b1c:	4604      	mov	r4, r0
   d4b1e:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4b24:	460f      	mov	r7, r1
   d4b26:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4b28:	f002 f892 	bl	d6c50 <_Z10BlynkDelaym>
   d4b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b2e:	ae01      	add	r6, sp, #4
   d4b30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4b32:	682b      	ldr	r3, [r5, #0]
   d4b34:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d4b36:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4b38:	f002 f88c 	bl	d6c54 <_Z11BlynkMillisv>
   d4b3c:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4b40:	3808      	subs	r0, #8
   d4b42:	af01      	add	r7, sp, #4
   d4b44:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4b48:	6160      	str	r0, [r4, #20]
   d4b4a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4b4c:	ae07      	add	r6, sp, #28
   d4b4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4b50:	683b      	ldr	r3, [r7, #0]
   d4b52:	7033      	strb	r3, [r6, #0]
   d4b54:	af07      	add	r7, sp, #28
   d4b56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4b58:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d4b5a:	f04f 0c00 	mov.w	ip, #0
   d4b5e:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4b62:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d4b66:	3520      	adds	r5, #32
   d4b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4b6a:	6833      	ldr	r3, [r6, #0]
   d4b6c:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4b6e:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4b70:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4b74:	6820      	ldr	r0, [r4, #0]
   d4b76:	f003 faf1 	bl	d815c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4b7a:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4b7c:	f002 f86a 	bl	d6c54 <_Z11BlynkMillisv>
   d4b80:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4b82:	7f63      	ldrb	r3, [r4, #29]
   d4b84:	2b01      	cmp	r3, #1
   d4b86:	d00c      	beq.n	d4ba2 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4b88:	f002 f864 	bl	d6c54 <_Z11BlynkMillisv>
   d4b8c:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4b8e:	42b8      	cmp	r0, r7
   d4b90:	d804      	bhi.n	d4b9c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d4b92:	2100      	movs	r1, #0
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff ff05 	bl	d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4b9a:	e7f2      	b.n	d4b82 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4b9c:	7f63      	ldrb	r3, [r4, #29]
   d4b9e:	2b01      	cmp	r3, #1
   d4ba0:	d1e8      	bne.n	d4b74 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d4ba2:	b00c      	add	sp, #48	; 0x30
   d4ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ba8 <setup>:
void setup() {
   d4ba8:	b500      	push	{lr}
  pinMode(A5, OUTPUT);
   d4baa:	2101      	movs	r1, #1
void setup() {
   d4bac:	b089      	sub	sp, #36	; 0x24
  pinMode(A5, OUTPUT);
   d4bae:	200e      	movs	r0, #14
   d4bb0:	f003 fcdc 	bl	d856c <pinMode>
  pinMode(D5, INPUT);
   d4bb4:	2100      	movs	r1, #0
   d4bb6:	2005      	movs	r0, #5
   d4bb8:	f003 fcd8 	bl	d856c <pinMode>
  pinMode(D6, INPUT);
   d4bbc:	2100      	movs	r1, #0
   d4bbe:	2006      	movs	r0, #6
   d4bc0:	f003 fcd4 	bl	d856c <pinMode>
  pinMode(D7, INPUT);
   d4bc4:	2100      	movs	r1, #0
   d4bc6:	2007      	movs	r0, #7
   d4bc8:	f003 fcd0 	bl	d856c <pinMode>
  display.setup();
   d4bcc:	4814      	ldr	r0, [pc, #80]	; (d4c20 <setup+0x78>)
   d4bce:	f000 fe79 	bl	d58c4 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d4bd2:	4813      	ldr	r0, [pc, #76]	; (d4c20 <setup+0x78>)
   d4bd4:	f001 fd36 	bl	d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4bd8:	2101      	movs	r1, #1
   d4bda:	4811      	ldr	r0, [pc, #68]	; (d4c20 <setup+0x78>)
   d4bdc:	f000 fe23 	bl	d5826 <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d4be0:	480f      	ldr	r0, [pc, #60]	; (d4c20 <setup+0x78>)
   d4be2:	2300      	movs	r3, #0
   d4be4:	6103      	str	r3, [r0, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4be6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4bea:	6143      	str	r3, [r0, #20]
  display.display();
   d4bec:	f001 ff96 	bl	d6b1c <_ZN16Adafruit_SSD13067displayEv>
  Serial.begin(9600);
   d4bf0:	f002 ffb2 	bl	d7b58 <_Z16_fetch_usbserialv>
   d4bf4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4bf8:	f002 ffa2 	bl	d7b40 <_ZN9USBSerial5beginEl>
  Blynk.begin("_XeCkFwjobmuT88r_NK86K2oypTbPhYB", IPAddress(167, 172, 234, 162), 9090);
   d4bfc:	23a2      	movs	r3, #162	; 0xa2
   d4bfe:	9300      	str	r3, [sp, #0]
   d4c00:	22ac      	movs	r2, #172	; 0xac
   d4c02:	23ea      	movs	r3, #234	; 0xea
   d4c04:	21a7      	movs	r1, #167	; 0xa7
   d4c06:	a802      	add	r0, sp, #8
   d4c08:	f002 ff2e 	bl	d7a68 <_ZN9IPAddressC1Ehhhh>
   d4c0c:	4905      	ldr	r1, [pc, #20]	; (d4c24 <setup+0x7c>)
   d4c0e:	4806      	ldr	r0, [pc, #24]	; (d4c28 <setup+0x80>)
   d4c10:	f242 3382 	movw	r3, #9090	; 0x2382
   d4c14:	aa02      	add	r2, sp, #8
   d4c16:	f7ff ff7d 	bl	d4b14 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
}
   d4c1a:	b009      	add	sp, #36	; 0x24
   d4c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c20:	2003e5b4 	.word	0x2003e5b4
   d4c24:	000d8b6b 	.word	0x000d8b6b
   d4c28:	2003e4a8 	.word	0x2003e4a8

000d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c30:	b083      	sub	sp, #12
   d4c32:	af00      	add	r7, sp, #0
   d4c34:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4c36:	6800      	ldr	r0, [r0, #0]
   d4c38:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4c3a:	4688      	mov	r8, r1
   d4c3c:	4616      	mov	r6, r2
   d4c3e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4c40:	46eb      	mov	fp, sp
   d4c42:	f003 f8aa 	bl	d7d9a <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4c46:	2800      	cmp	r0, #0
   d4c48:	d07f      	beq.n	d4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4c4a:	f1b8 0f1d 	cmp.w	r8, #29
   d4c4e:	d804      	bhi.n	d4c5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4c50:	4b4c      	ldr	r3, [pc, #304]	; (d4d84 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4c52:	fa23 f308 	lsr.w	r3, r3, r8
   d4c56:	07db      	lsls	r3, r3, #31
   d4c58:	d402      	bmi.n	d4c60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4c5a:	7f63      	ldrb	r3, [r4, #29]
   d4c5c:	2b01      	cmp	r3, #1
   d4c5e:	d174      	bne.n	d4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4c60:	b946      	cbnz	r6, d4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4c62:	8b66      	ldrh	r6, [r4, #26]
   d4c64:	b936      	cbnz	r6, d4c74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4c66:	8b23      	ldrh	r3, [r4, #24]
   d4c68:	3301      	adds	r3, #1
   d4c6a:	b29b      	uxth	r3, r3
   d4c6c:	2b00      	cmp	r3, #0
   d4c6e:	d071      	beq.n	d4d54 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4c70:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4c72:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4c74:	f1a8 030c 	sub.w	r3, r8, #12
   d4c78:	2b08      	cmp	r3, #8
   d4c7a:	d816      	bhi.n	d4caa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4c7c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4c80:	4293      	cmp	r3, r2
   d4c82:	bf38      	it	cc
   d4c84:	4613      	movcc	r3, r2
   d4c86:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4c8a:	f001 ffe3 	bl	d6c54 <_Z11BlynkMillisv>
   d4c8e:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4c92:	2800      	cmp	r0, #0
   d4c94:	db60      	blt.n	d4d58 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4c96:	2100      	movs	r1, #0
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff fe83 	bl	d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4c9e:	f001 ffd9 	bl	d6c54 <_Z11BlynkMillisv>
   d4ca2:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4ca6:	2800      	cmp	r0, #0
   d4ca8:	daf5      	bge.n	d4c96 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4caa:	f1b9 0f00 	cmp.w	r9, #0
   d4cae:	d05a      	beq.n	d4d66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4cb0:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4cb4:	2a00      	cmp	r2, #0
   d4cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4cb8:	bf08      	it	eq
   d4cba:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4cbc:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4cc0:	f10a 0307 	add.w	r3, sl, #7
   d4cc4:	f023 0307 	bic.w	r3, r3, #7
   d4cc8:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4cce:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4cd2:	18ea      	adds	r2, r5, r3
   d4cd4:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4cd8:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4cde:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4ce2:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4ce6:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4cea:	f1b9 0f00 	cmp.w	r9, #0
   d4cee:	d03c      	beq.n	d4d6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4cf0:	2d00      	cmp	r5, #0
   d4cf2:	d03a      	beq.n	d4d6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4cf4:	462a      	mov	r2, r5
   d4cf6:	4649      	mov	r1, r9
   d4cf8:	f10d 0005 	add.w	r0, sp, #5
   d4cfc:	f003 fe22 	bl	d8944 <memcpy>
        pos += length;
   d4d00:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4d04:	b13b      	cbz	r3, d4d16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4d08:	b12b      	cbz	r3, d4d16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4d0a:	461a      	mov	r2, r3
   d4d0c:	687b      	ldr	r3, [r7, #4]
   d4d0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4d10:	4418      	add	r0, r3
   d4d12:	f003 fe17 	bl	d8944 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4d16:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4d18:	4555      	cmp	r5, sl
   d4d1a:	d22a      	bcs.n	d4d72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4d1c:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4d20:	687b      	ldr	r3, [r7, #4]
   d4d22:	6820      	ldr	r0, [r4, #0]
   d4d24:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4d28:	bf28      	it	cs
   d4d2a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4d2e:	1959      	adds	r1, r3, r5
   d4d30:	f003 f81d 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
   d4d34:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4d36:	2000      	movs	r0, #0
   d4d38:	f001 ff8a 	bl	d6c50 <_Z10BlynkDelaym>
        if (w == 0) {
   d4d3c:	b9be      	cbnz	r6, d4d6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4d3e:	6820      	ldr	r0, [r4, #0]
   d4d40:	f003 fa0c 	bl	d815c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4d44:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4d46:	f001 ff89 	bl	d6c5c <BlynkNoOpCbk>
}
   d4d4a:	370c      	adds	r7, #12
   d4d4c:	46dd      	mov	sp, fp
   d4d4e:	46bd      	mov	sp, r7
   d4d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4d54:	2301      	movs	r3, #1
   d4d56:	e78b      	b.n	d4c70 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4d58:	7f21      	ldrb	r1, [r4, #28]
   d4d5a:	2900      	cmp	r1, #0
   d4d5c:	d1a5      	bne.n	d4caa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4d5e:	4620      	mov	r0, r4
   d4d60:	f7ff fe20 	bl	d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4d64:	e7a1      	b.n	d4caa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4d66:	2305      	movs	r3, #5
   d4d68:	e7a3      	b.n	d4cb2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4d6a:	2005      	movs	r0, #5
   d4d6c:	e7c9      	b.n	d4d02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4d6e:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4d70:	e7d2      	b.n	d4d18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4d72:	d003      	beq.n	d4d7c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4d74:	4620      	mov	r0, r4
   d4d76:	f7ff fba3 	bl	d44c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4d7a:	e7e6      	b.n	d4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4d7c:	f001 ff6a 	bl	d6c54 <_Z11BlynkMillisv>
   d4d80:	6120      	str	r0, [r4, #16]
   d4d82:	e7e2      	b.n	d4d4a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4d84:	20000045 	.word	0x20000045

000d4d88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4d88:	b500      	push	{lr}
   d4d8a:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4d8c:	ab04      	add	r3, sp, #16
   d4d8e:	2200      	movs	r2, #0
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	2349      	movs	r3, #73	; 0x49
   d4d94:	9300      	str	r3, [sp, #0]
   d4d96:	9202      	str	r2, [sp, #8]
   d4d98:	4b03      	ldr	r3, [pc, #12]	; (d4da8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4d9a:	2111      	movs	r1, #17
   d4d9c:	f7ff ff46 	bl	d4c2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4da0:	b015      	add	sp, #84	; 0x54
   d4da2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4da6:	bf00      	nop
   d4da8:	000d8bb3 	.word	0x000d8bb3

000d4dac <loop>:
void loop() {
   d4dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   d4dae:	4c3a      	ldr	r4, [pc, #232]	; (d4e98 <loop+0xec>)
  Blynk.run();
   d4db0:	483a      	ldr	r0, [pc, #232]	; (d4e9c <loop+0xf0>)
   d4db2:	2100      	movs	r1, #0
   d4db4:	f7ff fdf6 	bl	d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  display.loop();
   d4db8:	4620      	mov	r0, r4
   d4dba:	f000 fdac 	bl	d5916 <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	f001 fc40 	bl	d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	2101      	movs	r1, #1
   d4dc8:	f000 fd2d 	bl	d5826 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4dcc:	2200      	movs	r2, #0
   d4dce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4dd2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  if (client.isConnected()) {
   d4dd6:	4832      	ldr	r0, [pc, #200]	; (d4ea0 <loop+0xf4>)
   d4dd8:	f000 ff71 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d4ddc:	b358      	cbz	r0, d4e36 <loop+0x8a>
    client.loop();
   d4dde:	4830      	ldr	r0, [pc, #192]	; (d4ea0 <loop+0xf4>)
   d4de0:	f001 f945 	bl	d606e <_ZN4MQTT4loopEv>
  if (display.pressedA()){
   d4de4:	482c      	ldr	r0, [pc, #176]	; (d4e98 <loop+0xec>)
   d4de6:	f000 fdaf 	bl	d5948 <_ZN16OledWingAdafruit8pressedAEv>
   d4dea:	4604      	mov	r4, r0
   d4dec:	b398      	cbz	r0, d4e56 <loop+0xaa>
    viewChoices = true;
   d4dee:	4b2d      	ldr	r3, [pc, #180]	; (d4ea4 <loop+0xf8>)
   d4df0:	2201      	movs	r2, #1
   d4df2:	701a      	strb	r2, [r3, #0]
    viewChoiceDisplay();
   d4df4:	f7ff f9f6 	bl	d41e4 <_Z17viewChoiceDisplayv>
  if (digitalRead(D5) == HIGH && answerSubmitted == false){
   d4df8:	2005      	movs	r0, #5
   d4dfa:	f003 fbe1 	bl	d85c0 <digitalRead>
   d4dfe:	2801      	cmp	r0, #1
   d4e00:	d133      	bne.n	d4e6a <loop+0xbe>
   d4e02:	4b29      	ldr	r3, [pc, #164]	; (d4ea8 <loop+0xfc>)
   d4e04:	781a      	ldrb	r2, [r3, #0]
   d4e06:	bb82      	cbnz	r2, d4e6a <loop+0xbe>
    madlibSend("1");
   d4e08:	4928      	ldr	r1, [pc, #160]	; (d4eac <loop+0x100>)
    answerSubmitted = true;
   d4e0a:	7018      	strb	r0, [r3, #0]
    madlibSend("1");
   d4e0c:	4668      	mov	r0, sp
   d4e0e:	f002 fb93 	bl	d7538 <_ZN6StringC1EPKc>
   d4e12:	4668      	mov	r0, sp
   d4e14:	f7ff fa12 	bl	d423c <_Z10madlibSend6String>
   d4e18:	4668      	mov	r0, sp
   d4e1a:	f002 fb42 	bl	d74a2 <_ZN6StringD1Ev>
    madlibSend("A");
   d4e1e:	4924      	ldr	r1, [pc, #144]	; (d4eb0 <loop+0x104>)
    madlibSend("3");
   d4e20:	4668      	mov	r0, sp
   d4e22:	f002 fb89 	bl	d7538 <_ZN6StringC1EPKc>
   d4e26:	4668      	mov	r0, sp
   d4e28:	f7ff fa08 	bl	d423c <_Z10madlibSend6String>
   d4e2c:	4668      	mov	r0, sp
   d4e2e:	f002 fb38 	bl	d74a2 <_ZN6StringD1Ev>
}
   d4e32:	b004      	add	sp, #16
   d4e34:	bd10      	pop	{r4, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4e36:	4668      	mov	r0, sp
   d4e38:	f002 f9c2 	bl	d71c0 <spark_deviceID>
    client.connect(System.deviceID());
   d4e3c:	9900      	ldr	r1, [sp, #0]
   d4e3e:	4818      	ldr	r0, [pc, #96]	; (d4ea0 <loop+0xf4>)
   d4e40:	f001 f82e 	bl	d5ea0 <_ZN4MQTT7connectEPKc>
   d4e44:	4668      	mov	r0, sp
   d4e46:	f002 fb2c 	bl	d74a2 <_ZN6StringD1Ev>
        operator const char*() const { return c_str(); }
   d4e4a:	4b1a      	ldr	r3, [pc, #104]	; (d4eb4 <loop+0x108>)
    client.subscribe(channel);
   d4e4c:	4814      	ldr	r0, [pc, #80]	; (d4ea0 <loop+0xf4>)
   d4e4e:	6819      	ldr	r1, [r3, #0]
   d4e50:	f001 fa55 	bl	d62fe <_ZN4MQTT9subscribeEPKc>
   d4e54:	e7c6      	b.n	d4de4 <loop+0x38>
  else if (display.pressedC()){
   d4e56:	4810      	ldr	r0, [pc, #64]	; (d4e98 <loop+0xec>)
   d4e58:	f000 fd80 	bl	d595c <_ZN16OledWingAdafruit8pressedCEv>
   d4e5c:	2800      	cmp	r0, #0
   d4e5e:	d0cb      	beq.n	d4df8 <loop+0x4c>
    viewChoices = false;
   d4e60:	4b10      	ldr	r3, [pc, #64]	; (d4ea4 <loop+0xf8>)
   d4e62:	701c      	strb	r4, [r3, #0]
    viewCountDisplay();
   d4e64:	f7ff fa52 	bl	d430c <_Z16viewCountDisplayv>
   d4e68:	e7c6      	b.n	d4df8 <loop+0x4c>
  else if (digitalRead(D6) == HIGH && answerSubmitted == false){
   d4e6a:	2006      	movs	r0, #6
   d4e6c:	f003 fba8 	bl	d85c0 <digitalRead>
   d4e70:	2801      	cmp	r0, #1
   d4e72:	d102      	bne.n	d4e7a <loop+0xce>
   d4e74:	4b0c      	ldr	r3, [pc, #48]	; (d4ea8 <loop+0xfc>)
   d4e76:	781a      	ldrb	r2, [r3, #0]
   d4e78:	b15a      	cbz	r2, d4e92 <loop+0xe6>
  else if (digitalRead(D7) == HIGH && answerSubmitted == false){
   d4e7a:	2007      	movs	r0, #7
   d4e7c:	f003 fba0 	bl	d85c0 <digitalRead>
   d4e80:	2801      	cmp	r0, #1
   d4e82:	d1d6      	bne.n	d4e32 <loop+0x86>
   d4e84:	4b08      	ldr	r3, [pc, #32]	; (d4ea8 <loop+0xfc>)
   d4e86:	781a      	ldrb	r2, [r3, #0]
   d4e88:	2a00      	cmp	r2, #0
   d4e8a:	d1d2      	bne.n	d4e32 <loop+0x86>
    madlibSend("3");
   d4e8c:	490a      	ldr	r1, [pc, #40]	; (d4eb8 <loop+0x10c>)
    answerSubmitted = true;
   d4e8e:	7018      	strb	r0, [r3, #0]
    madlibSend("3");
   d4e90:	e7c6      	b.n	d4e20 <loop+0x74>
    madlibSend("2");
   d4e92:	490a      	ldr	r1, [pc, #40]	; (d4ebc <loop+0x110>)
    answerSubmitted = true;
   d4e94:	7018      	strb	r0, [r3, #0]
    madlibSend("2");
   d4e96:	e7c3      	b.n	d4e20 <loop+0x74>
   d4e98:	2003e5b4 	.word	0x2003e5b4
   d4e9c:	2003e4a8 	.word	0x2003e4a8
   d4ea0:	2003e548 	.word	0x2003e548
   d4ea4:	2003e438 	.word	0x2003e438
   d4ea8:	2003e504 	.word	0x2003e504
   d4eac:	000d8b8c 	.word	0x000d8b8c
   d4eb0:	000d8b8e 	.word	0x000d8b8e
   d4eb4:	2003e508 	.word	0x2003e508
   d4eb8:	000d8b92 	.word	0x000d8b92
   d4ebc:	000d8b90 	.word	0x000d8b90

000d4ec0 <_GLOBAL__sub_I_Blynk>:
   d4ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        : domain(NULL), port(0)
   d4ec4:	4e37      	ldr	r6, [pc, #220]	; (d4fa4 <_GLOBAL__sub_I_Blynk+0xe4>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4ec6:	4d38      	ldr	r5, [pc, #224]	; (d4fa8 <_GLOBAL__sub_I_Blynk+0xe8>)
String wordType;          // Word type
   d4ec8:	f8df 8118 	ldr.w	r8, [pc, #280]	; d4fe4 <_GLOBAL__sub_I_Blynk+0x124>
   d4ecc:	4f37      	ldr	r7, [pc, #220]	; (d4fac <_GLOBAL__sub_I_Blynk+0xec>)
SYSTEM_THREAD(ENABLED);
   d4ece:	2100      	movs	r1, #0
   d4ed0:	2001      	movs	r0, #1
   d4ed2:	f002 f8f1 	bl	d70b8 <system_thread_set_state>
   d4ed6:	4630      	mov	r0, r6
   d4ed8:	2400      	movs	r4, #0
   d4eda:	f003 f989 	bl	d81f0 <_ZN9TCPClientC1Ev>
   d4ede:	f106 001c 	add.w	r0, r6, #28
   d4ee2:	f002 fd7d 	bl	d79e0 <_ZN9IPAddressC1Ev>
   d4ee6:	6374      	str	r4, [r6, #52]	; 0x34
   d4ee8:	8734      	strh	r4, [r6, #56]	; 0x38
   d4eea:	462a      	mov	r2, r5
   d4eec:	4930      	ldr	r1, [pc, #192]	; (d4fb0 <_GLOBAL__sub_I_Blynk+0xf0>)
   d4eee:	4630      	mov	r0, r6
   d4ef0:	f003 fbf6 	bl	d86e0 <__aeabi_atexit>
        , state(CONNECTING)
   d4ef4:	4b2f      	ldr	r3, [pc, #188]	; (d4fb4 <_GLOBAL__sub_I_Blynk+0xf4>)
MQTT client("lab.thewcl.com", 1883, callback);
   d4ef6:	4930      	ldr	r1, [pc, #192]	; (d4fb8 <_GLOBAL__sub_I_Blynk+0xf8>)
   d4ef8:	619c      	str	r4, [r3, #24]
   d4efa:	e9c3 6400 	strd	r6, r4, [r3]
   d4efe:	4e2f      	ldr	r6, [pc, #188]	; (d4fbc <_GLOBAL__sub_I_Blynk+0xfc>)
   d4f00:	839c      	strh	r4, [r3, #28]
   d4f02:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4f06:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4f0a:	f240 725b 	movw	r2, #1883	; 0x75b
   d4f0e:	4b2c      	ldr	r3, [pc, #176]	; (d4fc0 <_GLOBAL__sub_I_Blynk+0x100>)
   d4f10:	9400      	str	r4, [sp, #0]
   d4f12:	4630      	mov	r0, r6
   d4f14:	f000 fdca 	bl	d5aac <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4f18:	4630      	mov	r0, r6
OledWingAdafruit display;
   d4f1a:	4e2a      	ldr	r6, [pc, #168]	; (d4fc4 <_GLOBAL__sub_I_Blynk+0x104>)
MQTT client("lab.thewcl.com", 1883, callback);
   d4f1c:	492a      	ldr	r1, [pc, #168]	; (d4fc8 <_GLOBAL__sub_I_Blynk+0x108>)
   d4f1e:	462a      	mov	r2, r5
   d4f20:	f003 fbde 	bl	d86e0 <__aeabi_atexit>
OledWingAdafruit display;
   d4f24:	2107      	movs	r1, #7
   d4f26:	4630      	mov	r0, r6
   d4f28:	f000 fc9e 	bl	d5868 <_ZN16OledWingAdafruitC1Ei>
   d4f2c:	4630      	mov	r0, r6
String wordType;          // Word type
   d4f2e:	4e27      	ldr	r6, [pc, #156]	; (d4fcc <_GLOBAL__sub_I_Blynk+0x10c>)
OledWingAdafruit display;
   d4f30:	4927      	ldr	r1, [pc, #156]	; (d4fd0 <_GLOBAL__sub_I_Blynk+0x110>)
   d4f32:	462a      	mov	r2, r5
   d4f34:	f003 fbd4 	bl	d86e0 <__aeabi_atexit>
String wordType;          // Word type
   d4f38:	4631      	mov	r1, r6
   d4f3a:	4640      	mov	r0, r8
   d4f3c:	f002 fafc 	bl	d7538 <_ZN6StringC1EPKc>
   d4f40:	4640      	mov	r0, r8
String playerString = "2";
   d4f42:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d4fe8 <_GLOBAL__sub_I_Blynk+0x128>
String wordType;          // Word type
   d4f46:	462a      	mov	r2, r5
   d4f48:	4639      	mov	r1, r7
   d4f4a:	f003 fbc9 	bl	d86e0 <__aeabi_atexit>
String playerString = "2";
   d4f4e:	4921      	ldr	r1, [pc, #132]	; (d4fd4 <_GLOBAL__sub_I_Blynk+0x114>)
   d4f50:	4640      	mov	r0, r8
   d4f52:	f002 faf1 	bl	d7538 <_ZN6StringC1EPKc>
   d4f56:	4640      	mov	r0, r8
String channel = "madlibs";
   d4f58:	f8df 8090 	ldr.w	r8, [pc, #144]	; d4fec <_GLOBAL__sub_I_Blynk+0x12c>
String playerString = "2";
   d4f5c:	462a      	mov	r2, r5
   d4f5e:	4639      	mov	r1, r7
   d4f60:	f003 fbbe 	bl	d86e0 <__aeabi_atexit>
String channel = "madlibs";
   d4f64:	491c      	ldr	r1, [pc, #112]	; (d4fd8 <_GLOBAL__sub_I_Blynk+0x118>)
   d4f66:	4640      	mov	r0, r8
   d4f68:	f002 fae6 	bl	d7538 <_ZN6StringC1EPKc>
   d4f6c:	4639      	mov	r1, r7
String choiceList[3] = {"", "", ""};
   d4f6e:	4f1b      	ldr	r7, [pc, #108]	; (d4fdc <_GLOBAL__sub_I_Blynk+0x11c>)
String channel = "madlibs";
   d4f70:	462a      	mov	r2, r5
   d4f72:	4640      	mov	r0, r8
   d4f74:	f003 fbb4 	bl	d86e0 <__aeabi_atexit>
String choiceList[3] = {"", "", ""};
   d4f78:	4631      	mov	r1, r6
   d4f7a:	4638      	mov	r0, r7
   d4f7c:	f002 fadc 	bl	d7538 <_ZN6StringC1EPKc>
   d4f80:	4631      	mov	r1, r6
   d4f82:	f107 0010 	add.w	r0, r7, #16
   d4f86:	f002 fad7 	bl	d7538 <_ZN6StringC1EPKc>
   d4f8a:	4631      	mov	r1, r6
   d4f8c:	f107 0020 	add.w	r0, r7, #32
   d4f90:	f002 fad2 	bl	d7538 <_ZN6StringC1EPKc>
   d4f94:	4912      	ldr	r1, [pc, #72]	; (d4fe0 <_GLOBAL__sub_I_Blynk+0x120>)
   d4f96:	462a      	mov	r2, r5
   d4f98:	4620      	mov	r0, r4
   d4f9a:	b002      	add	sp, #8
   d4f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
String choiceList[3] = {"", "", ""};
   d4fa0:	f003 bb9e 	b.w	d86e0 <__aeabi_atexit>
   d4fa4:	2003e4c8 	.word	0x2003e4c8
   d4fa8:	2003e4a4 	.word	0x2003e4a4
   d4fac:	000d74a3 	.word	0x000d74a3
   d4fb0:	000d411d 	.word	0x000d411d
   d4fb4:	2003e4a8 	.word	0x2003e4a8
   d4fb8:	000d8b94 	.word	0x000d8b94
   d4fbc:	2003e548 	.word	0x2003e548
   d4fc0:	000d4381 	.word	0x000d4381
   d4fc4:	2003e5b4 	.word	0x2003e5b4
   d4fc8:	000d6305 	.word	0x000d6305
   d4fcc:	000d8b43 	.word	0x000d8b43
   d4fd0:	000d5835 	.word	0x000d5835
   d4fd4:	000d8b90 	.word	0x000d8b90
   d4fd8:	000d8ba3 	.word	0x000d8ba3
   d4fdc:	2003e518 	.word	0x2003e518
   d4fe0:	000d40c9 	.word	0x000d40c9
   d4fe4:	2003e634 	.word	0x2003e634
   d4fe8:	2003e624 	.word	0x2003e624
   d4fec:	2003e508 	.word	0x2003e508

000d4ff0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4ff0:	4770      	bx	lr

000d4ff2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4ff2:	b510      	push	{r4, lr}
  }
   d4ff4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4ff6:	4604      	mov	r4, r0
  }
   d4ff8:	f003 fb77 	bl	d86ea <_ZdlPvj>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5000:	b40e      	push	{r1, r2, r3}
   d5002:	b503      	push	{r0, r1, lr}
   d5004:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d5006:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5008:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d500c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d500e:	f002 fb94 	bl	d773a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d5012:	b002      	add	sp, #8
   d5014:	f85d eb04 	ldr.w	lr, [sp], #4
   d5018:	b003      	add	sp, #12
   d501a:	4770      	bx	lr

000d501c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d501c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d501e:	4604      	mov	r4, r0
   d5020:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5022:	7922      	ldrb	r2, [r4, #4]
   d5024:	68a3      	ldr	r3, [r4, #8]
   d5026:	b132      	cbz	r2, d5036 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5028:	b9a3      	cbnz	r3, d5054 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d502a:	490b      	ldr	r1, [pc, #44]	; (d5058 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d502c:	b002      	add	sp, #8
   d502e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5032:	f002 bb47 	b.w	d76c4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5036:	4a09      	ldr	r2, [pc, #36]	; (d505c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5038:	7b26      	ldrb	r6, [r4, #12]
   d503a:	4d09      	ldr	r5, [pc, #36]	; (d5060 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d503c:	4909      	ldr	r1, [pc, #36]	; (d5064 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d503e:	7b64      	ldrb	r4, [r4, #13]
   d5040:	2e01      	cmp	r6, #1
   d5042:	bf18      	it	ne
   d5044:	4629      	movne	r1, r5
   d5046:	e9cd 1400 	strd	r1, r4, [sp]
   d504a:	4907      	ldr	r1, [pc, #28]	; (d5068 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d504c:	f7ff ffd8 	bl	d5000 <_ZN5Print6printfEPKcz>
  }
   d5050:	b002      	add	sp, #8
   d5052:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5054:	4a05      	ldr	r2, [pc, #20]	; (d506c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5056:	e7ef      	b.n	d5038 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5058:	000d8c0f 	.word	0x000d8c0f
   d505c:	000d8b43 	.word	0x000d8b43
   d5060:	000d8c0b 	.word	0x000d8c0b
   d5064:	000d8c07 	.word	0x000d8c07
   d5068:	000d8c25 	.word	0x000d8c25
   d506c:	000d8bfe 	.word	0x000d8bfe

000d5070 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5074:	b085      	sub	sp, #20
   d5076:	461f      	mov	r7, r3
   d5078:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d507c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5080:	eba8 0902 	sub.w	r9, r8, r2
   d5084:	eba7 0a01 	sub.w	sl, r7, r1
   d5088:	f1b9 0f00 	cmp.w	r9, #0
   d508c:	bfb8      	it	lt
   d508e:	f1c9 0900 	rsblt	r9, r9, #0
   d5092:	f1ba 0f00 	cmp.w	sl, #0
   d5096:	bfb8      	it	lt
   d5098:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d509c:	45d1      	cmp	r9, sl
        uint16_t color) {
   d509e:	4683      	mov	fp, r0
   d50a0:	460c      	mov	r4, r1
   d50a2:	4615      	mov	r5, r2
    if (steep) {
   d50a4:	dd04      	ble.n	d50b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d50a6:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d50a8:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d50aa:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d50ac:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d50ae:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d50b0:	42bc      	cmp	r4, r7
   d50b2:	dd05      	ble.n	d50c0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d50b4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d50b6:	4645      	mov	r5, r8
   d50b8:	4690      	mov	r8, r2
    if (x0 > x1) {
   d50ba:	4622      	mov	r2, r4
   d50bc:	463c      	mov	r4, r7
   d50be:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d50c0:	1b3e      	subs	r6, r7, r4
   d50c2:	b2b2      	uxth	r2, r6
   d50c4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d50c6:	eba8 0205 	sub.w	r2, r8, r5
   d50ca:	2a00      	cmp	r2, #0
   d50cc:	bfb8      	it	lt
   d50ce:	4252      	neglt	r2, r2
   d50d0:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d50d2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d50d6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d50da:	4545      	cmp	r5, r8
   d50dc:	bfb4      	ite	lt
   d50de:	2201      	movlt	r2, #1
   d50e0:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d50e4:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d50e6:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d50e8:	42bc      	cmp	r4, r7
   d50ea:	dc1c      	bgt.n	d5126 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d50ec:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d50f0:	9303      	str	r3, [sp, #12]
        if (steep) {
   d50f2:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d50f4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d50f8:	bfc7      	ittee	gt
   d50fa:	4629      	movgt	r1, r5
   d50fc:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d50fe:	462a      	movle	r2, r5
   d5100:	4621      	movle	r1, r4
   d5102:	4658      	mov	r0, fp
   d5104:	47c0      	blx	r8
        }
        err -= dy;
   d5106:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d5108:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d510a:	1ab6      	subs	r6, r6, r2
   d510c:	b2b1      	uxth	r1, r6
   d510e:	b236      	sxth	r6, r6
        if (err < 0) {
   d5110:	2e00      	cmp	r6, #0
   d5112:	da05      	bge.n	d5120 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d5114:	9a02      	ldr	r2, [sp, #8]
   d5116:	4415      	add	r5, r2
            err += dx;
   d5118:	9a00      	ldr	r2, [sp, #0]
   d511a:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d511c:	b22d      	sxth	r5, r5
            err += dx;
   d511e:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d5120:	3401      	adds	r4, #1
   d5122:	b224      	sxth	r4, r4
   d5124:	e7e0      	b.n	d50e8 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d5126:	b005      	add	sp, #20
   d5128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d512c <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d512c:	4770      	bx	lr

000d512e <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d512e:	b410      	push	{r4}
    drawPixel(x, y, color);
   d5130:	6804      	ldr	r4, [r0, #0]
   d5132:	6924      	ldr	r4, [r4, #16]
   d5134:	46a4      	mov	ip, r4
}
   d5136:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d513a:	4760      	bx	ip

000d513c <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d513c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d513e:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5140:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d5144:	9502      	str	r5, [sp, #8]
   d5146:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d5148:	46a4      	mov	ip, r4
}
   d514a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d514c:	4760      	bx	ip

000d514e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d514e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d5150:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d5152:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d5156:	9502      	str	r5, [sp, #8]
   d5158:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d515a:	46a4      	mov	ip, r4
}
   d515c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d515e:	4760      	bx	ip

000d5160 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5160:	b470      	push	{r4, r5, r6}
   d5162:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d5166:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d516a:	6804      	ldr	r4, [r0, #0]
   d516c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d5170:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d5172:	46a4      	mov	ip, r4
}
   d5174:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d5176:	4760      	bx	ip

000d5178 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d517c:	461c      	mov	r4, r3
    startWrite();
   d517e:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d5180:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5184:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d5186:	4605      	mov	r5, r0
   d5188:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d518a:	3c01      	subs	r4, #1
   d518c:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d518e:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d5190:	b224      	sxth	r4, r4
    startWrite();
   d5192:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d5194:	682b      	ldr	r3, [r5, #0]
   d5196:	f8cd 8004 	str.w	r8, [sp, #4]
   d519a:	9400      	str	r4, [sp, #0]
   d519c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d519e:	4628      	mov	r0, r5
   d51a0:	463b      	mov	r3, r7
   d51a2:	4632      	mov	r2, r6
   d51a4:	4639      	mov	r1, r7
   d51a6:	47a0      	blx	r4
    endWrite();
   d51a8:	682b      	ldr	r3, [r5, #0]
   d51aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51ac:	4628      	mov	r0, r5
}
   d51ae:	b002      	add	sp, #8
   d51b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d51b4:	4718      	bx	r3

000d51b6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d51b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d51ba:	461d      	mov	r5, r3
    startWrite();
   d51bc:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d51be:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d51c2:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d51c4:	4604      	mov	r4, r0
   d51c6:	4617      	mov	r7, r2
   d51c8:	460e      	mov	r6, r1
    startWrite();
   d51ca:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d51cc:	e9cd 7800 	strd	r7, r8, [sp]
   d51d0:	6822      	ldr	r2, [r4, #0]
   d51d2:	1e6b      	subs	r3, r5, #1
   d51d4:	4433      	add	r3, r6
   d51d6:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d51d8:	4620      	mov	r0, r4
   d51da:	b21b      	sxth	r3, r3
   d51dc:	463a      	mov	r2, r7
   d51de:	4631      	mov	r1, r6
   d51e0:	47a8      	blx	r5
    endWrite();
   d51e2:	6823      	ldr	r3, [r4, #0]
   d51e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51e6:	4620      	mov	r0, r4
}
   d51e8:	b002      	add	sp, #8
   d51ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d51ee:	4718      	bx	r3

000d51f0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d51f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d51f4:	461e      	mov	r6, r3
    startWrite();
   d51f6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d51f8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d51fc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d51fe:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d5202:	460c      	mov	r4, r1
   d5204:	4605      	mov	r5, r0
   d5206:	4617      	mov	r7, r2
    startWrite();
   d5208:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d520a:	4426      	add	r6, r4
   d520c:	42b4      	cmp	r4, r6
   d520e:	682b      	ldr	r3, [r5, #0]
   d5210:	da0b      	bge.n	d522a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d5212:	f8cd 8000 	str.w	r8, [sp]
   d5216:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d521a:	4621      	mov	r1, r4
   d521c:	464b      	mov	r3, r9
   d521e:	463a      	mov	r2, r7
   d5220:	4628      	mov	r0, r5
   d5222:	3401      	adds	r4, #1
   d5224:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d5226:	b224      	sxth	r4, r4
   d5228:	e7f0      	b.n	d520c <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d522c:	4628      	mov	r0, r5
}
   d522e:	b002      	add	sp, #8
   d5230:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5234:	4718      	bx	r3

000d5236 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d5236:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5238:	6802      	ldr	r2, [r0, #0]
   d523a:	9101      	str	r1, [sp, #4]
   d523c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5240:	9100      	str	r1, [sp, #0]
   d5242:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5244:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5248:	2200      	movs	r2, #0
   d524a:	4611      	mov	r1, r2
   d524c:	47a0      	blx	r4
}
   d524e:	b002      	add	sp, #8
   d5250:	bd10      	pop	{r4, pc}

000d5252 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5252:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5256:	461d      	mov	r5, r3
    startWrite();
   d5258:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d525a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d525e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5260:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5264:	4604      	mov	r4, r0
   d5266:	460f      	mov	r7, r1
   d5268:	4616      	mov	r6, r2
    startWrite();
   d526a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d526c:	6823      	ldr	r3, [r4, #0]
   d526e:	f8cd 8000 	str.w	r8, [sp]
   d5272:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5276:	4632      	mov	r2, r6
   d5278:	462b      	mov	r3, r5
   d527a:	4639      	mov	r1, r7
   d527c:	4620      	mov	r0, r4
   d527e:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d5280:	6823      	ldr	r3, [r4, #0]
   d5282:	f8cd 8000 	str.w	r8, [sp]
   d5286:	f109 32ff 	add.w	r2, r9, #4294967295
   d528a:	4432      	add	r2, r6
   d528c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5290:	4639      	mov	r1, r7
   d5292:	462b      	mov	r3, r5
   d5294:	4620      	mov	r0, r4
   d5296:	b212      	sxth	r2, r2
   d5298:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d529a:	6823      	ldr	r3, [r4, #0]
   d529c:	f8cd 8000 	str.w	r8, [sp]
   d52a0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d52a4:	4632      	mov	r2, r6
   d52a6:	464b      	mov	r3, r9
   d52a8:	4639      	mov	r1, r7
   d52aa:	4620      	mov	r0, r4
   d52ac:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d52ae:	1e6b      	subs	r3, r5, #1
   d52b0:	19d9      	adds	r1, r3, r7
   d52b2:	6823      	ldr	r3, [r4, #0]
   d52b4:	f8cd 8000 	str.w	r8, [sp]
   d52b8:	6a1d      	ldr	r5, [r3, #32]
   d52ba:	4620      	mov	r0, r4
   d52bc:	464b      	mov	r3, r9
   d52be:	4632      	mov	r2, r6
   d52c0:	b209      	sxth	r1, r1
   d52c2:	47a8      	blx	r5
    endWrite();
   d52c4:	6823      	ldr	r3, [r4, #0]
   d52c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d52c8:	4620      	mov	r0, r4
}
   d52ca:	b002      	add	sp, #8
   d52cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d52d0:	4718      	bx	r3

000d52d2 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d52d2:	4770      	bx	lr

000d52d4 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d52d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d52d8:	4299      	cmp	r1, r3
        uint16_t color) {
   d52da:	4616      	mov	r6, r2
   d52dc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d52e0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d52e4:	6802      	ldr	r2, [r0, #0]
   d52e6:	4680      	mov	r8, r0
   d52e8:	460d      	mov	r5, r1
   d52ea:	461c      	mov	r4, r3
    if(x0 == x1){
   d52ec:	d113      	bne.n	d5316 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d52ee:	42be      	cmp	r6, r7
   d52f0:	bfc8      	it	gt
   d52f2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d52f4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d52f8:	bfc4      	itt	gt
   d52fa:	463e      	movgt	r6, r7
   d52fc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d52fe:	1c7b      	adds	r3, r7, #1
   d5300:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5302:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5304:	b21b      	sxth	r3, r3
   d5306:	4632      	mov	r2, r6
   d5308:	4629      	mov	r1, r5
   d530a:	4640      	mov	r0, r8
   d530c:	46a4      	mov	ip, r4
}
   d530e:	b003      	add	sp, #12
   d5310:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5314:	4760      	bx	ip
    } else if(y0 == y1){
   d5316:	42be      	cmp	r6, r7
   d5318:	d10a      	bne.n	d5330 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d531a:	4299      	cmp	r1, r3
   d531c:	bfc2      	ittt	gt
   d531e:	460b      	movgt	r3, r1
   d5320:	4625      	movgt	r5, r4
   d5322:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5324:	1c63      	adds	r3, r4, #1
   d5326:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d532a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d532c:	1b5b      	subs	r3, r3, r5
   d532e:	e7e9      	b.n	d5304 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d5330:	6953      	ldr	r3, [r2, #20]
   d5332:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5334:	e9cd 7900 	strd	r7, r9, [sp]
   d5338:	f8d8 3000 	ldr.w	r3, [r8]
   d533c:	4640      	mov	r0, r8
   d533e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5340:	4632      	mov	r2, r6
   d5342:	4623      	mov	r3, r4
   d5344:	4629      	mov	r1, r5
   d5346:	47b8      	blx	r7
        endWrite();
   d5348:	f8d8 3000 	ldr.w	r3, [r8]
   d534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d534e:	4640      	mov	r0, r8
}
   d5350:	b003      	add	sp, #12
   d5352:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5356:	4718      	bx	r3

000d5358 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5358:	f001 0303 	and.w	r3, r1, #3
   d535c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5360:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d5362:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5364:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5368:	bf59      	ittee	pl
   d536a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d536c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d536e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d5370:	81c3      	strhmi	r3, [r0, #14]
}
   d5372:	4770      	bx	lr

000d5374 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5374:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5376:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d5378:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d537a:	4a07      	ldr	r2, [pc, #28]	; (d5398 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d537c:	4d07      	ldr	r5, [pc, #28]	; (d539c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d537e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d5380:	2400      	movs	r4, #0
    _width    = WIDTH;
   d5382:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d5384:	f04f 31ff 	mov.w	r1, #4294967295
   d5388:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d538c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d538e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d5390:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d5392:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d5394:	6204      	str	r4, [r0, #32]
}
   d5396:	bd30      	pop	{r4, r5, pc}
   d5398:	01000101 	.word	0x01000101
   d539c:	000d914c 	.word	0x000d914c

000d53a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d53a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53a4:	b089      	sub	sp, #36	; 0x24
   d53a6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d53aa:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d53ac:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d53b0:	9304      	str	r3, [sp, #16]
   d53b2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d53b6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d53b8:	9305      	str	r3, [sp, #20]
   d53ba:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d53be:	4604      	mov	r4, r0
    startWrite();
   d53c0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d53c2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d53c6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d53ca:	bf48      	it	mi
   d53cc:	f108 020e 	addmi.w	r2, r8, #14
   d53d0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d53d4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d53d6:	4635      	mov	r5, r6
   d53d8:	9b03      	ldr	r3, [sp, #12]
   d53da:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d53dc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d53e0:	189a      	adds	r2, r3, r2
   d53e2:	9b05      	ldr	r3, [sp, #20]
   d53e4:	428b      	cmp	r3, r1
   d53e6:	b212      	sxth	r2, r2
   d53e8:	dd27      	ble.n	d543a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d53ea:	9b04      	ldr	r3, [sp, #16]
   d53ec:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d53ee:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d53f2:	9306      	str	r3, [sp, #24]
   d53f4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d53f8:	4580      	cmp	r8, r0
   d53fa:	fa1f f189 	uxth.w	r1, r9
   d53fe:	dd17      	ble.n	d5430 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d5400:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d5402:	bf05      	ittet	eq
   d5404:	9b06      	ldreq	r3, [sp, #24]
   d5406:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d5408:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d540a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d540c:	bf18      	it	ne
   d540e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d5410:	062b      	lsls	r3, r5, #24
   d5412:	d50a      	bpl.n	d542a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d5414:	9b02      	ldr	r3, [sp, #8]
   d5416:	6820      	ldr	r0, [r4, #0]
   d5418:	9207      	str	r2, [sp, #28]
   d541a:	4419      	add	r1, r3
   d541c:	6983      	ldr	r3, [r0, #24]
   d541e:	b209      	sxth	r1, r1
   d5420:	461f      	mov	r7, r3
   d5422:	4620      	mov	r0, r4
   d5424:	4653      	mov	r3, sl
   d5426:	47b8      	blx	r7
   d5428:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d542a:	f109 0901 	add.w	r9, r9, #1
   d542e:	e7e1      	b.n	d53f4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d5430:	9b01      	ldr	r3, [sp, #4]
   d5432:	3301      	adds	r3, #1
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	445e      	add	r6, fp
   d5438:	e7ce      	b.n	d53d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d543a:	6823      	ldr	r3, [r4, #0]
   d543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d543e:	4620      	mov	r0, r4
}
   d5440:	b009      	add	sp, #36	; 0x24
   d5442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5446:	4718      	bx	r3

000d5448 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d544c:	ed2d 8b02 	vpush	{d8}
   d5450:	b091      	sub	sp, #68	; 0x44
   d5452:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5454:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5456:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d545a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d545e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d5462:	9103      	str	r1, [sp, #12]
   d5464:	461f      	mov	r7, r3
   d5466:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d546a:	9304      	str	r3, [sp, #16]
   d546c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d546e:	2a00      	cmp	r2, #0
   d5470:	f040 80c5 	bne.w	d55fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5474:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5478:	428b      	cmp	r3, r1
   d547a:	f340 814c 	ble.w	d5716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d547e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d5482:	42b3      	cmp	r3, r6
   d5484:	f340 8147 	ble.w	d5716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5488:	2306      	movs	r3, #6
   d548a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d548e:	2b00      	cmp	r3, #0
   d5490:	f340 8141 	ble.w	d5716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5494:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5498:	2b00      	cmp	r3, #0
   d549a:	f340 813c 	ble.w	d5716 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d549e:	7f03      	ldrb	r3, [r0, #28]
   d54a0:	b91b      	cbnz	r3, d54aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d54a2:	2faf      	cmp	r7, #175	; 0xaf
   d54a4:	bf84      	itt	hi
   d54a6:	3701      	addhi	r7, #1
   d54a8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d54aa:	f8db 3000 	ldr.w	r3, [fp]
   d54ae:	4658      	mov	r0, fp
   d54b0:	695b      	ldr	r3, [r3, #20]
   d54b2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d54b4:	2205      	movs	r2, #5
   d54b6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d54b8:	2200      	movs	r2, #0
   d54ba:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d54bc:	4a98      	ldr	r2, [pc, #608]	; (d5720 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d54be:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d54c2:	18d3      	adds	r3, r2, r3
   d54c4:	930c      	str	r3, [sp, #48]	; 0x30
   d54c6:	b2b3      	uxth	r3, r6
   d54c8:	9306      	str	r3, [sp, #24]
   d54ca:	9a05      	ldr	r2, [sp, #20]
   d54cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d54ce:	5c9b      	ldrb	r3, [r3, r2]
   d54d0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d54d2:	b2ab      	uxth	r3, r5
   d54d4:	930b      	str	r3, [sp, #44]	; 0x2c
   d54d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d54da:	9308      	str	r3, [sp, #32]
   d54dc:	9b03      	ldr	r3, [sp, #12]
   d54de:	fb02 f905 	mul.w	r9, r2, r5
   d54e2:	fa19 f983 	uxtah	r9, r9, r3
   d54e6:	fa0f f389 	sxth.w	r3, r9
   d54ea:	ee08 3a10 	vmov	s16, r3
   d54ee:	2308      	movs	r3, #8
   d54f0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d54f2:	9b03      	ldr	r3, [sp, #12]
   d54f4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d54f8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d54fc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d5500:	9a07      	ldr	r2, [sp, #28]
   d5502:	f8db 3000 	ldr.w	r3, [fp]
   d5506:	07d2      	lsls	r2, r2, #31
   d5508:	d552      	bpl.n	d55b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d550a:	2d01      	cmp	r5, #1
   d550c:	fa1f f289 	uxth.w	r2, r9
   d5510:	d13e      	bne.n	d5590 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d5512:	2c01      	cmp	r4, #1
   d5514:	d13c      	bne.n	d5590 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d5516:	699b      	ldr	r3, [r3, #24]
   d5518:	9906      	ldr	r1, [sp, #24]
   d551a:	461f      	mov	r7, r3
   d551c:	9b04      	ldr	r3, [sp, #16]
   d551e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d5520:	b212      	sxth	r2, r2
   d5522:	4651      	mov	r1, sl
   d5524:	4658      	mov	r0, fp
   d5526:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d5528:	f109 0301 	add.w	r3, r9, #1
   d552c:	fa4f f983 	sxtb.w	r9, r3
   d5530:	9b07      	ldr	r3, [sp, #28]
   d5532:	085b      	lsrs	r3, r3, #1
   d5534:	9307      	str	r3, [sp, #28]
   d5536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5538:	3b01      	subs	r3, #1
   d553a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d553e:	930a      	str	r3, [sp, #40]	; 0x28
   d5540:	d1de      	bne.n	d5500 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5542:	9f05      	ldr	r7, [sp, #20]
   d5544:	3701      	adds	r7, #1
   d5546:	b27b      	sxtb	r3, r7
   d5548:	9305      	str	r3, [sp, #20]
   d554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d554c:	3b01      	subs	r3, #1
   d554e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5552:	9309      	str	r3, [sp, #36]	; 0x24
   d5554:	d1b9      	bne.n	d54ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5556:	9b04      	ldr	r3, [sp, #16]
   d5558:	4543      	cmp	r3, r8
   d555a:	d00f      	beq.n	d557c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d555c:	2d01      	cmp	r5, #1
   d555e:	f8db 3000 	ldr.w	r3, [fp]
   d5562:	d13b      	bne.n	d55dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5564:	2c01      	cmp	r4, #1
   d5566:	d139      	bne.n	d55dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5568:	9908      	ldr	r1, [sp, #32]
   d556a:	f8cd 8000 	str.w	r8, [sp]
   d556e:	3105      	adds	r1, #5
   d5570:	6a1c      	ldr	r4, [r3, #32]
   d5572:	4632      	mov	r2, r6
   d5574:	2308      	movs	r3, #8
   d5576:	b209      	sxth	r1, r1
   d5578:	4658      	mov	r0, fp
   d557a:	47a0      	blx	r4
        endWrite();
   d557c:	f8db 3000 	ldr.w	r3, [fp]
   d5580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5582:	4658      	mov	r0, fp
}
   d5584:	b011      	add	sp, #68	; 0x44
   d5586:	ecbd 8b02 	vpop	{d8}
   d558a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d558e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d5590:	9906      	ldr	r1, [sp, #24]
   d5592:	fb14 f202 	smulbb	r2, r4, r2
   d5596:	440a      	add	r2, r1
   d5598:	9904      	ldr	r1, [sp, #16]
   d559a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d559c:	9400      	str	r4, [sp, #0]
   d559e:	69db      	ldr	r3, [r3, #28]
   d55a0:	ee18 1a10 	vmov	r1, s16
   d55a4:	461f      	mov	r7, r3
   d55a6:	b212      	sxth	r2, r2
   d55a8:	462b      	mov	r3, r5
   d55aa:	4658      	mov	r0, fp
   d55ac:	47b8      	blx	r7
   d55ae:	e7bb      	b.n	d5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d55b0:	9a04      	ldr	r2, [sp, #16]
   d55b2:	4542      	cmp	r2, r8
   d55b4:	d0b8      	beq.n	d5528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d55b6:	2d01      	cmp	r5, #1
   d55b8:	fa1f f289 	uxth.w	r2, r9
   d55bc:	d107      	bne.n	d55ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d55be:	2c01      	cmp	r4, #1
   d55c0:	d105      	bne.n	d55ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d55c2:	699b      	ldr	r3, [r3, #24]
   d55c4:	9906      	ldr	r1, [sp, #24]
   d55c6:	461f      	mov	r7, r3
   d55c8:	440a      	add	r2, r1
   d55ca:	4643      	mov	r3, r8
   d55cc:	e7a8      	b.n	d5520 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d55ce:	9906      	ldr	r1, [sp, #24]
   d55d0:	f8cd 8004 	str.w	r8, [sp, #4]
   d55d4:	fb14 f202 	smulbb	r2, r4, r2
   d55d8:	440a      	add	r2, r1
   d55da:	e7df      	b.n	d559c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d55dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d55de:	f8cd 8004 	str.w	r8, [sp, #4]
   d55e2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d55e6:	9a08      	ldr	r2, [sp, #32]
   d55e8:	00e4      	lsls	r4, r4, #3
   d55ea:	440a      	add	r2, r1
   d55ec:	4611      	mov	r1, r2
   d55ee:	9400      	str	r4, [sp, #0]
   d55f0:	69dc      	ldr	r4, [r3, #28]
   d55f2:	4632      	mov	r2, r6
   d55f4:	462b      	mov	r3, r5
   d55f6:	b209      	sxth	r1, r1
   d55f8:	4658      	mov	r0, fp
   d55fa:	47a0      	blx	r4
        endWrite();
   d55fc:	e7be      	b.n	d557c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d55fe:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d5600:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d5602:	6812      	ldr	r2, [r2, #0]
   d5604:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5606:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d5608:	b2ff      	uxtb	r7, r7
   d560a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d560e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d5612:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5614:	789a      	ldrb	r2, [r3, #2]
   d5616:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d5618:	78da      	ldrb	r2, [r3, #3]
   d561a:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d561c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d561e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d5622:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5626:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d5628:	d801      	bhi.n	d562e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d562a:	2c01      	cmp	r4, #1
   d562c:	d957      	bls.n	d56de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d562e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d5632:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d5634:	fa0f f38a 	sxth.w	r3, sl
   d5638:	9307      	str	r3, [sp, #28]
        startWrite();
   d563a:	f8db 3000 	ldr.w	r3, [fp]
   d563e:	4658      	mov	r0, fp
   d5640:	695b      	ldr	r3, [r3, #20]
   d5642:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5644:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5646:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d564a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d564c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5650:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d5652:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5654:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5658:	429f      	cmp	r7, r3
   d565a:	d28f      	bcs.n	d557c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d565c:	9b07      	ldr	r3, [sp, #28]
   d565e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5660:	443b      	add	r3, r7
   d5662:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5666:	2200      	movs	r2, #0
   d5668:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d566a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d566c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d566e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5672:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5676:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d567a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d567c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d567e:	9905      	ldr	r1, [sp, #20]
   d5680:	4291      	cmp	r1, r2
   d5682:	d241      	bcs.n	d5708 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5684:	1c5a      	adds	r2, r3, #1
   d5686:	b2d2      	uxtb	r2, r2
   d5688:	075b      	lsls	r3, r3, #29
   d568a:	920c      	str	r2, [sp, #48]	; 0x30
   d568c:	d107      	bne.n	d569e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d568e:	9b06      	ldr	r3, [sp, #24]
   d5690:	9906      	ldr	r1, [sp, #24]
   d5692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5694:	3301      	adds	r3, #1
   d5696:	b29b      	uxth	r3, r3
   d5698:	f812 9001 	ldrb.w	r9, [r2, r1]
   d569c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d569e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d56a2:	d012      	beq.n	d56ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d56a4:	2d01      	cmp	r5, #1
   d56a6:	f8db 3000 	ldr.w	r3, [fp]
   d56aa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d56ae:	d11a      	bne.n	d56e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d56b0:	2c01      	cmp	r4, #1
   d56b2:	d118      	bne.n	d56e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d56b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d56b6:	699b      	ldr	r3, [r3, #24]
   d56b8:	4411      	add	r1, r2
   d56ba:	9a05      	ldr	r2, [sp, #20]
   d56bc:	4411      	add	r1, r2
   d56be:	461e      	mov	r6, r3
   d56c0:	4652      	mov	r2, sl
   d56c2:	9b04      	ldr	r3, [sp, #16]
   d56c4:	b209      	sxth	r1, r1
   d56c6:	4658      	mov	r0, fp
   d56c8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d56ca:	9e05      	ldr	r6, [sp, #20]
   d56cc:	3601      	adds	r6, #1
   d56ce:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d56d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d56d4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d56d6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d56da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d56dc:	e7ce      	b.n	d567c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d56de:	2300      	movs	r3, #0
   d56e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d56e4:	e7a9      	b.n	d563a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d56e6:	9805      	ldr	r0, [sp, #20]
   d56e8:	9a08      	ldr	r2, [sp, #32]
   d56ea:	4402      	add	r2, r0
   d56ec:	fb02 1105 	mla	r1, r2, r5, r1
   d56f0:	9a04      	ldr	r2, [sp, #16]
   d56f2:	e9cd 4200 	strd	r4, r2, [sp]
   d56f6:	69db      	ldr	r3, [r3, #28]
   d56f8:	ee18 2a10 	vmov	r2, s16
   d56fc:	461e      	mov	r6, r3
   d56fe:	b209      	sxth	r1, r1
   d5700:	462b      	mov	r3, r5
   d5702:	4658      	mov	r0, fp
   d5704:	47b0      	blx	r6
   d5706:	e7e0      	b.n	d56ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d5708:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d570a:	3701      	adds	r7, #1
   d570c:	4498      	add	r8, r3
   d570e:	fa5f f888 	uxtb.w	r8, r8
   d5712:	b2ff      	uxtb	r7, r7
   d5714:	e79f      	b.n	d5656 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d5716:	b011      	add	sp, #68	; 0x44
   d5718:	ecbd 8b02 	vpop	{d8}
   d571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5720:	000d8c42 	.word	0x000d8c42

000d5724 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d5724:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d5726:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d5728:	b085      	sub	sp, #20
   d572a:	4604      	mov	r4, r0
   d572c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d572e:	2a00      	cmp	r2, #0
   d5730:	d134      	bne.n	d579c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d5732:	290a      	cmp	r1, #10
   d5734:	d108      	bne.n	d5748 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d5736:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d5738:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d573a:	7e42      	ldrb	r2, [r0, #25]
   d573c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5740:	8263      	strh	r3, [r4, #18]
}
   d5742:	2001      	movs	r0, #1
   d5744:	b005      	add	sp, #20
   d5746:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5748:	290d      	cmp	r1, #13
   d574a:	d0fa      	beq.n	d5742 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d574c:	7ee1      	ldrb	r1, [r4, #27]
   d574e:	7e00      	ldrb	r0, [r0, #24]
   d5750:	7e65      	ldrb	r5, [r4, #25]
   d5752:	b171      	cbz	r1, d5772 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5754:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5758:	2106      	movs	r1, #6
   d575a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d575e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5762:	42b1      	cmp	r1, r6
   d5764:	bfc1      	itttt	gt
   d5766:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d576a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d576c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d5770:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5772:	8ae2      	ldrh	r2, [r4, #22]
   d5774:	9201      	str	r2, [sp, #4]
   d5776:	8aa2      	ldrh	r2, [r4, #20]
   d5778:	9200      	str	r2, [sp, #0]
   d577a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d577e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5782:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5786:	4620      	mov	r0, r4
   d5788:	f7ff fe5e 	bl	d5448 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d578c:	7e23      	ldrb	r3, [r4, #24]
   d578e:	8a22      	ldrh	r2, [r4, #16]
   d5790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5794:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5798:	8223      	strh	r3, [r4, #16]
   d579a:	e7d2      	b.n	d5742 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d579c:	290a      	cmp	r1, #10
   d579e:	d107      	bne.n	d57b0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d57a0:	2300      	movs	r3, #0
   d57a2:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d57a4:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d57a6:	7e41      	ldrb	r1, [r0, #25]
   d57a8:	8a42      	ldrh	r2, [r0, #18]
   d57aa:	fb01 2303 	mla	r3, r1, r3, r2
   d57ae:	e7c7      	b.n	d5740 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d57b0:	290d      	cmp	r1, #13
   d57b2:	d0c6      	beq.n	d5742 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d57b4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d57b6:	42a9      	cmp	r1, r5
   d57b8:	d3c3      	bcc.n	d5742 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d57ba:	7a51      	ldrb	r1, [r2, #9]
   d57bc:	4299      	cmp	r1, r3
   d57be:	d3c0      	bcc.n	d5742 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d57c0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d57c2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d57c4:	b2ed      	uxtb	r5, r5
   d57c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d57ca:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d57cc:	b32f      	cbz	r7, d581a <_ZN12Adafruit_GFX5writeEh+0xf6>
   d57ce:	78e9      	ldrb	r1, [r5, #3]
   d57d0:	b319      	cbz	r1, d581a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d57d2:	7ee1      	ldrb	r1, [r4, #27]
   d57d4:	7e00      	ldrb	r0, [r0, #24]
   d57d6:	7e66      	ldrb	r6, [r4, #25]
   d57d8:	b191      	cbz	r1, d5800 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d57da:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d57de:	4439      	add	r1, r7
   d57e0:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d57e4:	fb00 7101 	mla	r1, r0, r1, r7
   d57e8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d57ec:	42b9      	cmp	r1, r7
   d57ee:	dd07      	ble.n	d5800 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d57f0:	2700      	movs	r7, #0
   d57f2:	8227      	strh	r7, [r4, #16]
   d57f4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d57f8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d57fa:	fb02 1206 	mla	r2, r2, r6, r1
   d57fe:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5800:	8ae2      	ldrh	r2, [r4, #22]
   d5802:	9201      	str	r2, [sp, #4]
   d5804:	8aa2      	ldrh	r2, [r4, #20]
   d5806:	9200      	str	r2, [sp, #0]
   d5808:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d580c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5810:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5814:	4620      	mov	r0, r4
   d5816:	f7ff fe17 	bl	d5448 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d581a:	7929      	ldrb	r1, [r5, #4]
   d581c:	7e23      	ldrb	r3, [r4, #24]
   d581e:	8a22      	ldrh	r2, [r4, #16]
   d5820:	fb01 2303 	mla	r3, r1, r3, r2
   d5824:	e7b8      	b.n	d5798 <_ZN12Adafruit_GFX5writeEh+0x74>

000d5826 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d5826:	2901      	cmp	r1, #1
   d5828:	bf38      	it	cc
   d582a:	2101      	movcc	r1, #1
   d582c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d582e:	7641      	strb	r1, [r0, #25]
}
   d5830:	4770      	bx	lr
	...

000d5834 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d5834:	b510      	push	{r4, lr}
   d5836:	4b06      	ldr	r3, [pc, #24]	; (d5850 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d5838:	6003      	str	r3, [r0, #0]
   d583a:	4604      	mov	r4, r0
	if (mutex) {
   d583c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d583e:	b108      	cbz	r0, d5844 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d5840:	f001 fa9a 	bl	d6d78 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d5844:	4620      	mov	r0, r4
   d5846:	f000 fd85 	bl	d6354 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d584a:	4620      	mov	r0, r4
   d584c:	bd10      	pop	{r4, pc}
   d584e:	bf00      	nop
   d5850:	000d91a4 	.word	0x000d91a4

000d5854 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d5854:	b510      	push	{r4, lr}
   d5856:	4604      	mov	r4, r0
}
   d5858:	f7ff ffec 	bl	d5834 <_ZN16OledWingAdafruitD1Ev>
   d585c:	4620      	mov	r0, r4
   d585e:	2170      	movs	r1, #112	; 0x70
   d5860:	f002 ff43 	bl	d86ea <_ZdlPvj>
   d5864:	4620      	mov	r0, r4
   d5866:	bd10      	pop	{r4, pc}

000d5868 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5868:	b530      	push	{r4, r5, lr}
   d586a:	b085      	sub	sp, #20
   d586c:	4604      	mov	r4, r0
   d586e:	460d      	mov	r5, r1
   d5870:	f002 ff0e 	bl	d8690 <_Z19__fetch_global_Wirev>
   d5874:	4a10      	ldr	r2, [pc, #64]	; (d58b8 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d5876:	4911      	ldr	r1, [pc, #68]	; (d58bc <_ZN16OledWingAdafruitC1Ei+0x54>)
   d5878:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d587c:	f04f 32ff 	mov.w	r2, #4294967295
   d5880:	2180      	movs	r1, #128	; 0x80
   d5882:	4603      	mov	r3, r0
   d5884:	9200      	str	r2, [sp, #0]
   d5886:	4620      	mov	r0, r4
   d5888:	2220      	movs	r2, #32
   d588a:	f000 fde9 	bl	d6460 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d588e:	4b0c      	ldr	r3, [pc, #48]	; (d58c0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d5890:	6023      	str	r3, [r4, #0]
   d5892:	2300      	movs	r3, #0
   d5894:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d5898:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d589c:	f000 f868 	bl	d5970 <_ZN8DebounceC1Ev>
   d58a0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d58a4:	f000 f864 	bl	d5970 <_ZN8DebounceC1Ev>
   d58a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d58ac:	f000 f860 	bl	d5970 <_ZN8DebounceC1Ev>
}
   d58b0:	4620      	mov	r0, r4
   d58b2:	b005      	add	sp, #20
   d58b4:	bd30      	pop	{r4, r5, pc}
   d58b6:	bf00      	nop
   d58b8:	00061a80 	.word	0x00061a80
   d58bc:	000186a0 	.word	0x000186a0
   d58c0:	000d91a4 	.word	0x000d91a4

000d58c4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d58c4:	b513      	push	{r0, r1, r4, lr}
   d58c6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d58c8:	3050      	adds	r0, #80	; 0x50
   d58ca:	f001 fa4d 	bl	d6d68 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d58ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d58d0:	07d9      	lsls	r1, r3, #31
   d58d2:	d505      	bpl.n	d58e0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d58d4:	2202      	movs	r2, #2
   d58d6:	2104      	movs	r1, #4
   d58d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d58dc:	f000 f85c 	bl	d5998 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d58e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d58e2:	079a      	lsls	r2, r3, #30
   d58e4:	d505      	bpl.n	d58f2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d58e6:	2200      	movs	r2, #0
   d58e8:	2103      	movs	r1, #3
   d58ea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d58ee:	f000 f853 	bl	d5998 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d58f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d58f4:	075b      	lsls	r3, r3, #29
   d58f6:	d505      	bpl.n	d5904 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d58f8:	2202      	movs	r2, #2
   d58fa:	4611      	mov	r1, r2
   d58fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5900:	f000 f84a 	bl	d5998 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d5904:	2301      	movs	r3, #1
   d5906:	9300      	str	r3, [sp, #0]
   d5908:	223c      	movs	r2, #60	; 0x3c
   d590a:	2102      	movs	r1, #2
   d590c:	4620      	mov	r0, r4
   d590e:	f000 fea7 	bl	d6660 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d5912:	b002      	add	sp, #8
   d5914:	bd10      	pop	{r4, pc}

000d5916 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d5916:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5918:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d591a:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d591c:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d591e:	d502      	bpl.n	d5926 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d5920:	3058      	adds	r0, #88	; 0x58
   d5922:	f000 f846 	bl	d59b2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d5926:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5928:	079a      	lsls	r2, r3, #30
   d592a:	d503      	bpl.n	d5934 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d592c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5930:	f000 f83f 	bl	d59b2 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d5934:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5936:	075b      	lsls	r3, r3, #29
   d5938:	d505      	bpl.n	d5946 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d593a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d593e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d5942:	f000 b836 	b.w	d59b2 <_ZN8Debounce6updateEv>
}
   d5946:	bd10      	pop	{r4, pc}

000d5948 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5948:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d594a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d594c:	f013 0001 	ands.w	r0, r3, #1
   d5950:	d003      	beq.n	d595a <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d5952:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d5956:	f000 b85c 	b.w	d5a12 <_ZN8Debounce4fellEv>
}
   d595a:	4770      	bx	lr

000d595c <_ZN16OledWingAdafruit8pressedCEv>:
bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
}

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d595c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d595e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5960:	f013 0004 	ands.w	r0, r3, #4
   d5964:	d003      	beq.n	d596e <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d5966:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d596a:	f000 b852 	b.w	d5a12 <_ZN8Debounce4fellEv>
}
   d596e:	4770      	bx	lr

000d5970 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5970:	2100      	movs	r1, #0
   d5972:	220a      	movs	r2, #10
   d5974:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5978:	4770      	bx	lr

000d597a <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d597a:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d597c:	b510      	push	{r4, lr}
   d597e:	4604      	mov	r4, r0
    this->pin = pin;
   d5980:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5982:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5984:	b288      	uxth	r0, r1
   d5986:	f002 fe1b 	bl	d85c0 <digitalRead>
   d598a:	b108      	cbz	r0, d5990 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d598c:	2303      	movs	r3, #3
   d598e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5990:	f001 f9e2 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5994:	6020      	str	r0, [r4, #0]
#endif
}
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	460c      	mov	r4, r1
   d599c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d599e:	4611      	mov	r1, r2
   d59a0:	b2a0      	uxth	r0, r4
   d59a2:	f002 fde3 	bl	d856c <pinMode>
  
  this->attach(pin);
   d59a6:	4621      	mov	r1, r4
   d59a8:	4628      	mov	r0, r5
}
   d59aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d59ae:	f7ff bfe4 	b.w	d597a <_ZN8Debounce6attachEi>

000d59b2 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d59b2:	b538      	push	{r3, r4, r5, lr}
   d59b4:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d59b6:	79c0      	ldrb	r0, [r0, #7]
   d59b8:	f002 fe02 	bl	d85c0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d59bc:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d59be:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d59c0:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d59c4:	bf18      	it	ne
   d59c6:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d59c8:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d59cc:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d59ce:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d59d0:	d00a      	beq.n	d59e8 <_ZN8Debounce6updateEv+0x36>
   d59d2:	f001 f9c1 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d59d6:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d59d8:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d59da:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d59de:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d59e0:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d59e2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d59e6:	bd38      	pop	{r3, r4, r5, pc}
   d59e8:	f001 f9b6 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d59ec:	6823      	ldr	r3, [r4, #0]
   d59ee:	1ac0      	subs	r0, r0, r3
   d59f0:	88a3      	ldrh	r3, [r4, #4]
   d59f2:	4298      	cmp	r0, r3
   d59f4:	d3f4      	bcc.n	d59e0 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d59f6:	79a3      	ldrb	r3, [r4, #6]
   d59f8:	f003 0301 	and.w	r3, r3, #1
   d59fc:	42ab      	cmp	r3, r5
   d59fe:	d0ef      	beq.n	d59e0 <_ZN8Debounce6updateEv+0x2e>
   d5a00:	f001 f9aa 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d5a04:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d5a06:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d5a08:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d5a0c:	f043 0308 	orr.w	r3, r3, #8
   d5a10:	e7e5      	b.n	d59de <_ZN8Debounce6updateEv+0x2c>

000d5a12 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d5a12:	7980      	ldrb	r0, [r0, #6]
   d5a14:	f000 0009 	and.w	r0, r0, #9
   d5a18:	f1a0 0308 	sub.w	r3, r0, #8
   d5a1c:	4258      	negs	r0, r3
   d5a1e:	4158      	adcs	r0, r3
   d5a20:	4770      	bx	lr

000d5a22 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d5a22:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d5a26:	b510      	push	{r4, lr}
   d5a28:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d5a2a:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d5a2c:	b113      	cbz	r3, d5a34 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d5a2e:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d5a30:	f001 f9aa 	bl	d6d88 <os_mutex_lock>
#endif
#endif
#endif
        }
   d5a34:	4620      	mov	r0, r4
   d5a36:	bd10      	pop	{r4, pc}

000d5a38 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d5a38:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d5a3a:	6803      	ldr	r3, [r0, #0]
   d5a3c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d5a40:	4604      	mov	r4, r0
            if (mqtt->thread)
   d5a42:	b112      	cbz	r2, d5a4a <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d5a44:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d5a46:	f001 f9a7 	bl	d6d98 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	bd10      	pop	{r4, pc}

000d5a4e <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d5a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a50:	461f      	mov	r7, r3
   d5a52:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d5a56:	4604      	mov	r4, r0
   d5a58:	460d      	mov	r5, r1
   d5a5a:	4616      	mov	r6, r2
    if (thread) {
   d5a5c:	b12b      	cbz	r3, d5a6a <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d5a5e:	2301      	movs	r3, #1
   d5a60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d5a64:	3058      	adds	r0, #88	; 0x58
   d5a66:	f001 f97f 	bl	d6d68 <os_mutex_create>
    }
    this->callback = callback;
   d5a6a:	9b08      	ldr	r3, [sp, #32]
   d5a6c:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d5a6e:	2300      	movs	r3, #0
   d5a70:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d5a72:	b106      	cbz	r6, d5a76 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d5a74:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d5a76:	b125      	cbz	r5, d5a82 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d5a78:	4629      	mov	r1, r5
   d5a7a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5a7e:	f001 fd89 	bl	d7594 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d5a82:	9b06      	ldr	r3, [sp, #24]
   d5a84:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5a86:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d5a88:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d5a8a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d5a8e:	2bff      	cmp	r3, #255	; 0xff
   d5a90:	bfb8      	it	lt
   d5a92:	23ff      	movlt	r3, #255	; 0xff
   d5a94:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d5a98:	b108      	cbz	r0, d5a9e <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d5a9a:	f7fe fb00 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d5a9e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d5aa2:	f7fe faf8 	bl	d4096 <_Znaj>
   d5aa6:	61e0      	str	r0, [r4, #28]
}
   d5aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5aac <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d5aac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5ab0:	4604      	mov	r4, r0
            bool thread) {
   d5ab2:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d5ab4:	4617      	mov	r7, r2
   d5ab6:	4698      	mov	r8, r3
   d5ab8:	460e      	mov	r6, r1
            bool thread) {
   d5aba:	f002 fb99 	bl	d81f0 <_ZN9TCPClientC1Ev>
   d5abe:	490d      	ldr	r1, [pc, #52]	; (d5af4 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d5ac0:	61e5      	str	r5, [r4, #28]
   d5ac2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5ac6:	f001 fd37 	bl	d7538 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5aca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d5ace:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5ad0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d5ad4:	22ff      	movs	r2, #255	; 0xff
   d5ad6:	230f      	movs	r3, #15
   d5ad8:	e9cd 3200 	strd	r3, r2, [sp]
   d5adc:	4620      	mov	r0, r4
            bool thread) {
   d5ade:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d5ae2:	463b      	mov	r3, r7
   d5ae4:	462a      	mov	r2, r5
   d5ae6:	4631      	mov	r1, r6
   d5ae8:	f7ff ffb1 	bl	d5a4e <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d5aec:	4620      	mov	r0, r4
   d5aee:	b004      	add	sp, #16
   d5af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5af4:	000d8b43 	.word	0x000d8b43

000d5af8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5af8:	b510      	push	{r4, lr}
   d5afa:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5afc:	4620      	mov	r0, r4
   d5afe:	f002 fad3 	bl	d80a8 <_ZN9TCPClient9availableEv>
   d5b02:	2800      	cmp	r0, #0
   d5b04:	d0fa      	beq.n	d5afc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d5b06:	4620      	mov	r0, r4
   d5b08:	f002 fa07 	bl	d7f1a <_ZN9TCPClient4readEv>
}
   d5b0c:	b2c0      	uxtb	r0, r0
   d5b0e:	bd10      	pop	{r4, pc}

000d5b10 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b14:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5b16:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5b18:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d5b1a:	f7ff ffed 	bl	d5af8 <_ZN4MQTT8readByteEv>
   d5b1e:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5b20:	69eb      	ldr	r3, [r5, #28]
   d5b22:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d5b26:	f04f 0901 	mov.w	r9, #1
   d5b2a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5b2e:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d5b32:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d5b34:	4628      	mov	r0, r5
   d5b36:	f7ff ffdf 	bl	d5af8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5b3a:	4626      	mov	r6, r4
   d5b3c:	69eb      	ldr	r3, [r5, #28]
   d5b3e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5b40:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5b44:	fb13 f309 	smulbb	r3, r3, r9
   d5b48:	4498      	add	r8, r3
        buffer[len++] = digit;
   d5b4a:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5b4c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d5b4e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5b50:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d5b54:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d5b58:	d4ec      	bmi.n	d5b34 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d5b5a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5b5c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d5b60:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d5b62:	d124      	bne.n	d5bae <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5b64:	4628      	mov	r0, r5
   d5b66:	69ef      	ldr	r7, [r5, #28]
   d5b68:	f7ff ffc6 	bl	d5af8 <_ZN4MQTT8readByteEv>
   d5b6c:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d5b6e:	4628      	mov	r0, r5
   d5b70:	69ef      	ldr	r7, [r5, #28]
   d5b72:	1cf4      	adds	r4, r6, #3
   d5b74:	f7ff ffc0 	bl	d5af8 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d5b78:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d5b7a:	b2b6      	uxth	r6, r6
   d5b7c:	b2a4      	uxth	r4, r4
   d5b7e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5b80:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5b82:	b2b6      	uxth	r6, r6
   d5b84:	46b1      	mov	r9, r6
   d5b86:	4627      	mov	r7, r4
   d5b88:	45c1      	cmp	r9, r8
   d5b8a:	d212      	bcs.n	d5bb2 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5b8c:	4628      	mov	r0, r5
   d5b8e:	f7ff ffb3 	bl	d5af8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5b92:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5b96:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d5b98:	bf88      	it	hi
   d5b9a:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d5b9c:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d5ba0:	bf88      	it	hi
   d5ba2:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d5ba4:	3701      	adds	r7, #1
   d5ba6:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d5ba8:	fa1f f989 	uxth.w	r9, r9
   d5bac:	e7ec      	b.n	d5b88 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d5bae:	2600      	movs	r6, #0
   d5bb0:	e7e7      	b.n	d5b82 <_ZN4MQTT10readPacketEPh+0x72>
   d5bb2:	eba8 0006 	sub.w	r0, r8, r6
   d5bb6:	45b0      	cmp	r8, r6
   d5bb8:	bf2c      	ite	cs
   d5bba:	4606      	movcs	r6, r0
   d5bbc:	2600      	movcc	r6, #0
   d5bbe:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d5bc0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d5bc4:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5bc6:	42a0      	cmp	r0, r4
   d5bc8:	bf2c      	ite	cs
   d5bca:	4620      	movcs	r0, r4
   d5bcc:	2000      	movcc	r0, #0
   d5bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5bd2 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5bd4:	468c      	mov	ip, r1
   d5bd6:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5bd8:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5bda:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d5bdc:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d5bde:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5be0:	a802      	add	r0, sp, #8
        digit = len % 128;
   d5be2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d5be6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d5bea:	f103 0401 	add.w	r4, r3, #1
   d5bee:	4403      	add	r3, r0
            digit |= 0x80;
   d5bf0:	bf88      	it	hi
   d5bf2:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d5bf6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d5bfa:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d5bfe:	b2e4      	uxtb	r4, r4
   d5c00:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d5c04:	d810      	bhi.n	d5c28 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d5c06:	f1c4 0304 	rsb	r3, r4, #4
   d5c0a:	18d1      	adds	r1, r2, r3
   d5c0c:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5c10:	f1c4 0305 	rsb	r3, r4, #5
   d5c14:	4413      	add	r3, r2
   d5c16:	a801      	add	r0, sp, #4
   d5c18:	3205      	adds	r2, #5
   d5c1a:	4293      	cmp	r3, r2
   d5c1c:	d006      	beq.n	d5c2c <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d5c1e:	f810 5b01 	ldrb.w	r5, [r0], #1
   d5c22:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d5c26:	e7f8      	b.n	d5c1a <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d5c28:	4623      	mov	r3, r4
   d5c2a:	e7d8      	b.n	d5bde <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5c2c:	1c72      	adds	r2, r6, #1
   d5c2e:	4422      	add	r2, r4
   d5c30:	4638      	mov	r0, r7
   d5c32:	f002 f89c 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
   d5c36:	4605      	mov	r5, r0
   d5c38:	f001 f88e 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5c3c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d5c3e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5c40:	4432      	add	r2, r6
   d5c42:	b2a8      	uxth	r0, r5
}
   d5c44:	1a13      	subs	r3, r2, r0
   d5c46:	4258      	negs	r0, r3
   d5c48:	4158      	adcs	r0, r3
   d5c4a:	b003      	add	sp, #12
   d5c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c4e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d5c4e:	b513      	push	{r0, r1, r4, lr}
   d5c50:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d5c52:	4601      	mov	r1, r0
   d5c54:	a801      	add	r0, sp, #4
   d5c56:	f7ff fee4 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d5c5a:	69e3      	ldr	r3, [r4, #28]
   d5c5c:	22e0      	movs	r2, #224	; 0xe0
   d5c5e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d5c60:	69e3      	ldr	r3, [r4, #28]
   d5c62:	2200      	movs	r2, #0
   d5c64:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d5c66:	69e1      	ldr	r1, [r4, #28]
   d5c68:	2202      	movs	r2, #2
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	f002 f87f 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d5c70:	4620      	mov	r0, r4
   d5c72:	f002 fa73 	bl	d815c <_ZN9TCPClient4stopEv>
   d5c76:	f001 f86f 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5c7a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d5c7e:	a801      	add	r0, sp, #4
   d5c80:	f7ff feda 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5c84:	b002      	add	sp, #8
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5c88:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c8c:	4604      	mov	r4, r0
    pos += 2;
   d5c8e:	b298      	uxth	r0, r3
   d5c90:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d5c92:	5ccd      	ldrb	r5, [r1, r3]
   d5c94:	b155      	cbz	r5, d5cac <_ZN4MQTT11writeStringEPKcPht+0x24>
   d5c96:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5c9a:	4286      	cmp	r6, r0
   d5c9c:	f103 0701 	add.w	r7, r3, #1
   d5ca0:	d904      	bls.n	d5cac <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d5ca2:	1c46      	adds	r6, r0, #1
   d5ca4:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d5ca6:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d5ca8:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d5caa:	e7f2      	b.n	d5c92 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5cac:	b299      	uxth	r1, r3
   d5cae:	1a44      	subs	r4, r0, r1
   d5cb0:	4422      	add	r2, r4
   d5cb2:	1209      	asrs	r1, r1, #8
   d5cb4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5cb8:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d5cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cbe <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5cbe:	b538      	push	{r3, r4, r5, lr}
   d5cc0:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d5cc2:	f002 f86a 	bl	d7d9a <_ZN9TCPClient9connectedEv>
   d5cc6:	2800      	cmp	r0, #0
   d5cc8:	bf14      	ite	ne
   d5cca:	2501      	movne	r5, #1
   d5ccc:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d5cce:	d102      	bne.n	d5cd6 <_ZN4MQTT11isConnectedEv+0x18>
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	f002 fa43 	bl	d815c <_ZN9TCPClient4stopEv>
    return rc;
}
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5cdc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ce0:	b088      	sub	sp, #32
   d5ce2:	4604      	mov	r4, r0
   d5ce4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5ce8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d5cec:	4689      	mov	r9, r1
   d5cee:	4617      	mov	r7, r2
   d5cf0:	461e      	mov	r6, r3
    if (!isConnected()) {
   d5cf2:	f7ff ffe4 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d5cf6:	4605      	mov	r5, r0
   d5cf8:	2800      	cmp	r0, #0
   d5cfa:	f040 80cb 	bne.w	d5e94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d5cfe:	4621      	mov	r1, r4
   d5d00:	a801      	add	r0, sp, #4
   d5d02:	f7ff fe8e 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d5d06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5d08:	2900      	cmp	r1, #0
   d5d0a:	f040 8087 	bne.w	d5e1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d5d0e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5d14:	462b      	mov	r3, r5
   d5d16:	4620      	mov	r0, r4
   d5d18:	f002 fa7e 	bl	d8218 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d5d1c:	2800      	cmp	r0, #0
   d5d1e:	d079      	beq.n	d5e14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d5d20:	2301      	movs	r3, #1
   d5d22:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d5d24:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d5d28:	69e2      	ldr	r2, [r4, #28]
   d5d2a:	2b04      	cmp	r3, #4
   d5d2c:	f040 8081 	bne.w	d5e32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5d30:	4b59      	ldr	r3, [pc, #356]	; (d5e98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d5d32:	6818      	ldr	r0, [r3, #0]
   d5d34:	8899      	ldrh	r1, [r3, #4]
   d5d36:	799b      	ldrb	r3, [r3, #6]
   d5d38:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5d3c:	f88d 300e 	strb.w	r3, [sp, #14]
   d5d40:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5d42:	f8c2 0005 	str.w	r0, [r2, #5]
   d5d46:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5d4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d5d4e:	f8a2 1009 	strh.w	r1, [r2, #9]
   d5d52:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d5d54:	230c      	movs	r3, #12
            if (willTopic) {
   d5d56:	f1b8 0f00 	cmp.w	r8, #0
   d5d5a:	d07f      	beq.n	d5e5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5d5c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d5d60:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d5d64:	0140      	lsls	r0, r0, #5
   d5d66:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d5d6a:	f040 0006 	orr.w	r0, r0, #6
   d5d6e:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d5d70:	f1ba 0f00 	cmp.w	sl, #0
   d5d74:	d101      	bne.n	d5d7a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d5d76:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d5d7a:	b11f      	cbz	r7, d5d84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d5d7c:	2e00      	cmp	r6, #0
   d5d7e:	d16f      	bne.n	d5e60 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d5d80:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d5d84:	69e2      	ldr	r2, [r4, #28]
   d5d86:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5d88:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5d8a:	69e1      	ldr	r1, [r4, #28]
   d5d8c:	1c58      	adds	r0, r3, #1
   d5d8e:	1212      	asrs	r2, r2, #8
   d5d90:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5d92:	1c9a      	adds	r2, r3, #2
   d5d94:	69e1      	ldr	r1, [r4, #28]
   d5d96:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5d98:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5d9a:	3303      	adds	r3, #3
   d5d9c:	69e2      	ldr	r2, [r4, #28]
   d5d9e:	4649      	mov	r1, r9
   d5da0:	4620      	mov	r0, r4
   d5da2:	f7ff ff71 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
   d5da6:	4603      	mov	r3, r0
            if (willTopic) {
   d5da8:	f1b8 0f00 	cmp.w	r8, #0
   d5dac:	d00b      	beq.n	d5dc6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d5dae:	69e2      	ldr	r2, [r4, #28]
   d5db0:	4641      	mov	r1, r8
   d5db2:	4620      	mov	r0, r4
   d5db4:	f7ff ff68 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5db8:	69e2      	ldr	r2, [r4, #28]
   d5dba:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5dbc:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d5dbe:	4620      	mov	r0, r4
   d5dc0:	f7ff ff62 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
   d5dc4:	4603      	mov	r3, r0
            if(user != NULL) {
   d5dc6:	b167      	cbz	r7, d5de2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5dc8:	69e2      	ldr	r2, [r4, #28]
   d5dca:	4639      	mov	r1, r7
   d5dcc:	4620      	mov	r0, r4
   d5dce:	f7ff ff5b 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
   d5dd2:	4603      	mov	r3, r0
                if(pass != NULL) {
   d5dd4:	b12e      	cbz	r6, d5de2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d5dd6:	69e2      	ldr	r2, [r4, #28]
   d5dd8:	4631      	mov	r1, r6
   d5dda:	4620      	mov	r0, r4
   d5ddc:	f7ff ff54 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
   d5de0:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d5de2:	3b05      	subs	r3, #5
   d5de4:	69e2      	ldr	r2, [r4, #28]
   d5de6:	b29b      	uxth	r3, r3
   d5de8:	2110      	movs	r1, #16
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff fef1 	bl	d5bd2 <_ZN4MQTT5writeEhPht>
   d5df0:	f000 ffb2 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d5df4:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5df8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	f002 f953 	bl	d80a8 <_ZN9TCPClient9availableEv>
   d5e02:	bb80      	cbnz	r0, d5e66 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d5e04:	f000 ffa8 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5e0a:	1ac0      	subs	r0, r0, r3
   d5e0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5e0e:	4373      	muls	r3, r6
   d5e10:	4298      	cmp	r0, r3
   d5e12:	d9f3      	bls.n	d5dfc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d5e14:	4620      	mov	r0, r4
   d5e16:	f002 f9a1 	bl	d815c <_ZN9TCPClient4stopEv>
   d5e1a:	e034      	b.n	d5e86 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d5e1c:	a802      	add	r0, sp, #8
   d5e1e:	f001 fe2f 	bl	d7a80 <_ZN9IPAddressC1EPKh>
   d5e22:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5e26:	462b      	mov	r3, r5
   d5e28:	a902      	add	r1, sp, #8
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f002 f8c1 	bl	d7fb2 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5e30:	e774      	b.n	d5d1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5e32:	4b1a      	ldr	r3, [pc, #104]	; (d5e9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d5e34:	6818      	ldr	r0, [r3, #0]
   d5e36:	6859      	ldr	r1, [r3, #4]
   d5e38:	7a1b      	ldrb	r3, [r3, #8]
   d5e3a:	f10d 0c08 	add.w	ip, sp, #8
   d5e3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d5e42:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5e46:	ab02      	add	r3, sp, #8
   d5e48:	cb03      	ldmia	r3!, {r0, r1}
   d5e4a:	f8c2 0005 	str.w	r0, [r2, #5]
   d5e4e:	f8c2 1009 	str.w	r1, [r2, #9]
   d5e52:	f89c 3000 	ldrb.w	r3, [ip]
   d5e56:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5e58:	230e      	movs	r3, #14
   d5e5a:	e77c      	b.n	d5d56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d5e5c:	2002      	movs	r0, #2
   d5e5e:	e787      	b.n	d5d70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d5e60:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d5e64:	e78e      	b.n	d5d84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d5e66:	a902      	add	r1, sp, #8
   d5e68:	4620      	mov	r0, r4
   d5e6a:	f7ff fe51 	bl	d5b10 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d5e6e:	2804      	cmp	r0, #4
   d5e70:	d1d0      	bne.n	d5e14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d5e72:	69e3      	ldr	r3, [r4, #28]
   d5e74:	78de      	ldrb	r6, [r3, #3]
   d5e76:	2e00      	cmp	r6, #0
   d5e78:	d1cc      	bne.n	d5e14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d5e7a:	f000 ff6d 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d5e7e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d5e80:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5e82:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d5e86:	a801      	add	r0, sp, #4
   d5e88:	f7ff fdd6 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5e8c:	4628      	mov	r0, r5
   d5e8e:	b008      	add	sp, #32
   d5e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d5e94:	2500      	movs	r5, #0
   d5e96:	e7f9      	b.n	d5e8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5e98:	000d91f4 	.word	0x000d91f4
   d5e9c:	000d91fb 	.word	0x000d91fb

000d5ea0 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d5ea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5ea2:	2301      	movs	r3, #1
   d5ea4:	2204      	movs	r2, #4
   d5ea6:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5eaa:	2300      	movs	r3, #0
   d5eac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d5eb0:	e9cd 3300 	strd	r3, r3, [sp]
   d5eb4:	461a      	mov	r2, r3
   d5eb6:	f7ff ff11 	bl	d5cdc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5eba:	b007      	add	sp, #28
   d5ebc:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ec0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ec4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d5ec8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5ecc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d5ed0:	4604      	mov	r4, r0
   d5ed2:	468b      	mov	fp, r1
   d5ed4:	4616      	mov	r6, r2
   d5ed6:	461f      	mov	r7, r3
    if (isConnected()) {
   d5ed8:	f7ff fef1 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d5edc:	4682      	mov	sl, r0
   d5ede:	2800      	cmp	r0, #0
   d5ee0:	d051      	beq.n	d5f86 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d5ee2:	4621      	mov	r1, r4
   d5ee4:	a801      	add	r0, sp, #4
   d5ee6:	f7ff fd9c 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d5eea:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5eee:	69e0      	ldr	r0, [r4, #28]
   d5ef0:	2100      	movs	r1, #0
   d5ef2:	f002 fd35 	bl	d8960 <memset>
        length = writeString(topic, buffer, length);
   d5ef6:	2305      	movs	r3, #5
   d5ef8:	69e2      	ldr	r2, [r4, #28]
   d5efa:	4659      	mov	r1, fp
   d5efc:	4620      	mov	r0, r4
   d5efe:	f7ff fec3 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d5f02:	1e6b      	subs	r3, r5, #1
   d5f04:	2b01      	cmp	r3, #1
   d5f06:	d815      	bhi.n	d5f34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d5f08:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5f0a:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d5f0c:	3101      	adds	r1, #1
   d5f0e:	b289      	uxth	r1, r1
   d5f10:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5f12:	1209      	asrs	r1, r1, #8
   d5f14:	5419      	strb	r1, [r3, r0]
   d5f16:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d5f18:	69e3      	ldr	r3, [r4, #28]
   d5f1a:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5f1c:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d5f1e:	3002      	adds	r0, #2
   d5f20:	5499      	strb	r1, [r3, r2]
   d5f22:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5f24:	f1b8 0f00 	cmp.w	r8, #0
   d5f28:	d004      	beq.n	d5f34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d5f2a:	8c23      	ldrh	r3, [r4, #32]
   d5f2c:	1c5a      	adds	r2, r3, #1
   d5f2e:	8422      	strh	r2, [r4, #32]
   d5f30:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5f34:	2100      	movs	r1, #0
   d5f36:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5f38:	428f      	cmp	r7, r1
   d5f3a:	69e2      	ldr	r2, [r4, #28]
   d5f3c:	b29b      	uxth	r3, r3
   d5f3e:	d90a      	bls.n	d5f56 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d5f40:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d5f44:	459c      	cmp	ip, r3
   d5f46:	d906      	bls.n	d5f56 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d5f48:	f816 c001 	ldrb.w	ip, [r6, r1]
   d5f4c:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5f50:	3101      	adds	r1, #1
   d5f52:	b289      	uxth	r1, r1
   d5f54:	e7ef      	b.n	d5f36 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d5f56:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d5f5a:	2900      	cmp	r1, #0
   d5f5c:	bf0c      	ite	eq
   d5f5e:	2130      	moveq	r1, #48	; 0x30
   d5f60:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d5f62:	f1b9 0f00 	cmp.w	r9, #0
   d5f66:	d001      	beq.n	d5f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d5f68:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d5f6c:	2d02      	cmp	r5, #2
   d5f6e:	d10e      	bne.n	d5f8e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d5f70:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d5f74:	3b05      	subs	r3, #5
   d5f76:	b29b      	uxth	r3, r3
   d5f78:	4620      	mov	r0, r4
   d5f7a:	f7ff fe2a 	bl	d5bd2 <_ZN4MQTT5writeEhPht>
   d5f7e:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d5f80:	a801      	add	r0, sp, #4
   d5f82:	f7ff fd59 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5f86:	4650      	mov	r0, sl
   d5f88:	b003      	add	sp, #12
   d5f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d5f8e:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5f90:	bf08      	it	eq
   d5f92:	f041 0102 	orreq.w	r1, r1, #2
   d5f96:	e7ed      	b.n	d5f74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d5f98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5f9a:	9c08      	ldr	r4, [sp, #32]
   d5f9c:	9403      	str	r4, [sp, #12]
   d5f9e:	2400      	movs	r4, #0
   d5fa0:	9402      	str	r4, [sp, #8]
   d5fa2:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5fa6:	9401      	str	r4, [sp, #4]
   d5fa8:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5fac:	9400      	str	r4, [sp, #0]
   d5fae:	f7ff ff87 	bl	d5ec0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5fb2:	b004      	add	sp, #16
   d5fb4:	bd10      	pop	{r4, pc}

000d5fb6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d5fb6:	b530      	push	{r4, r5, lr}
   d5fb8:	b087      	sub	sp, #28
   d5fba:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5fbc:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d5fbe:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5fc0:	9204      	str	r2, [sp, #16]
   d5fc2:	f002 fd0b 	bl	d89dc <strlen>
   d5fc6:	2500      	movs	r5, #0
   d5fc8:	4603      	mov	r3, r0
   d5fca:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d5fce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d5fd2:	9500      	str	r5, [sp, #0]
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	f7ff ffdf 	bl	d5f98 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5fda:	b007      	add	sp, #28
   d5fdc:	bd30      	pop	{r4, r5, pc}

000d5fde <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d5fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5fe0:	4604      	mov	r4, r0
   d5fe2:	460e      	mov	r6, r1
    if (isConnected()) {
   d5fe4:	f7ff fe6b 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d5fe8:	4605      	mov	r5, r0
   d5fea:	b1c8      	cbz	r0, d6020 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5fec:	4621      	mov	r1, r4
   d5fee:	a801      	add	r0, sp, #4
   d5ff0:	f7ff fd17 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5ff4:	69e3      	ldr	r3, [r4, #28]
   d5ff6:	2262      	movs	r2, #98	; 0x62
   d5ff8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5ffa:	69e3      	ldr	r3, [r4, #28]
   d5ffc:	2202      	movs	r2, #2
   d5ffe:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d6000:	69e3      	ldr	r3, [r4, #28]
   d6002:	1232      	asrs	r2, r6, #8
   d6004:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d6006:	69e3      	ldr	r3, [r4, #28]
   d6008:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d600a:	69e1      	ldr	r1, [r4, #28]
   d600c:	2204      	movs	r2, #4
   d600e:	4620      	mov	r0, r4
   d6010:	f001 fead 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
   d6014:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d6016:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d6018:	bf18      	it	ne
   d601a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d601c:	f7ff fd0c 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d6020:	4628      	mov	r0, r5
   d6022:	b002      	add	sp, #8
   d6024:	bd70      	pop	{r4, r5, r6, pc}

000d6026 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d6026:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6028:	4604      	mov	r4, r0
   d602a:	460e      	mov	r6, r1
    if (isConnected()) {
   d602c:	f7ff fe47 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d6030:	4605      	mov	r5, r0
   d6032:	b1c8      	cbz	r0, d6068 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d6034:	4621      	mov	r1, r4
   d6036:	a801      	add	r0, sp, #4
   d6038:	f7ff fcf3 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d603c:	69e3      	ldr	r3, [r4, #28]
   d603e:	2272      	movs	r2, #114	; 0x72
   d6040:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d6042:	69e3      	ldr	r3, [r4, #28]
   d6044:	2202      	movs	r2, #2
   d6046:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d6048:	69e3      	ldr	r3, [r4, #28]
   d604a:	1232      	asrs	r2, r6, #8
   d604c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d604e:	69e3      	ldr	r3, [r4, #28]
   d6050:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d6052:	69e1      	ldr	r1, [r4, #28]
   d6054:	2204      	movs	r2, #4
   d6056:	4620      	mov	r0, r4
   d6058:	f001 fe89 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
   d605c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d605e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d6060:	bf18      	it	ne
   d6062:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d6064:	f7ff fce8 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d6068:	4628      	mov	r0, r5
   d606a:	b002      	add	sp, #8
   d606c:	bd70      	pop	{r4, r5, r6, pc}

000d606e <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d606e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6072:	ed2d 8b02 	vpush	{d8}
   d6076:	b087      	sub	sp, #28
   d6078:	af00      	add	r7, sp, #0
   d607a:	4604      	mov	r4, r0
    if (isConnected()) {
   d607c:	f7ff fe1f 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d6080:	4681      	mov	r9, r0
   d6082:	b1f8      	cbz	r0, d60c4 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d6084:	4621      	mov	r1, r4
   d6086:	f107 0014 	add.w	r0, r7, #20
   d608a:	f7ff fcca 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
   d608e:	f000 fe63 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d6092:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d6094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6098:	4353      	muls	r3, r2
   d609a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d609c:	1a82      	subs	r2, r0, r2
   d609e:	429a      	cmp	r2, r3
   d60a0:	4606      	mov	r6, r0
   d60a2:	d803      	bhi.n	d60ac <_ZN4MQTT4loopEv+0x3e>
   d60a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d60a6:	1a82      	subs	r2, r0, r2
   d60a8:	4293      	cmp	r3, r2
   d60aa:	d221      	bcs.n	d60f0 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d60ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d60b0:	b17b      	cbz	r3, d60d2 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d60b2:	4620      	mov	r0, r4
   d60b4:	f002 f852 	bl	d815c <_ZN9TCPClient4stopEv>
                return false;
   d60b8:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d60bc:	f107 0014 	add.w	r0, r7, #20
   d60c0:	f7ff fcba 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d60c4:	4648      	mov	r0, r9
   d60c6:	371c      	adds	r7, #28
   d60c8:	46bd      	mov	sp, r7
   d60ca:	ecbd 8b02 	vpop	{d8}
   d60ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d60d2:	69e2      	ldr	r2, [r4, #28]
   d60d4:	21c0      	movs	r1, #192	; 0xc0
   d60d6:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d60d8:	69e2      	ldr	r2, [r4, #28]
   d60da:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d60dc:	69e1      	ldr	r1, [r4, #28]
   d60de:	2202      	movs	r2, #2
   d60e0:	4620      	mov	r0, r4
   d60e2:	f001 fe44 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d60e6:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d60ea:	2301      	movs	r3, #1
   d60ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d60f0:	4620      	mov	r0, r4
   d60f2:	f001 ffd9 	bl	d80a8 <_ZN9TCPClient9availableEv>
   d60f6:	2800      	cmp	r0, #0
   d60f8:	d0e0      	beq.n	d60bc <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d60fa:	f107 0113 	add.w	r1, r7, #19
   d60fe:	4620      	mov	r0, r4
   d6100:	f7ff fd06 	bl	d5b10 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d6104:	4683      	mov	fp, r0
   d6106:	2800      	cmp	r0, #0
   d6108:	d0d8      	beq.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d610a:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d610c:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d610e:	7819      	ldrb	r1, [r3, #0]
   d6110:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d6114:	2a30      	cmp	r2, #48	; 0x30
   d6116:	d17f      	bne.n	d6218 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d6118:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d611c:	f1ba 0f00 	cmp.w	sl, #0
   d6120:	d0cc      	beq.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d6122:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d6126:	466a      	mov	r2, sp
   d6128:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d612c:	eb03 020c 	add.w	r2, r3, ip
   d6130:	7855      	ldrb	r5, [r2, #1]
   d6132:	7891      	ldrb	r1, [r2, #2]
   d6134:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d6138:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d613a:	f105 0208 	add.w	r2, r5, #8
   d613e:	4669      	mov	r1, sp
   d6140:	08d2      	lsrs	r2, r2, #3
   d6142:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d6146:	4695      	mov	sp, r2
   d6148:	f10c 0203 	add.w	r2, ip, #3
   d614c:	60fa      	str	r2, [r7, #12]
   d614e:	eb03 0e02 	add.w	lr, r3, r2
   d6152:	eb0d 0205 	add.w	r2, sp, r5
   d6156:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d6158:	f8c7 d008 	str.w	sp, [r7, #8]
   d615c:	607a      	str	r2, [r7, #4]
   d615e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d6162:	428a      	cmp	r2, r1
   d6164:	d006      	beq.n	d6174 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d6166:	460a      	mov	r2, r1
   d6168:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d616c:	f802 8b01 	strb.w	r8, [r2], #1
   d6170:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d6172:	e7f4      	b.n	d615e <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d6174:	2200      	movs	r2, #0
   d6176:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6178:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d617c:	68f9      	ldr	r1, [r7, #12]
   d617e:	f008 0806 	and.w	r8, r8, #6
   d6182:	ebab 020c 	sub.w	r2, fp, ip
   d6186:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6188:	f1b8 0f02 	cmp.w	r8, #2
   d618c:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6190:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d6192:	d125      	bne.n	d61e0 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d6194:	f813 e001 	ldrb.w	lr, [r3, r1]
   d6198:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d619a:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d619c:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d61a0:	f10c 0105 	add.w	r1, ip, #5
   d61a4:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d61a6:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61a8:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d61ac:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d61ae:	69e3      	ldr	r3, [r4, #28]
   d61b0:	2240      	movs	r2, #64	; 0x40
   d61b2:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d61b4:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d61b6:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d61ba:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d61be:	69e3      	ldr	r3, [r4, #28]
   d61c0:	ea4f 222b 	mov.w	r2, fp, asr #8
   d61c4:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d61c6:	69e3      	ldr	r3, [r4, #28]
   d61c8:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d61cc:	69e1      	ldr	r1, [r4, #28]
   d61ce:	2204      	movs	r2, #4
   d61d0:	4620      	mov	r0, r4
   d61d2:	f001 fdcc 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d61d6:	6266      	str	r6, [r4, #36]	; 0x24
   d61d8:	ee18 3a10 	vmov	r3, s16
   d61dc:	469d      	mov	sp, r3
   d61de:	e76d      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d61e0:	f1b8 0f04 	cmp.w	r8, #4
   d61e4:	d115      	bne.n	d6212 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d61e6:	f813 e001 	ldrb.w	lr, [r3, r1]
   d61ea:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d61ec:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d61ee:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d61f2:	f10c 0105 	add.w	r1, ip, #5
   d61f6:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d61f8:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d61fa:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d61fe:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d6200:	69e3      	ldr	r3, [r4, #28]
   d6202:	2250      	movs	r2, #80	; 0x50
   d6204:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d6206:	69e3      	ldr	r3, [r4, #28]
   d6208:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d620a:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d620e:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d6210:	e7d5      	b.n	d61be <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d6212:	4419      	add	r1, r3
   d6214:	47d0      	blx	sl
   d6216:	e7df      	b.n	d61d8 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d6218:	2a50      	cmp	r2, #80	; 0x50
   d621a:	d108      	bne.n	d622e <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d621c:	789a      	ldrb	r2, [r3, #2]
   d621e:	78d9      	ldrb	r1, [r3, #3]
   d6220:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d6224:	b289      	uxth	r1, r1
   d6226:	4620      	mov	r0, r4
   d6228:	f7ff fed9 	bl	d5fde <_ZN4MQTT14publishReleaseEt>
   d622c:	e746      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d622e:	2a40      	cmp	r2, #64	; 0x40
   d6230:	d112      	bne.n	d6258 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d6232:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d6234:	2a00      	cmp	r2, #0
   d6236:	f43f af41 	beq.w	d60bc <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d623a:	f1bb 0f04 	cmp.w	fp, #4
   d623e:	f47f af3d 	bne.w	d60bc <_ZN4MQTT4loopEv+0x4e>
   d6242:	f011 0f06 	tst.w	r1, #6
   d6246:	f47f af39 	bne.w	d60bc <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d624a:	7899      	ldrb	r1, [r3, #2]
   d624c:	78d8      	ldrb	r0, [r3, #3]
   d624e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d6252:	b280      	uxth	r0, r0
   d6254:	4790      	blx	r2
   d6256:	e731      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d6258:	2a60      	cmp	r2, #96	; 0x60
   d625a:	d108      	bne.n	d626e <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d625c:	789a      	ldrb	r2, [r3, #2]
   d625e:	78d9      	ldrb	r1, [r3, #3]
   d6260:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d6264:	b289      	uxth	r1, r1
   d6266:	4620      	mov	r0, r4
   d6268:	f7ff fedd 	bl	d6026 <_ZN4MQTT15publishCompleteEt>
   d626c:	e726      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d626e:	2a70      	cmp	r2, #112	; 0x70
   d6270:	d0df      	beq.n	d6232 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d6272:	2a90      	cmp	r2, #144	; 0x90
   d6274:	f43f af22 	beq.w	d60bc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d6278:	2ac0      	cmp	r2, #192	; 0xc0
   d627a:	d10a      	bne.n	d6292 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d627c:	22d0      	movs	r2, #208	; 0xd0
   d627e:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d6280:	69e3      	ldr	r3, [r4, #28]
   d6282:	2200      	movs	r2, #0
   d6284:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d6286:	69e1      	ldr	r1, [r4, #28]
   d6288:	2202      	movs	r2, #2
   d628a:	4620      	mov	r0, r4
   d628c:	f001 fd6f 	bl	d7d6e <_ZN9TCPClient5writeEPKhj>
   d6290:	e714      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d6292:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d6294:	bf04      	itt	eq
   d6296:	2300      	moveq	r3, #0
   d6298:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d629c:	e70e      	b.n	d60bc <_ZN4MQTT4loopEv+0x4e>

000d629e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d629e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d62a0:	4604      	mov	r4, r0
   d62a2:	460f      	mov	r7, r1
   d62a4:	4616      	mov	r6, r2
    if (isConnected()) {
   d62a6:	f7ff fd0a 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d62aa:	4605      	mov	r5, r0
   d62ac:	b310      	cbz	r0, d62f4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d62ae:	4621      	mov	r1, r4
   d62b0:	a801      	add	r0, sp, #4
   d62b2:	f7ff fbb6 	bl	d5a22 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d62b6:	8c23      	ldrh	r3, [r4, #32]
   d62b8:	3301      	adds	r3, #1
   d62ba:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d62bc:	b1eb      	cbz	r3, d62fa <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d62be:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d62c0:	8c23      	ldrh	r3, [r4, #32]
   d62c2:	69e2      	ldr	r2, [r4, #28]
   d62c4:	121b      	asrs	r3, r3, #8
   d62c6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d62c8:	69e3      	ldr	r3, [r4, #28]
   d62ca:	8c22      	ldrh	r2, [r4, #32]
   d62cc:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d62ce:	69e2      	ldr	r2, [r4, #28]
   d62d0:	2307      	movs	r3, #7
   d62d2:	4639      	mov	r1, r7
   d62d4:	4620      	mov	r0, r4
   d62d6:	f7ff fcd7 	bl	d5c88 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d62da:	69e3      	ldr	r3, [r4, #28]
   d62dc:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d62de:	3804      	subs	r0, #4
   d62e0:	b283      	uxth	r3, r0
   d62e2:	69e2      	ldr	r2, [r4, #28]
   d62e4:	2182      	movs	r1, #130	; 0x82
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff fc73 	bl	d5bd2 <_ZN4MQTT5writeEhPht>
   d62ec:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d62ee:	a801      	add	r0, sp, #4
   d62f0:	f7ff fba2 	bl	d5a38 <_ZN4MQTT11MutexLockerD1Ev>
}
   d62f4:	4628      	mov	r0, r5
   d62f6:	b003      	add	sp, #12
   d62f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d62fa:	2301      	movs	r3, #1
   d62fc:	e7df      	b.n	d62be <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d62fe <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d62fe:	2200      	movs	r2, #0
   d6300:	f7ff bfcd 	b.w	d629e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d6304 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d6304:	b538      	push	{r3, r4, r5, lr}
   d6306:	4605      	mov	r5, r0
    if (isConnected()) {
   d6308:	f7ff fcd9 	bl	d5cbe <_ZN4MQTT11isConnectedEv>
   d630c:	b110      	cbz	r0, d6314 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d630e:	4628      	mov	r0, r5
   d6310:	f7ff fc9d 	bl	d5c4e <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d6314:	69e8      	ldr	r0, [r5, #28]
   d6316:	b108      	cbz	r0, d631c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d6318:	f7fd fec1 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d631c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d6320:	f001 f8bf 	bl	d74a2 <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d6324:	69ac      	ldr	r4, [r5, #24]
   d6326:	4b0a      	ldr	r3, [pc, #40]	; (d6350 <_ZN4MQTTD1Ev+0x4c>)
   d6328:	602b      	str	r3, [r5, #0]
   d632a:	b17c      	cbz	r4, d634c <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d632c:	6863      	ldr	r3, [r4, #4]
   d632e:	3b01      	subs	r3, #1
   d6330:	6063      	str	r3, [r4, #4]
   d6332:	b95b      	cbnz	r3, d634c <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d6334:	6823      	ldr	r3, [r4, #0]
   d6336:	4620      	mov	r0, r4
   d6338:	689b      	ldr	r3, [r3, #8]
   d633a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d633c:	68a3      	ldr	r3, [r4, #8]
   d633e:	3b01      	subs	r3, #1
   d6340:	60a3      	str	r3, [r4, #8]
   d6342:	b91b      	cbnz	r3, d634c <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d6344:	6823      	ldr	r3, [r4, #0]
   d6346:	4620      	mov	r0, r4
   d6348:	68db      	ldr	r3, [r3, #12]
   d634a:	4798      	blx	r3
}
   d634c:	4628      	mov	r0, r5
   d634e:	bd38      	pop	{r3, r4, r5, pc}
   d6350:	000d9c88 	.word	0x000d9c88

000d6354 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d6354:	b510      	push	{r4, lr}
   d6356:	4b04      	ldr	r3, [pc, #16]	; (d6368 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d6358:	6003      	str	r3, [r0, #0]
   d635a:	4604      	mov	r4, r0
  if(buffer) {
   d635c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d635e:	b108      	cbz	r0, d6364 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d6360:	f000 ff46 	bl	d71f0 <free>
    buffer = NULL;
  }
}
   d6364:	4620      	mov	r0, r4
   d6366:	bd10      	pop	{r4, pc}
   d6368:	000d96c0 	.word	0x000d96c0

000d636c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d636c:	b510      	push	{r4, lr}
   d636e:	4604      	mov	r4, r0
}
   d6370:	f7ff fff0 	bl	d6354 <_ZN16Adafruit_SSD1306D1Ev>
   d6374:	4620      	mov	r0, r4
   d6376:	2150      	movs	r1, #80	; 0x50
   d6378:	f002 f9b7 	bl	d86ea <_ZdlPvj>
   d637c:	4620      	mov	r0, r4
   d637e:	bd10      	pop	{r4, pc}

000d6380 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6380:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d6382:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d6384:	db4b      	blt.n	d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d6386:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d638a:	428c      	cmp	r4, r1
   d638c:	dd47      	ble.n	d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d638e:	2a00      	cmp	r2, #0
   d6390:	db45      	blt.n	d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d6392:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d6396:	4294      	cmp	r4, r2
   d6398:	dd41      	ble.n	d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d639a:	7e84      	ldrb	r4, [r0, #26]
   d639c:	2c02      	cmp	r4, #2
   d639e:	d01f      	beq.n	d63e0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d63a0:	2c03      	cmp	r4, #3
   d63a2:	d026      	beq.n	d63f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d63a4:	2c01      	cmp	r4, #1
   d63a6:	d104      	bne.n	d63b2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d63a8:	8904      	ldrh	r4, [r0, #8]
   d63aa:	43d2      	mvns	r2, r2
   d63ac:	4414      	add	r4, r2
      break;
   d63ae:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d63b0:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d63b2:	2b01      	cmp	r3, #1
   d63b4:	d023      	beq.n	d63fe <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d63b6:	2b02      	cmp	r3, #2
   d63b8:	d032      	beq.n	d6420 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d63ba:	bb83      	cbnz	r3, d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d63bc:	2a00      	cmp	r2, #0
   d63be:	4613      	mov	r3, r2
   d63c0:	8904      	ldrh	r4, [r0, #8]
   d63c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d63c4:	bfb8      	it	lt
   d63c6:	1dd3      	addlt	r3, r2, #7
   d63c8:	10db      	asrs	r3, r3, #3
   d63ca:	fb13 1104 	smlabb	r1, r3, r4, r1
   d63ce:	f002 0207 	and.w	r2, r2, #7
   d63d2:	2301      	movs	r3, #1
   d63d4:	4093      	lsls	r3, r2
   d63d6:	5c42      	ldrb	r2, [r0, r1]
   d63d8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d63dc:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d63de:	e01e      	b.n	d641e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d63e0:	8904      	ldrh	r4, [r0, #8]
   d63e2:	43c9      	mvns	r1, r1
   d63e4:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d63e6:	8944      	ldrh	r4, [r0, #10]
   d63e8:	43d2      	mvns	r2, r2
   d63ea:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d63ec:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d63ee:	b212      	sxth	r2, r2
      break;
   d63f0:	e7df      	b.n	d63b2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d63f2:	8944      	ldrh	r4, [r0, #10]
   d63f4:	43c9      	mvns	r1, r1
   d63f6:	440c      	add	r4, r1
      break;
   d63f8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d63fa:	b222      	sxth	r2, r4
      break;
   d63fc:	e7d9      	b.n	d63b2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d63fe:	2a00      	cmp	r2, #0
   d6400:	8904      	ldrh	r4, [r0, #8]
   d6402:	4613      	mov	r3, r2
   d6404:	bfb8      	it	lt
   d6406:	1dd3      	addlt	r3, r2, #7
   d6408:	10db      	asrs	r3, r3, #3
   d640a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d640e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6410:	f002 0007 	and.w	r0, r2, #7
   d6414:	2201      	movs	r2, #1
   d6416:	4082      	lsls	r2, r0
   d6418:	5c58      	ldrb	r0, [r3, r1]
   d641a:	4302      	orrs	r2, r0
   d641c:	545a      	strb	r2, [r3, r1]
}
   d641e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d6420:	2a00      	cmp	r2, #0
   d6422:	4613      	mov	r3, r2
   d6424:	8904      	ldrh	r4, [r0, #8]
   d6426:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6428:	bfb8      	it	lt
   d642a:	1dd3      	addlt	r3, r2, #7
   d642c:	10db      	asrs	r3, r3, #3
   d642e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d6432:	f002 0207 	and.w	r2, r2, #7
   d6436:	2301      	movs	r3, #1
   d6438:	fa03 f202 	lsl.w	r2, r3, r2
   d643c:	5c43      	ldrb	r3, [r0, r1]
   d643e:	405a      	eors	r2, r3
   d6440:	e7cc      	b.n	d63dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d6442 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6442:	b510      	push	{r4, lr}
   d6444:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d6446:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d644a:	2101      	movs	r1, #1
   d644c:	b280      	uxth	r0, r0
   d644e:	f002 f89e 	bl	d858e <digitalWrite>
   d6452:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6454:	b118      	cbz	r0, d645e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d6456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d645a:	f000 bf58 	b.w	d730e <_ZN8SPIClass14endTransactionEv>
}
   d645e:	bd10      	pop	{r4, pc}

000d6460 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d6460:	b570      	push	{r4, r5, r6, lr}
   d6462:	4604      	mov	r4, r0
   d6464:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d6466:	2600      	movs	r6, #0
   d6468:	f7fe ff84 	bl	d5374 <_ZN12Adafruit_GFXC1Ess>
   d646c:	4b11      	ldr	r3, [pc, #68]	; (d64b4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d646e:	6023      	str	r3, [r4, #0]
   d6470:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d6472:	b915      	cbnz	r5, d647a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d6474:	f002 f90c 	bl	d8690 <_Z19__fetch_global_Wirev>
   d6478:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d647a:	23ff      	movs	r3, #255	; 0xff
   d647c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d6480:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d6484:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d6488:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d648c:	4b0a      	ldr	r3, [pc, #40]	; (d64b8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d648e:	63a3      	str	r3, [r4, #56]	; 0x38
   d6490:	2301      	movs	r3, #1
   d6492:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d6496:	9b05      	ldr	r3, [sp, #20]
   d6498:	64a3      	str	r3, [r4, #72]	; 0x48
   d649a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d649e:	9b06      	ldr	r3, [sp, #24]
   d64a0:	86a2      	strh	r2, [r4, #52]	; 0x34
   d64a2:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d64a6:	6426      	str	r6, [r4, #64]	; 0x40
   d64a8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d64ac:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d64ae:	4620      	mov	r0, r4
   d64b0:	bd70      	pop	{r4, r5, r6, pc}
   d64b2:	bf00      	nop
   d64b4:	000d96c0 	.word	0x000d96c0
   d64b8:	000d920c 	.word	0x000d920c

000d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d64bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64be:	4604      	mov	r4, r0
  if(wire) { // I2C
   d64c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d64c2:	460d      	mov	r5, r1
  if(wire) { // I2C
   d64c4:	b190      	cbz	r0, d64ec <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d64c6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d64ca:	f001 fc39 	bl	d7d40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d64ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64d0:	6803      	ldr	r3, [r0, #0]
   d64d2:	2100      	movs	r1, #0
   d64d4:	689b      	ldr	r3, [r3, #8]
   d64d6:	4798      	blx	r3
    WIRE_WRITE(c);
   d64d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64da:	6803      	ldr	r3, [r0, #0]
   d64dc:	4629      	mov	r1, r5
   d64de:	689b      	ldr	r3, [r3, #8]
   d64e0:	4798      	blx	r3
    wire->endTransmission();
   d64e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d64e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d64e8:	f001 bc31 	b.w	d7d4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d64ec:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d64f0:	4601      	mov	r1, r0
   d64f2:	b298      	uxth	r0, r3
   d64f4:	f002 f84b 	bl	d858e <digitalWrite>
  if(spi) {
   d64f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d64fa:	b120      	cbz	r0, d6506 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d64fc:	4629      	mov	r1, r5
}
   d64fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d6502:	f000 bf8b 	b.w	d741c <_ZN8SPIClass8transferEh>
   d6506:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6508:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d650a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d650e:	ea05 0107 	and.w	r1, r5, r7
   d6512:	b280      	uxth	r0, r0
   d6514:	f002 f83b 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6518:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d651c:	2101      	movs	r1, #1
   d651e:	b280      	uxth	r0, r0
   d6520:	f002 f835 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6524:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6528:	2100      	movs	r1, #0
   d652a:	b280      	uxth	r0, r0
   d652c:	f002 f82f 	bl	d858e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6530:	3e01      	subs	r6, #1
   d6532:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d6536:	d1e8      	bne.n	d650a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d6538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d653a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d653a:	b538      	push	{r3, r4, r5, lr}
   d653c:	4604      	mov	r4, r0
  TRANSACTION_START
   d653e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d6540:	460d      	mov	r5, r1
  TRANSACTION_START
   d6542:	b180      	cbz	r0, d6566 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d6544:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6546:	f001 fbed 	bl	d7d24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d654a:	2d00      	cmp	r5, #0
   d654c:	4620      	mov	r0, r4
   d654e:	bf14      	ite	ne
   d6550:	21a7      	movne	r1, #167	; 0xa7
   d6552:	21a6      	moveq	r1, #166	; 0xa6
   d6554:	f7ff ffb2 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d6558:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d655a:	b188      	cbz	r0, d6580 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d655c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d655e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6562:	f001 bbdf 	b.w	d7d24 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d6566:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6568:	b118      	cbz	r0, d6572 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d656a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d656e:	f000 fee7 	bl	d7340 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d6572:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6576:	2100      	movs	r1, #0
   d6578:	b280      	uxth	r0, r0
   d657a:	f002 f808 	bl	d858e <digitalWrite>
   d657e:	e7e4      	b.n	d654a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d6580:	4620      	mov	r0, r4
}
   d6582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6586:	f7ff bf5c 	b.w	d6442 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d658a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d658e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d6590:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d6592:	460d      	mov	r5, r1
  if(wire) { // I2C
   d6594:	188f      	adds	r7, r1, r2
   d6596:	b340      	cbz	r0, d65ea <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d6598:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d659c:	f001 fbd0 	bl	d7d40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d65a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d65a2:	6803      	ldr	r3, [r0, #0]
   d65a4:	2100      	movs	r1, #0
   d65a6:	689b      	ldr	r3, [r3, #8]
   d65a8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d65aa:	2601      	movs	r6, #1
    while(n--) {
   d65ac:	42bd      	cmp	r5, r7
   d65ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d65b0:	d017      	beq.n	d65e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d65b2:	2e1f      	cmp	r6, #31
   d65b4:	d90c      	bls.n	d65d0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d65b6:	f001 fbca 	bl	d7d4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d65ba:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d65be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d65c0:	f001 fbbe 	bl	d7d40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d65c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d65c6:	6803      	ldr	r3, [r0, #0]
   d65c8:	2100      	movs	r1, #0
   d65ca:	689b      	ldr	r3, [r3, #8]
   d65cc:	4798      	blx	r3
        bytesOut = 1;
   d65ce:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d65d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d65d2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d65d6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d65d8:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d65da:	689b      	ldr	r3, [r3, #8]
   d65dc:	4798      	blx	r3
      bytesOut++;
   d65de:	b2f6      	uxtb	r6, r6
    while(n--) {
   d65e0:	e7e4      	b.n	d65ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d65e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d65e6:	f001 bbb2 	b.w	d7d4e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d65ea:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d65ee:	4601      	mov	r1, r0
   d65f0:	b298      	uxth	r0, r3
   d65f2:	f001 ffcc 	bl	d858e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d65f6:	42af      	cmp	r7, r5
   d65f8:	d022      	beq.n	d6640 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d65fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d65fc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d6600:	b118      	cbz	r0, d660a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d6602:	4649      	mov	r1, r9
   d6604:	f000 ff0a 	bl	d741c <_ZN8SPIClass8transferEh>
   d6608:	e7f5      	b.n	d65f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d660a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d660c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6610:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6614:	ea09 0108 	and.w	r1, r9, r8
   d6618:	b280      	uxth	r0, r0
   d661a:	f001 ffb8 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d661e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6622:	2101      	movs	r1, #1
   d6624:	b280      	uxth	r0, r0
   d6626:	f001 ffb2 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d662a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d662e:	2100      	movs	r1, #0
   d6630:	b280      	uxth	r0, r0
   d6632:	f001 ffac 	bl	d858e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6636:	3e01      	subs	r6, #1
   d6638:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d663c:	d1e8      	bne.n	d6610 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d663e:	e7da      	b.n	d65f6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d6640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d6644:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d6648:	1dda      	adds	r2, r3, #7
   d664a:	bf48      	it	mi
   d664c:	f103 020e 	addmi.w	r2, r3, #14
   d6650:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d6654:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6656:	10d2      	asrs	r2, r2, #3
   d6658:	435a      	muls	r2, r3
   d665a:	2100      	movs	r1, #0
   d665c:	f002 b980 	b.w	d8960 <memset>

000d6660 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d6660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6664:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d6666:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d6668:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d666c:	4604      	mov	r4, r0
   d666e:	460f      	mov	r7, r1
   d6670:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d6672:	b1b3      	cbz	r3, d66a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d6674:	4620      	mov	r0, r4
   d6676:	f7ff ffe5 	bl	d6644 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d667a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d667e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d6682:	2820      	cmp	r0, #32
   d6684:	dc1f      	bgt.n	d66c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d6686:	2320      	movs	r3, #32
   d6688:	2201      	movs	r2, #1
   d668a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d668e:	3820      	subs	r0, #32
   d6690:	2373      	movs	r3, #115	; 0x73
   d6692:	3973      	subs	r1, #115	; 0x73
   d6694:	9300      	str	r3, [sp, #0]
   d6696:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d669a:	4b89      	ldr	r3, [pc, #548]	; (d68c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d669c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d66a0:	e01f      	b.n	d66e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d66a2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d66a6:	1dd8      	adds	r0, r3, #7
   d66a8:	bf48      	it	mi
   d66aa:	f103 000e 	addmi.w	r0, r3, #14
   d66ae:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d66b2:	10c0      	asrs	r0, r0, #3
   d66b4:	4358      	muls	r0, r3
   d66b6:	f000 fd93 	bl	d71e0 <malloc>
   d66ba:	62e0      	str	r0, [r4, #44]	; 0x2c
   d66bc:	2800      	cmp	r0, #0
   d66be:	d1d9      	bne.n	d6674 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d66c0:	b004      	add	sp, #16
   d66c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d66c6:	2340      	movs	r3, #64	; 0x40
   d66c8:	f04f 0c01 	mov.w	ip, #1
   d66cc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d66d0:	2352      	movs	r3, #82	; 0x52
   d66d2:	3840      	subs	r0, #64	; 0x40
   d66d4:	3952      	subs	r1, #82	; 0x52
   d66d6:	9300      	str	r3, [sp, #0]
   d66d8:	4b7a      	ldr	r3, [pc, #488]	; (d68c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d66da:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d66de:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d66e2:	f340 024f 	sbfx	r2, r0, #1, #16
   d66e6:	f341 014f 	sbfx	r1, r1, #1, #16
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7fe fe58 	bl	d53a0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d66f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d66f2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d66f6:	2800      	cmp	r0, #0
   d66f8:	d078      	beq.n	d67ec <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d66fa:	2d00      	cmp	r5, #0
   d66fc:	d174      	bne.n	d67e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d66fe:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d6702:	2b20      	cmp	r3, #32
   d6704:	bf0c      	ite	eq
   d6706:	253c      	moveq	r5, #60	; 0x3c
   d6708:	253d      	movne	r5, #61	; 0x3d
   d670a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d670e:	f1b8 0f00 	cmp.w	r8, #0
   d6712:	d001      	beq.n	d6718 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d6714:	f001 fb0a 	bl	d7d2c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d6718:	b1fe      	cbz	r6, d675a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d671a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d671e:	2800      	cmp	r0, #0
   d6720:	db1b      	blt.n	d675a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d6722:	2101      	movs	r1, #1
   d6724:	b280      	uxth	r0, r0
   d6726:	f001 ff21 	bl	d856c <pinMode>
    digitalWrite(rstPin, HIGH);
   d672a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d672e:	2101      	movs	r1, #1
   d6730:	b280      	uxth	r0, r0
   d6732:	f001 ff2c 	bl	d858e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d6736:	2001      	movs	r0, #1
   d6738:	f001 f86e 	bl	d7818 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d673c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6740:	2100      	movs	r1, #0
   d6742:	b280      	uxth	r0, r0
   d6744:	f001 ff23 	bl	d858e <digitalWrite>
    delay(10);                  // Wait 10 ms
   d6748:	200a      	movs	r0, #10
   d674a:	f001 f865 	bl	d7818 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d674e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d6752:	2101      	movs	r1, #1
   d6754:	b280      	uxth	r0, r0
   d6756:	f001 ff1a 	bl	d858e <digitalWrite>
  TRANSACTION_START
   d675a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d675c:	2800      	cmp	r0, #0
   d675e:	d074      	beq.n	d684a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d6760:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6762:	f001 fadf 	bl	d7d24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d6766:	2204      	movs	r2, #4
   d6768:	4957      	ldr	r1, [pc, #348]	; (d68c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d676a:	4620      	mov	r0, r4
   d676c:	f7ff ff0d 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d6770:	7aa1      	ldrb	r1, [r4, #10]
   d6772:	3901      	subs	r1, #1
   d6774:	b2c9      	uxtb	r1, r1
   d6776:	4620      	mov	r0, r4
   d6778:	f7ff fea0 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d677c:	4953      	ldr	r1, [pc, #332]	; (d68cc <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d677e:	2204      	movs	r2, #4
   d6780:	4620      	mov	r0, r4
   d6782:	f7ff ff02 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d6786:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d678a:	2b01      	cmp	r3, #1
   d678c:	bf0c      	ite	eq
   d678e:	2110      	moveq	r1, #16
   d6790:	2114      	movne	r1, #20
   d6792:	4620      	mov	r0, r4
   d6794:	f7ff fe92 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d6798:	2204      	movs	r2, #4
   d679a:	494d      	ldr	r1, [pc, #308]	; (d68d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d679c:	4620      	mov	r0, r4
   d679e:	f7ff fef4 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d67a2:	68a3      	ldr	r3, [r4, #8]
   d67a4:	4a4b      	ldr	r2, [pc, #300]	; (d68d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d67a6:	4293      	cmp	r3, r2
   d67a8:	d15c      	bne.n	d6864 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d67aa:	494b      	ldr	r1, [pc, #300]	; (d68d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d67ac:	2204      	movs	r2, #4
   d67ae:	4620      	mov	r0, r4
   d67b0:	f7ff feeb 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d67b4:	21d9      	movs	r1, #217	; 0xd9
   d67b6:	4620      	mov	r0, r4
   d67b8:	f7ff fe80 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d67bc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d67c0:	2b01      	cmp	r3, #1
   d67c2:	bf0c      	ite	eq
   d67c4:	2122      	moveq	r1, #34	; 0x22
   d67c6:	21f1      	movne	r1, #241	; 0xf1
   d67c8:	4620      	mov	r0, r4
   d67ca:	f7ff fe77 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d67ce:	4620      	mov	r0, r4
   d67d0:	4942      	ldr	r1, [pc, #264]	; (d68dc <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d67d2:	2206      	movs	r2, #6
   d67d4:	f7ff fed9 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d67d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d67da:	2800      	cmp	r0, #0
   d67dc:	d063      	beq.n	d68a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d67de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d67e0:	f001 faa0 	bl	d7d24 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d67e4:	2001      	movs	r0, #1
   d67e6:	e76b      	b.n	d66c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d67e8:	b26d      	sxtb	r5, r5
   d67ea:	e78e      	b.n	d670a <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d67ec:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d67f0:	2101      	movs	r1, #1
   d67f2:	b280      	uxth	r0, r0
   d67f4:	f001 feba 	bl	d856c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d67f8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d67fc:	2101      	movs	r1, #1
   d67fe:	b280      	uxth	r0, r0
   d6800:	f001 feb4 	bl	d856c <pinMode>
    SSD1306_DESELECT
   d6804:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6808:	2101      	movs	r1, #1
   d680a:	b280      	uxth	r0, r0
   d680c:	f001 febf 	bl	d858e <digitalWrite>
    if(spi) { // Hardware SPI
   d6810:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d6812:	b13d      	cbz	r5, d6824 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d6814:	f1b8 0f00 	cmp.w	r8, #0
   d6818:	f43f af7e 	beq.w	d6718 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d681c:	4628      	mov	r0, r5
   d681e:	f000 fd65 	bl	d72ec <_ZN8SPIClass5beginEv>
   d6822:	e779      	b.n	d6718 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d6824:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6828:	2101      	movs	r1, #1
   d682a:	b280      	uxth	r0, r0
   d682c:	f001 fe9e 	bl	d856c <pinMode>
      pinMode(clkPin , OUTPUT);
   d6830:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6834:	2101      	movs	r1, #1
   d6836:	b280      	uxth	r0, r0
   d6838:	f001 fe98 	bl	d856c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d683c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6840:	4629      	mov	r1, r5
   d6842:	b280      	uxth	r0, r0
   d6844:	f001 fea3 	bl	d858e <digitalWrite>
   d6848:	e766      	b.n	d6718 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d684a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d684c:	b118      	cbz	r0, d6856 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d684e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d6852:	f000 fd75 	bl	d7340 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d6856:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d685a:	2100      	movs	r1, #0
   d685c:	b280      	uxth	r0, r0
   d685e:	f001 fe96 	bl	d858e <digitalWrite>
   d6862:	e780      	b.n	d6766 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d6864:	4a1e      	ldr	r2, [pc, #120]	; (d68e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d6866:	4293      	cmp	r3, r2
   d6868:	d10e      	bne.n	d6888 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d686a:	491e      	ldr	r1, [pc, #120]	; (d68e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d686c:	2203      	movs	r2, #3
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff fe8b 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d6874:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6878:	2b01      	cmp	r3, #1
   d687a:	bf0c      	ite	eq
   d687c:	219f      	moveq	r1, #159	; 0x9f
   d687e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6880:	4620      	mov	r0, r4
   d6882:	f7ff fe1b 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d6886:	e795      	b.n	d67b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d6888:	4a17      	ldr	r2, [pc, #92]	; (d68e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d688a:	4293      	cmp	r3, r2
   d688c:	d192      	bne.n	d67b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d688e:	4917      	ldr	r1, [pc, #92]	; (d68ec <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d6890:	2203      	movs	r2, #3
   d6892:	4620      	mov	r0, r4
   d6894:	f7ff fe79 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6898:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d689c:	2b01      	cmp	r3, #1
   d689e:	bf0c      	ite	eq
   d68a0:	2110      	moveq	r1, #16
   d68a2:	21af      	movne	r1, #175	; 0xaf
   d68a4:	e7ec      	b.n	d6880 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d68a6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d68aa:	2101      	movs	r1, #1
   d68ac:	b280      	uxth	r0, r0
   d68ae:	f001 fe6e 	bl	d858e <digitalWrite>
   d68b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d68b4:	2800      	cmp	r0, #0
   d68b6:	d095      	beq.n	d67e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d68b8:	f000 fd29 	bl	d730e <_ZN8SPIClass14endTransactionEv>
   d68bc:	e792      	b.n	d67e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d68be:	bf00      	nop
   d68c0:	000d94d8 	.word	0x000d94d8
   d68c4:	000d9218 	.word	0x000d9218
   d68c8:	000d9720 	.word	0x000d9720
   d68cc:	000d9724 	.word	0x000d9724
   d68d0:	000d9728 	.word	0x000d9728
   d68d4:	00200080 	.word	0x00200080
   d68d8:	000d9732 	.word	0x000d9732
   d68dc:	000d972c 	.word	0x000d972c
   d68e0:	00400080 	.word	0x00400080
   d68e4:	000d9736 	.word	0x000d9736
   d68e8:	00100060 	.word	0x00100060
   d68ec:	000d9739 	.word	0x000d9739

000d68f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d68f0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d68f2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d68f4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d68f8:	db3d      	blt.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d68fa:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d68fe:	4294      	cmp	r4, r2
   d6900:	dd39      	ble.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d6902:	2900      	cmp	r1, #0
      w += x;
   d6904:	bfbe      	ittt	lt
   d6906:	185b      	addlt	r3, r3, r1
   d6908:	b21b      	sxthlt	r3, r3
      x  = 0;
   d690a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d690c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d6910:	18ce      	adds	r6, r1, r3
   d6912:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d6914:	bfc4      	itt	gt
   d6916:	1a63      	subgt	r3, r4, r1
   d6918:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d691a:	2b00      	cmp	r3, #0
   d691c:	dd2b      	ble.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d691e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d6920:	10d6      	asrs	r6, r2, #3
   d6922:	fb14 1106 	smlabb	r1, r4, r6, r1
   d6926:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d6928:	f002 0007 	and.w	r0, r2, #7
   d692c:	2201      	movs	r2, #1
   d692e:	4082      	lsls	r2, r0
      switch(color) {
   d6930:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d6932:	b2d2      	uxtb	r2, r2
      switch(color) {
   d6934:	d016      	beq.n	d6964 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d6936:	2d02      	cmp	r5, #2
   d6938:	d00b      	beq.n	d6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d693a:	b9e5      	cbnz	r5, d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d693c:	43d2      	mvns	r2, r2
   d693e:	b2d2      	uxtb	r2, r2
   d6940:	440b      	add	r3, r1
   d6942:	4299      	cmp	r1, r3
   d6944:	d017      	beq.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6946:	f811 0b01 	ldrb.w	r0, [r1], #1
   d694a:	4010      	ands	r0, r2
   d694c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6950:	e7f7      	b.n	d6942 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d6952:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d6954:	4299      	cmp	r1, r3
   d6956:	d00e      	beq.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d6958:	f811 0b01 	ldrb.w	r0, [r1], #1
   d695c:	4050      	eors	r0, r2
   d695e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6962:	e7f7      	b.n	d6954 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d6964:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d6966:	4299      	cmp	r1, r3
   d6968:	d005      	beq.n	d6976 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d696a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d696e:	4310      	orrs	r0, r2
   d6970:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6974:	e7f7      	b.n	d6966 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d6976:	bd70      	pop	{r4, r5, r6, pc}

000d6978 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6978:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d697a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d697c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d6980:	db76      	blt.n	d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d6982:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d6986:	42a9      	cmp	r1, r5
   d6988:	da72      	bge.n	d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d698a:	2a00      	cmp	r2, #0
      __h += __y;
   d698c:	bfbc      	itt	lt
   d698e:	18d2      	addlt	r2, r2, r3
   d6990:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d6992:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d6996:	bfb8      	it	lt
   d6998:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d699a:	18d7      	adds	r7, r2, r3
   d699c:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d699e:	bfc4      	itt	gt
   d69a0:	1aa3      	subgt	r3, r4, r2
   d69a2:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d69a4:	2b00      	cmp	r3, #0
   d69a6:	dd63      	ble.n	d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d69a8:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d69ac:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d69ae:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d69b2:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d69b6:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d69b8:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d69bc:	d023      	beq.n	d6a06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d69be:	f1c2 0208 	rsb	r2, r2, #8
   d69c2:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d69c4:	4d2c      	ldr	r5, [pc, #176]	; (d6a78 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d69c6:	4293      	cmp	r3, r2
   d69c8:	bf3c      	itt	cc
   d69ca:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d69ce:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d69d2:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d69d4:	bf3c      	itt	cc
   d69d6:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d69da:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d69de:	2e01      	cmp	r6, #1
   d69e0:	d007      	beq.n	d69f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d69e2:	2e02      	cmp	r6, #2
   d69e4:	d02e      	beq.n	d6a44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d69e6:	b94e      	cbnz	r6, d69fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d69e8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d69ec:	ea2c 0505 	bic.w	r5, ip, r5
   d69f0:	e003      	b.n	d69fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d69f2:	f817 c001 	ldrb.w	ip, [r7, r1]
   d69f6:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d69fa:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d69fc:	4293      	cmp	r3, r2
   d69fe:	d337      	bcc.n	d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d6a00:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d6a04:	440c      	add	r4, r1
        h -= mod;
   d6a06:	1a9a      	subs	r2, r3, r2
   d6a08:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d6a0a:	2a07      	cmp	r2, #7
   d6a0c:	d90e      	bls.n	d6a2c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d6a0e:	2e02      	cmp	r6, #2
   d6a10:	d11d      	bne.n	d6a4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d6a12:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d6a14:	7821      	ldrb	r1, [r4, #0]
   d6a16:	43c9      	mvns	r1, r1
   d6a18:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d6a1a:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d6a1c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d6a20:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d6a22:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d6a24:	440c      	add	r4, r1
            } while(h >= 8);
   d6a26:	d8f5      	bhi.n	d6a14 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d6a28:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d6a2c:	b302      	cbz	r2, d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d6a2e:	4b13      	ldr	r3, [pc, #76]	; (d6a7c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d6a30:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d6a32:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d6a34:	d019      	beq.n	d6a6a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d6a36:	2e02      	cmp	r6, #2
   d6a38:	d01b      	beq.n	d6a72 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d6a3a:	b9ce      	cbnz	r6, d6a70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d6a3c:	7822      	ldrb	r2, [r4, #0]
   d6a3e:	ea22 0303 	bic.w	r3, r2, r3
   d6a42:	e014      	b.n	d6a6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d6a44:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6a48:	ea85 050c 	eor.w	r5, r5, ip
   d6a4c:	e7d5      	b.n	d69fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d6a4e:	2e00      	cmp	r6, #0
   d6a50:	bf14      	ite	ne
   d6a52:	25ff      	movne	r5, #255	; 0xff
   d6a54:	2500      	moveq	r5, #0
   d6a56:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d6a58:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d6a5a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6a5c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d6a60:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d6a62:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6a64:	440c      	add	r4, r1
            } while(h >= 8);
   d6a66:	d8f7      	bhi.n	d6a58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d6a68:	e7de      	b.n	d6a28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d6a6a:	7822      	ldrb	r2, [r4, #0]
   d6a6c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d6a6e:	7023      	strb	r3, [r4, #0]
}
   d6a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d6a72:	7822      	ldrb	r2, [r4, #0]
   d6a74:	4053      	eors	r3, r2
   d6a76:	e7fa      	b.n	d6a6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d6a78:	000d9710 	.word	0x000d9710
   d6a7c:	000d9718 	.word	0x000d9718

000d6a80 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6a80:	b470      	push	{r4, r5, r6}
   d6a82:	4614      	mov	r4, r2
  switch(rotation) {
   d6a84:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6a86:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d6a8a:	2a02      	cmp	r2, #2
   d6a8c:	d00d      	beq.n	d6aaa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d6a8e:	2a03      	cmp	r2, #3
   d6a90:	d018      	beq.n	d6ac4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d6a92:	2a01      	cmp	r2, #1
   d6a94:	d111      	bne.n	d6aba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d6a96:	8902      	ldrh	r2, [r0, #8]
   d6a98:	43e4      	mvns	r4, r4
   d6a9a:	4414      	add	r4, r2
   d6a9c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d6a9e:	9603      	str	r6, [sp, #12]
   d6aa0:	460a      	mov	r2, r1
   d6aa2:	4621      	mov	r1, r4
}
   d6aa4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d6aa6:	f7ff bf67 	b.w	d6978 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d6aaa:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d6aac:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d6aae:	43e4      	mvns	r4, r4
    x -= (w-1);
   d6ab0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d6ab2:	4414      	add	r4, r2
    x -= (w-1);
   d6ab4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d6ab6:	b224      	sxth	r4, r4
    x -= (w-1);
   d6ab8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d6aba:	9603      	str	r6, [sp, #12]
   d6abc:	4622      	mov	r2, r4
}
   d6abe:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d6ac0:	f7ff bf16 	b.w	d68f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d6ac4:	8945      	ldrh	r5, [r0, #10]
   d6ac6:	4419      	add	r1, r3
   d6ac8:	1a69      	subs	r1, r5, r1
   d6aca:	b209      	sxth	r1, r1
    break;
   d6acc:	e7e7      	b.n	d6a9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d6ace <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6ace:	b430      	push	{r4, r5}
   d6ad0:	4614      	mov	r4, r2
  switch(rotation) {
   d6ad2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6ad4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d6ad8:	2a02      	cmp	r2, #2
   d6ada:	d00d      	beq.n	d6af8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d6adc:	2a03      	cmp	r2, #3
   d6ade:	d018      	beq.n	d6b12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d6ae0:	2a01      	cmp	r2, #1
   d6ae2:	d111      	bne.n	d6b08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d6ae4:	18e2      	adds	r2, r4, r3
   d6ae6:	8904      	ldrh	r4, [r0, #8]
   d6ae8:	1aa4      	subs	r4, r4, r2
   d6aea:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6aec:	9502      	str	r5, [sp, #8]
   d6aee:	460a      	mov	r2, r1
   d6af0:	4621      	mov	r1, r4
}
   d6af2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6af4:	f7ff befc 	b.w	d68f0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d6af8:	8902      	ldrh	r2, [r0, #8]
   d6afa:	43c9      	mvns	r1, r1
   d6afc:	4411      	add	r1, r2
    y -= (h-1);
   d6afe:	18e2      	adds	r2, r4, r3
   d6b00:	8944      	ldrh	r4, [r0, #10]
   d6b02:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d6b04:	b209      	sxth	r1, r1
    y -= (h-1);
   d6b06:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d6b08:	9502      	str	r5, [sp, #8]
   d6b0a:	4622      	mov	r2, r4
}
   d6b0c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d6b0e:	f7ff bf33 	b.w	d6978 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d6b12:	8942      	ldrh	r2, [r0, #10]
   d6b14:	43c9      	mvns	r1, r1
   d6b16:	4411      	add	r1, r2
   d6b18:	b209      	sxth	r1, r1
    break;
   d6b1a:	e7e7      	b.n	d6aec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d6b1c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d6b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6b20:	4604      	mov	r4, r0
  TRANSACTION_START
   d6b22:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d6b24:	2800      	cmp	r0, #0
   d6b26:	d042      	beq.n	d6bae <_ZN16Adafruit_SSD13067displayEv+0x92>
   d6b28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6b2a:	f001 f8fb 	bl	d7d24 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d6b2e:	4947      	ldr	r1, [pc, #284]	; (d6c4c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d6b30:	2205      	movs	r2, #5
   d6b32:	4620      	mov	r0, r4
   d6b34:	f7ff fd29 	bl	d658a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d6b38:	7a21      	ldrb	r1, [r4, #8]
   d6b3a:	3901      	subs	r1, #1
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	b2c9      	uxtb	r1, r1
   d6b40:	f7ff fcbc 	bl	d64bc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d6b44:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d6b48:	1dde      	adds	r6, r3, #7
   d6b4a:	bf48      	it	mi
   d6b4c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d6b50:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d6b54:	8923      	ldrh	r3, [r4, #8]
   d6b56:	10f6      	asrs	r6, r6, #3
   d6b58:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d6b5c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d6b60:	2800      	cmp	r0, #0
   d6b62:	d03a      	beq.n	d6bda <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d6b64:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6b68:	f001 f8ea 	bl	d7d40 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d6b6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6b6e:	6803      	ldr	r3, [r0, #0]
   d6b70:	2140      	movs	r1, #64	; 0x40
   d6b72:	689b      	ldr	r3, [r3, #8]
   d6b74:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d6b76:	2701      	movs	r7, #1
    while(count--) {
   d6b78:	42b5      	cmp	r5, r6
   d6b7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6b7c:	d024      	beq.n	d6bc8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d6b7e:	2f1f      	cmp	r7, #31
   d6b80:	d90c      	bls.n	d6b9c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d6b82:	f001 f8e4 	bl	d7d4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d6b86:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6b8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6b8c:	f001 f8d8 	bl	d7d40 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d6b90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6b92:	6803      	ldr	r3, [r0, #0]
   d6b94:	2140      	movs	r1, #64	; 0x40
   d6b96:	689b      	ldr	r3, [r3, #8]
   d6b98:	4798      	blx	r3
        bytesOut = 1;
   d6b9a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d6b9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6b9e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ba2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d6ba4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d6ba6:	689b      	ldr	r3, [r3, #8]
   d6ba8:	4798      	blx	r3
      bytesOut++;
   d6baa:	b2ff      	uxtb	r7, r7
    while(count--) {
   d6bac:	e7e4      	b.n	d6b78 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d6bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6bb0:	b118      	cbz	r0, d6bba <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d6bb2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d6bb6:	f000 fbc3 	bl	d7340 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d6bba:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6bbe:	2100      	movs	r1, #0
   d6bc0:	b280      	uxth	r0, r0
   d6bc2:	f001 fce4 	bl	d858e <digitalWrite>
   d6bc6:	e7b2      	b.n	d6b2e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d6bc8:	f001 f8c1 	bl	d7d4e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d6bcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6bce:	b378      	cbz	r0, d6c30 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d6bd0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d6bd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6bd6:	f001 b8a5 	b.w	d7d24 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d6bda:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d6bde:	2101      	movs	r1, #1
   d6be0:	b280      	uxth	r0, r0
   d6be2:	f001 fcd4 	bl	d858e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d6be6:	42b5      	cmp	r5, r6
   d6be8:	d0f0      	beq.n	d6bcc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d6bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d6bec:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d6bf0:	b118      	cbz	r0, d6bfa <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d6bf2:	4649      	mov	r1, r9
   d6bf4:	f000 fc12 	bl	d741c <_ZN8SPIClass8transferEh>
   d6bf8:	e7f5      	b.n	d6be6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d6bfa:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6bfc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6c00:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d6c04:	ea09 0108 	and.w	r1, r9, r8
   d6c08:	b280      	uxth	r0, r0
   d6c0a:	f001 fcc0 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6c0e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6c12:	2101      	movs	r1, #1
   d6c14:	b280      	uxth	r0, r0
   d6c16:	f001 fcba 	bl	d858e <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6c1a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6c1e:	2100      	movs	r1, #0
   d6c20:	b280      	uxth	r0, r0
   d6c22:	f001 fcb4 	bl	d858e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6c26:	3f01      	subs	r7, #1
   d6c28:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6c2c:	d1e8      	bne.n	d6c00 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d6c2e:	e7da      	b.n	d6be6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d6c30:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d6c34:	2101      	movs	r1, #1
   d6c36:	b280      	uxth	r0, r0
   d6c38:	f001 fca9 	bl	d858e <digitalWrite>
   d6c3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6c3e:	b118      	cbz	r0, d6c48 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d6c40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d6c44:	f000 bb63 	b.w	d730e <_ZN8SPIClass14endTransactionEv>
}
   d6c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6c4c:	000d973c 	.word	0x000d973c

000d6c50 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d6c50:	f000 bde2 	b.w	d7818 <delay>

000d6c54 <_Z11BlynkMillisv>:
   d6c54:	f000 b880 	b.w	d6d58 <HAL_Timer_Get_Milli_Seconds>

000d6c58 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d6c58:	4770      	bx	lr

000d6c5a <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d6c5a:	4770      	bx	lr

000d6c5c <BlynkNoOpCbk>:
{}
   d6c5c:	4770      	bx	lr
	...

000d6c60 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d6c60:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d6c62:	bf5a      	itte	pl
   d6c64:	4b02      	ldrpl	r3, [pc, #8]	; (d6c70 <GetReadHandler+0x10>)
   d6c66:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6c6a:	2000      	movmi	r0, #0
#endif
}
   d6c6c:	4770      	bx	lr
   d6c6e:	bf00      	nop
   d6c70:	000d9744 	.word	0x000d9744

000d6c74 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d6c74:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d6c76:	bf5a      	itte	pl
   d6c78:	4b02      	ldrpl	r3, [pc, #8]	; (d6c84 <GetWriteHandler+0x10>)
   d6c7a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6c7e:	2000      	movmi	r0, #0
#endif
}
   d6c80:	4770      	bx	lr
   d6c82:	bf00      	nop
   d6c84:	000d9944 	.word	0x000d9944

000d6c88 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <netdb_freeaddrinfo+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	689b      	ldr	r3, [r3, #8]
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030268 	.word	0x00030268

000d6c98 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <netdb_getaddrinfo+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	68db      	ldr	r3, [r3, #12]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030268 	.word	0x00030268

000d6ca8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_Validate_Pin_Function+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	685b      	ldr	r3, [r3, #4]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	0003022c 	.word	0x0003022c

000d6cb8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <HAL_Pin_Mode+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	689b      	ldr	r3, [r3, #8]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	0003022c 	.word	0x0003022c

000d6cc8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <HAL_Get_Pin_Mode+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	68db      	ldr	r3, [r3, #12]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	0003022c 	.word	0x0003022c

000d6cd8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <HAL_GPIO_Write+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	691b      	ldr	r3, [r3, #16]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003022c 	.word	0x0003022c

000d6ce8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <HAL_GPIO_Read+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	695b      	ldr	r3, [r3, #20]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003022c 	.word	0x0003022c

000d6cf8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <HAL_DAC_Write+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	0003022c 	.word	0x0003022c

000d6d08 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <hal_adc_read+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	0003022c 	.word	0x0003022c

000d6d18 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <hal_pwm_write_ext+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003022c 	.word	0x0003022c

000d6d28 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <if_index_to_name+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	695b      	ldr	r3, [r3, #20]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003026c 	.word	0x0003026c

000d6d38 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_RNG_GetRandomNumber+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	685b      	ldr	r3, [r3, #4]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	00030218 	.word	0x00030218

000d6d48 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_Delay_Microseconds+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	68db      	ldr	r3, [r3, #12]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	00030218 	.word	0x00030218

000d6d58 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	695b      	ldr	r3, [r3, #20]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	00030218 	.word	0x00030218

000d6d68 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <os_mutex_create+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	00030248 	.word	0x00030248

000d6d78 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <os_mutex_destroy+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	00030248 	.word	0x00030248

000d6d88 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <os_mutex_lock+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030248 	.word	0x00030248

000d6d98 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <os_mutex_unlock+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030248 	.word	0x00030248

000d6da8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <os_mutex_recursive_create+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030248 	.word	0x00030248

000d6db8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <os_mutex_recursive_destroy+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030248 	.word	0x00030248

000d6dc8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <inet_inet_ntop+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	695b      	ldr	r3, [r3, #20]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030264 	.word	0x00030264

000d6dd8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <inet_htonl+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6a1b      	ldr	r3, [r3, #32]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030264 	.word	0x00030264

000d6de8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <inet_htons+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030264 	.word	0x00030264

000d6df8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <hal_usart_init+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	681b      	ldr	r3, [r3, #0]
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	0003023c 	.word	0x0003023c

000d6e08 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <hal_usart_write+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	68db      	ldr	r3, [r3, #12]
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	0003023c 	.word	0x0003023c

000d6e18 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <hal_usart_available+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	691b      	ldr	r3, [r3, #16]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	0003023c 	.word	0x0003023c

000d6e28 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <hal_usart_read+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	695b      	ldr	r3, [r3, #20]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	0003023c 	.word	0x0003023c

000d6e38 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <hal_usart_peek+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	699b      	ldr	r3, [r3, #24]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	0003023c 	.word	0x0003023c

000d6e48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <hal_usart_flush+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	69db      	ldr	r3, [r3, #28]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	0003023c 	.word	0x0003023c

000d6e58 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <hal_usart_is_enabled+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	6a1b      	ldr	r3, [r3, #32]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	0003023c 	.word	0x0003023c

000d6e68 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <hal_usart_available_data_for_write+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	0003023c 	.word	0x0003023c

000d6e78 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <hal_i2c_set_speed+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	681b      	ldr	r3, [r3, #0]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030228 	.word	0x00030228

000d6e88 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <hal_i2c_begin+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	68db      	ldr	r3, [r3, #12]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030228 	.word	0x00030228

000d6e98 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <hal_i2c_begin_transmission+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	699b      	ldr	r3, [r3, #24]
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030228 	.word	0x00030228

000d6ea8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <hal_i2c_end_transmission+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	69db      	ldr	r3, [r3, #28]
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030228 	.word	0x00030228

000d6eb8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <hal_i2c_write+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	6a1b      	ldr	r3, [r3, #32]
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030228 	.word	0x00030228

000d6ec8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <hal_i2c_available+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	00030228 	.word	0x00030228

000d6ed8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <hal_i2c_read+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	00030228 	.word	0x00030228

000d6ee8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <hal_i2c_peek+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	00030228 	.word	0x00030228

000d6ef8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <hal_i2c_flush+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	00030228 	.word	0x00030228

000d6f08 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <hal_i2c_is_enabled+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	00030228 	.word	0x00030228

000d6f18 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <hal_i2c_init+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	00030228 	.word	0x00030228

000d6f28 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <sock_setsockopt+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	699b      	ldr	r3, [r3, #24]
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	00030238 	.word	0x00030238

000d6f38 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	4b02      	ldr	r3, [pc, #8]	; (d6f44 <sock_close+0xc>)
   d6f3c:	681b      	ldr	r3, [r3, #0]
   d6f3e:	69db      	ldr	r3, [r3, #28]
   d6f40:	9301      	str	r3, [sp, #4]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	00030238 	.word	0x00030238

000d6f48 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6f48:	b508      	push	{r3, lr}
   d6f4a:	4b02      	ldr	r3, [pc, #8]	; (d6f54 <sock_connect+0xc>)
   d6f4c:	681b      	ldr	r3, [r3, #0]
   d6f4e:	6a1b      	ldr	r3, [r3, #32]
   d6f50:	9301      	str	r3, [sp, #4]
   d6f52:	bd08      	pop	{r3, pc}
   d6f54:	00030238 	.word	0x00030238

000d6f58 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <sock_recv+0xc>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	bd08      	pop	{r3, pc}
   d6f64:	00030238 	.word	0x00030238

000d6f68 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6f68:	b508      	push	{r3, lr}
   d6f6a:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <sock_send+0xc>)
   d6f6c:	681b      	ldr	r3, [r3, #0]
   d6f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f70:	9301      	str	r3, [sp, #4]
   d6f72:	bd08      	pop	{r3, pc}
   d6f74:	00030238 	.word	0x00030238

000d6f78 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6f78:	b508      	push	{r3, lr}
   d6f7a:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <sock_socket+0xc>)
   d6f7c:	681b      	ldr	r3, [r3, #0]
   d6f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6f80:	9301      	str	r3, [sp, #4]
   d6f82:	bd08      	pop	{r3, pc}
   d6f84:	00030238 	.word	0x00030238

000d6f88 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6f88:	b508      	push	{r3, lr}
   d6f8a:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <hal_spi_begin+0xc>)
   d6f8c:	681b      	ldr	r3, [r3, #0]
   d6f8e:	681b      	ldr	r3, [r3, #0]
   d6f90:	9301      	str	r3, [sp, #4]
   d6f92:	bd08      	pop	{r3, pc}
   d6f94:	00030230 	.word	0x00030230

000d6f98 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6f98:	b508      	push	{r3, lr}
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <hal_spi_transfer+0xc>)
   d6f9c:	681b      	ldr	r3, [r3, #0]
   d6f9e:	695b      	ldr	r3, [r3, #20]
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	bd08      	pop	{r3, pc}
   d6fa4:	00030230 	.word	0x00030230

000d6fa8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6fa8:	b508      	push	{r3, lr}
   d6faa:	4b02      	ldr	r3, [pc, #8]	; (d6fb4 <hal_spi_init+0xc>)
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	69db      	ldr	r3, [r3, #28]
   d6fb0:	9301      	str	r3, [sp, #4]
   d6fb2:	bd08      	pop	{r3, pc}
   d6fb4:	00030230 	.word	0x00030230

000d6fb8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6fb8:	b508      	push	{r3, lr}
   d6fba:	4b02      	ldr	r3, [pc, #8]	; (d6fc4 <hal_spi_is_enabled+0xc>)
   d6fbc:	681b      	ldr	r3, [r3, #0]
   d6fbe:	6a1b      	ldr	r3, [r3, #32]
   d6fc0:	9301      	str	r3, [sp, #4]
   d6fc2:	bd08      	pop	{r3, pc}
   d6fc4:	00030230 	.word	0x00030230

000d6fc8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6fc8:	b508      	push	{r3, lr}
   d6fca:	4b02      	ldr	r3, [pc, #8]	; (d6fd4 <hal_spi_info+0xc>)
   d6fcc:	681b      	ldr	r3, [r3, #0]
   d6fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6fd0:	9301      	str	r3, [sp, #4]
   d6fd2:	bd08      	pop	{r3, pc}
   d6fd4:	00030230 	.word	0x00030230

000d6fd8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6fd8:	b508      	push	{r3, lr}
   d6fda:	4b02      	ldr	r3, [pc, #8]	; (d6fe4 <hal_spi_set_settings+0xc>)
   d6fdc:	681b      	ldr	r3, [r3, #0]
   d6fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fe0:	9301      	str	r3, [sp, #4]
   d6fe2:	bd08      	pop	{r3, pc}
   d6fe4:	00030230 	.word	0x00030230

000d6fe8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6fe8:	b508      	push	{r3, lr}
   d6fea:	4b02      	ldr	r3, [pc, #8]	; (d6ff4 <hal_spi_acquire+0xc>)
   d6fec:	681b      	ldr	r3, [r3, #0]
   d6fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6ff0:	9301      	str	r3, [sp, #4]
   d6ff2:	bd08      	pop	{r3, pc}
   d6ff4:	00030230 	.word	0x00030230

000d6ff8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6ff8:	b508      	push	{r3, lr}
   d6ffa:	4b02      	ldr	r3, [pc, #8]	; (d7004 <hal_spi_release+0xc>)
   d6ffc:	681b      	ldr	r3, [r3, #0]
   d6ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7000:	9301      	str	r3, [sp, #4]
   d7002:	bd08      	pop	{r3, pc}
   d7004:	00030230 	.word	0x00030230

000d7008 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7008:	b508      	push	{r3, lr}
   d700a:	4b02      	ldr	r3, [pc, #8]	; (d7014 <HAL_USB_USART_Init+0xc>)
   d700c:	681b      	ldr	r3, [r3, #0]
   d700e:	681b      	ldr	r3, [r3, #0]
   d7010:	9301      	str	r3, [sp, #4]
   d7012:	bd08      	pop	{r3, pc}
   d7014:	0003024c 	.word	0x0003024c

000d7018 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7018:	b508      	push	{r3, lr}
   d701a:	4b02      	ldr	r3, [pc, #8]	; (d7024 <HAL_USB_USART_Begin+0xc>)
   d701c:	681b      	ldr	r3, [r3, #0]
   d701e:	685b      	ldr	r3, [r3, #4]
   d7020:	9301      	str	r3, [sp, #4]
   d7022:	bd08      	pop	{r3, pc}
   d7024:	0003024c 	.word	0x0003024c

000d7028 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7028:	b508      	push	{r3, lr}
   d702a:	4b02      	ldr	r3, [pc, #8]	; (d7034 <HAL_USB_USART_Available_Data+0xc>)
   d702c:	681b      	ldr	r3, [r3, #0]
   d702e:	691b      	ldr	r3, [r3, #16]
   d7030:	9301      	str	r3, [sp, #4]
   d7032:	bd08      	pop	{r3, pc}
   d7034:	0003024c 	.word	0x0003024c

000d7038 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7038:	b508      	push	{r3, lr}
   d703a:	4b02      	ldr	r3, [pc, #8]	; (d7044 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d703c:	681b      	ldr	r3, [r3, #0]
   d703e:	695b      	ldr	r3, [r3, #20]
   d7040:	9301      	str	r3, [sp, #4]
   d7042:	bd08      	pop	{r3, pc}
   d7044:	0003024c 	.word	0x0003024c

000d7048 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7048:	b508      	push	{r3, lr}
   d704a:	4b02      	ldr	r3, [pc, #8]	; (d7054 <HAL_USB_USART_Receive_Data+0xc>)
   d704c:	681b      	ldr	r3, [r3, #0]
   d704e:	699b      	ldr	r3, [r3, #24]
   d7050:	9301      	str	r3, [sp, #4]
   d7052:	bd08      	pop	{r3, pc}
   d7054:	0003024c 	.word	0x0003024c

000d7058 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7058:	b508      	push	{r3, lr}
   d705a:	4b02      	ldr	r3, [pc, #8]	; (d7064 <HAL_USB_USART_Send_Data+0xc>)
   d705c:	681b      	ldr	r3, [r3, #0]
   d705e:	69db      	ldr	r3, [r3, #28]
   d7060:	9301      	str	r3, [sp, #4]
   d7062:	bd08      	pop	{r3, pc}
   d7064:	0003024c 	.word	0x0003024c

000d7068 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7068:	b508      	push	{r3, lr}
   d706a:	4b02      	ldr	r3, [pc, #8]	; (d7074 <HAL_USB_USART_Flush_Data+0xc>)
   d706c:	681b      	ldr	r3, [r3, #0]
   d706e:	6a1b      	ldr	r3, [r3, #32]
   d7070:	9301      	str	r3, [sp, #4]
   d7072:	bd08      	pop	{r3, pc}
   d7074:	0003024c 	.word	0x0003024c

000d7078 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7078:	b508      	push	{r3, lr}
   d707a:	4b02      	ldr	r3, [pc, #8]	; (d7084 <panic_+0xc>)
   d707c:	681b      	ldr	r3, [r3, #0]
   d707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7080:	9301      	str	r3, [sp, #4]
   d7082:	bd08      	pop	{r3, pc}
   d7084:	00030260 	.word	0x00030260

000d7088 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7088:	b508      	push	{r3, lr}
   d708a:	4b02      	ldr	r3, [pc, #8]	; (d7094 <log_message+0xc>)
   d708c:	681b      	ldr	r3, [r3, #0]
   d708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7090:	9301      	str	r3, [sp, #4]
   d7092:	bd08      	pop	{r3, pc}
   d7094:	00030260 	.word	0x00030260

000d7098 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7098:	b508      	push	{r3, lr}
   d709a:	4b02      	ldr	r3, [pc, #8]	; (d70a4 <set_system_mode+0xc>)
   d709c:	681b      	ldr	r3, [r3, #0]
   d709e:	685b      	ldr	r3, [r3, #4]
   d70a0:	9301      	str	r3, [sp, #4]
   d70a2:	bd08      	pop	{r3, pc}
   d70a4:	00030220 	.word	0x00030220

000d70a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d70a8:	b508      	push	{r3, lr}
   d70aa:	4b02      	ldr	r3, [pc, #8]	; (d70b4 <system_delay_ms+0xc>)
   d70ac:	681b      	ldr	r3, [r3, #0]
   d70ae:	695b      	ldr	r3, [r3, #20]
   d70b0:	9301      	str	r3, [sp, #4]
   d70b2:	bd08      	pop	{r3, pc}
   d70b4:	00030220 	.word	0x00030220

000d70b8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d70b8:	b508      	push	{r3, lr}
   d70ba:	4b02      	ldr	r3, [pc, #8]	; (d70c4 <system_thread_set_state+0xc>)
   d70bc:	681b      	ldr	r3, [r3, #0]
   d70be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70c0:	9301      	str	r3, [sp, #4]
   d70c2:	bd08      	pop	{r3, pc}
   d70c4:	00030220 	.word	0x00030220

000d70c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d70c8:	b508      	push	{r3, lr}
   d70ca:	4b03      	ldr	r3, [pc, #12]	; (d70d8 <system_ctrl_set_app_request_handler+0x10>)
   d70cc:	681b      	ldr	r3, [r3, #0]
   d70ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d70d2:	9301      	str	r3, [sp, #4]
   d70d4:	bd08      	pop	{r3, pc}
   d70d6:	0000      	.short	0x0000
   d70d8:	00030220 	.word	0x00030220

000d70dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b03      	ldr	r3, [pc, #12]	; (d70ec <system_ctrl_set_result+0x10>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d70e6:	9301      	str	r3, [sp, #4]
   d70e8:	bd08      	pop	{r3, pc}
   d70ea:	0000      	.short	0x0000
   d70ec:	00030220 	.word	0x00030220

000d70f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d70f0:	b508      	push	{r3, lr}
   d70f2:	4b02      	ldr	r3, [pc, #8]	; (d70fc <network_connect+0xc>)
   d70f4:	681b      	ldr	r3, [r3, #0]
   d70f6:	685b      	ldr	r3, [r3, #4]
   d70f8:	9301      	str	r3, [sp, #4]
   d70fa:	bd08      	pop	{r3, pc}
   d70fc:	00030240 	.word	0x00030240

000d7100 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7100:	b508      	push	{r3, lr}
   d7102:	4b02      	ldr	r3, [pc, #8]	; (d710c <network_connecting+0xc>)
   d7104:	681b      	ldr	r3, [r3, #0]
   d7106:	689b      	ldr	r3, [r3, #8]
   d7108:	9301      	str	r3, [sp, #4]
   d710a:	bd08      	pop	{r3, pc}
   d710c:	00030240 	.word	0x00030240

000d7110 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <network_disconnect+0xc>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	68db      	ldr	r3, [r3, #12]
   d7118:	9301      	str	r3, [sp, #4]
   d711a:	bd08      	pop	{r3, pc}
   d711c:	00030240 	.word	0x00030240

000d7120 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7120:	b508      	push	{r3, lr}
   d7122:	4b02      	ldr	r3, [pc, #8]	; (d712c <network_ready+0xc>)
   d7124:	681b      	ldr	r3, [r3, #0]
   d7126:	691b      	ldr	r3, [r3, #16]
   d7128:	9301      	str	r3, [sp, #4]
   d712a:	bd08      	pop	{r3, pc}
   d712c:	00030240 	.word	0x00030240

000d7130 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7130:	b508      	push	{r3, lr}
   d7132:	4b02      	ldr	r3, [pc, #8]	; (d713c <network_on+0xc>)
   d7134:	681b      	ldr	r3, [r3, #0]
   d7136:	695b      	ldr	r3, [r3, #20]
   d7138:	9301      	str	r3, [sp, #4]
   d713a:	bd08      	pop	{r3, pc}
   d713c:	00030240 	.word	0x00030240

000d7140 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7140:	b508      	push	{r3, lr}
   d7142:	4b02      	ldr	r3, [pc, #8]	; (d714c <network_off+0xc>)
   d7144:	681b      	ldr	r3, [r3, #0]
   d7146:	699b      	ldr	r3, [r3, #24]
   d7148:	9301      	str	r3, [sp, #4]
   d714a:	bd08      	pop	{r3, pc}
   d714c:	00030240 	.word	0x00030240

000d7150 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7150:	b508      	push	{r3, lr}
   d7152:	4b02      	ldr	r3, [pc, #8]	; (d715c <network_listen+0xc>)
   d7154:	681b      	ldr	r3, [r3, #0]
   d7156:	69db      	ldr	r3, [r3, #28]
   d7158:	9301      	str	r3, [sp, #4]
   d715a:	bd08      	pop	{r3, pc}
   d715c:	00030240 	.word	0x00030240

000d7160 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7160:	b508      	push	{r3, lr}
   d7162:	4b02      	ldr	r3, [pc, #8]	; (d716c <network_listening+0xc>)
   d7164:	681b      	ldr	r3, [r3, #0]
   d7166:	6a1b      	ldr	r3, [r3, #32]
   d7168:	9301      	str	r3, [sp, #4]
   d716a:	bd08      	pop	{r3, pc}
   d716c:	00030240 	.word	0x00030240

000d7170 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7170:	b508      	push	{r3, lr}
   d7172:	4b02      	ldr	r3, [pc, #8]	; (d717c <network_set_listen_timeout+0xc>)
   d7174:	681b      	ldr	r3, [r3, #0]
   d7176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7178:	9301      	str	r3, [sp, #4]
   d717a:	bd08      	pop	{r3, pc}
   d717c:	00030240 	.word	0x00030240

000d7180 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7180:	b508      	push	{r3, lr}
   d7182:	4b02      	ldr	r3, [pc, #8]	; (d718c <network_get_listen_timeout+0xc>)
   d7184:	681b      	ldr	r3, [r3, #0]
   d7186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7188:	9301      	str	r3, [sp, #4]
   d718a:	bd08      	pop	{r3, pc}
   d718c:	00030240 	.word	0x00030240

000d7190 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7190:	b508      	push	{r3, lr}
   d7192:	4b02      	ldr	r3, [pc, #8]	; (d719c <network_is_on+0xc>)
   d7194:	681b      	ldr	r3, [r3, #0]
   d7196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7198:	9301      	str	r3, [sp, #4]
   d719a:	bd08      	pop	{r3, pc}
   d719c:	00030240 	.word	0x00030240

000d71a0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d71a0:	b508      	push	{r3, lr}
   d71a2:	4b02      	ldr	r3, [pc, #8]	; (d71ac <network_is_off+0xc>)
   d71a4:	681b      	ldr	r3, [r3, #0]
   d71a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d71a8:	9301      	str	r3, [sp, #4]
   d71aa:	bd08      	pop	{r3, pc}
   d71ac:	00030240 	.word	0x00030240

000d71b0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d71b0:	b508      	push	{r3, lr}
   d71b2:	4b02      	ldr	r3, [pc, #8]	; (d71bc <spark_process+0xc>)
   d71b4:	681b      	ldr	r3, [r3, #0]
   d71b6:	689b      	ldr	r3, [r3, #8]
   d71b8:	9301      	str	r3, [sp, #4]
   d71ba:	bd08      	pop	{r3, pc}
   d71bc:	00030244 	.word	0x00030244

000d71c0 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d71c0:	b508      	push	{r3, lr}
   d71c2:	4b02      	ldr	r3, [pc, #8]	; (d71cc <spark_deviceID+0xc>)
   d71c4:	681b      	ldr	r3, [r3, #0]
   d71c6:	69db      	ldr	r3, [r3, #28]
   d71c8:	9301      	str	r3, [sp, #4]
   d71ca:	bd08      	pop	{r3, pc}
   d71cc:	00030244 	.word	0x00030244

000d71d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d71d0:	b508      	push	{r3, lr}
   d71d2:	4b02      	ldr	r3, [pc, #8]	; (d71dc <spark_set_random_seed_from_cloud_handler+0xc>)
   d71d4:	681b      	ldr	r3, [r3, #0]
   d71d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d71d8:	9301      	str	r3, [sp, #4]
   d71da:	bd08      	pop	{r3, pc}
   d71dc:	00030244 	.word	0x00030244

000d71e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d71e0:	b508      	push	{r3, lr}
   d71e2:	4b02      	ldr	r3, [pc, #8]	; (d71ec <malloc+0xc>)
   d71e4:	681b      	ldr	r3, [r3, #0]
   d71e6:	681b      	ldr	r3, [r3, #0]
   d71e8:	9301      	str	r3, [sp, #4]
   d71ea:	bd08      	pop	{r3, pc}
   d71ec:	0003021c 	.word	0x0003021c

000d71f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d71f0:	b508      	push	{r3, lr}
   d71f2:	4b02      	ldr	r3, [pc, #8]	; (d71fc <free+0xc>)
   d71f4:	681b      	ldr	r3, [r3, #0]
   d71f6:	685b      	ldr	r3, [r3, #4]
   d71f8:	9301      	str	r3, [sp, #4]
   d71fa:	bd08      	pop	{r3, pc}
   d71fc:	0003021c 	.word	0x0003021c

000d7200 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7200:	b508      	push	{r3, lr}
   d7202:	4b02      	ldr	r3, [pc, #8]	; (d720c <realloc+0xc>)
   d7204:	681b      	ldr	r3, [r3, #0]
   d7206:	689b      	ldr	r3, [r3, #8]
   d7208:	9301      	str	r3, [sp, #4]
   d720a:	bd08      	pop	{r3, pc}
   d720c:	0003021c 	.word	0x0003021c

000d7210 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7210:	b508      	push	{r3, lr}
   d7212:	4b02      	ldr	r3, [pc, #8]	; (d721c <snprintf+0xc>)
   d7214:	681b      	ldr	r3, [r3, #0]
   d7216:	69db      	ldr	r3, [r3, #28]
   d7218:	9301      	str	r3, [sp, #4]
   d721a:	bd08      	pop	{r3, pc}
   d721c:	0003021c 	.word	0x0003021c

000d7220 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7220:	b508      	push	{r3, lr}
   d7222:	4b02      	ldr	r3, [pc, #8]	; (d722c <vsnprintf+0xc>)
   d7224:	681b      	ldr	r3, [r3, #0]
   d7226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7228:	9301      	str	r3, [sp, #4]
   d722a:	bd08      	pop	{r3, pc}
   d722c:	0003021c 	.word	0x0003021c

000d7230 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7230:	b508      	push	{r3, lr}
   d7232:	4b02      	ldr	r3, [pc, #8]	; (d723c <__errno+0xc>)
   d7234:	681b      	ldr	r3, [r3, #0]
   d7236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7238:	9301      	str	r3, [sp, #4]
   d723a:	bd08      	pop	{r3, pc}
   d723c:	0003021c 	.word	0x0003021c

000d7240 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7240:	b508      	push	{r3, lr}
   d7242:	4b02      	ldr	r3, [pc, #8]	; (d724c <newlib_impure_ptr_callback+0xc>)
   d7244:	681b      	ldr	r3, [r3, #0]
   d7246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7248:	9301      	str	r3, [sp, #4]
   d724a:	bd08      	pop	{r3, pc}
   d724c:	0003021c 	.word	0x0003021c

000d7250 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7250:	2200      	movs	r2, #0
   d7252:	6840      	ldr	r0, [r0, #4]
   d7254:	4611      	mov	r1, r2
   d7256:	f7ff bf83 	b.w	d7160 <network_listening>

000d725a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d725a:	2200      	movs	r2, #0
   d725c:	6840      	ldr	r0, [r0, #4]
   d725e:	4611      	mov	r1, r2
   d7260:	f7ff bf8e 	b.w	d7180 <network_get_listen_timeout>

000d7264 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7264:	6840      	ldr	r0, [r0, #4]
   d7266:	2200      	movs	r2, #0
   d7268:	f7ff bf82 	b.w	d7170 <network_set_listen_timeout>

000d726c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d726c:	6840      	ldr	r0, [r0, #4]
   d726e:	2200      	movs	r2, #0
   d7270:	f081 0101 	eor.w	r1, r1, #1
   d7274:	f7ff bf6c 	b.w	d7150 <network_listen>

000d7278 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7278:	2300      	movs	r3, #0
   d727a:	6840      	ldr	r0, [r0, #4]
   d727c:	461a      	mov	r2, r3
   d727e:	4619      	mov	r1, r3
   d7280:	f7ff bf5e 	b.w	d7140 <network_off>

000d7284 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7284:	2300      	movs	r3, #0
   d7286:	6840      	ldr	r0, [r0, #4]
   d7288:	461a      	mov	r2, r3
   d728a:	4619      	mov	r1, r3
   d728c:	f7ff bf50 	b.w	d7130 <network_on>

000d7290 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7290:	2200      	movs	r2, #0
   d7292:	6840      	ldr	r0, [r0, #4]
   d7294:	4611      	mov	r1, r2
   d7296:	f7ff bf43 	b.w	d7120 <network_ready>

000d729a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d729a:	2200      	movs	r2, #0
   d729c:	6840      	ldr	r0, [r0, #4]
   d729e:	4611      	mov	r1, r2
   d72a0:	f7ff bf2e 	b.w	d7100 <network_connecting>

000d72a4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72a4:	6840      	ldr	r0, [r0, #4]
   d72a6:	2200      	movs	r2, #0
   d72a8:	2102      	movs	r1, #2
   d72aa:	f7ff bf31 	b.w	d7110 <network_disconnect>

000d72ae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d72ae:	2300      	movs	r3, #0
   d72b0:	6840      	ldr	r0, [r0, #4]
   d72b2:	461a      	mov	r2, r3
   d72b4:	f7ff bf1c 	b.w	d70f0 <network_connect>

000d72b8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72b8:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d72ba:	2203      	movs	r2, #3
   d72bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d72be:	4a02      	ldr	r2, [pc, #8]	; (d72c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d72c0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d72c2:	4770      	bx	lr
   d72c4:	2003e650 	.word	0x2003e650
   d72c8:	000d9b4c 	.word	0x000d9b4c

000d72cc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d72cc:	2100      	movs	r1, #0
   d72ce:	f7ff be8b 	b.w	d6fe8 <hal_spi_acquire>

000d72d2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d72d2:	2100      	movs	r1, #0
   d72d4:	f7ff be90 	b.w	d6ff8 <hal_spi_release>

000d72d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d72d8:	b510      	push	{r4, lr}
   d72da:	4604      	mov	r4, r0
   d72dc:	4608      	mov	r0, r1
{
    _spi = spi;
   d72de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d72e0:	f7ff fe62 	bl	d6fa8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d72e4:	2300      	movs	r3, #0
   d72e6:	6063      	str	r3, [r4, #4]
}
   d72e8:	4620      	mov	r0, r4
   d72ea:	bd10      	pop	{r4, pc}

000d72ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d72ec:	b510      	push	{r4, lr}
   d72ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d72f0:	7800      	ldrb	r0, [r0, #0]
   d72f2:	f7ff ffeb 	bl	d72cc <_ZN8SPIClass4lockEv.isra.0>
   d72f6:	b948      	cbnz	r0, d730c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d72f8:	7820      	ldrb	r0, [r4, #0]
   d72fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d72fe:	f7ff fe43 	bl	d6f88 <hal_spi_begin>
        unlock();
   d7302:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7308:	f7ff bfe3 	b.w	d72d2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d730c:	bd10      	pop	{r4, pc}

000d730e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d730e:	7800      	ldrb	r0, [r0, #0]
   d7310:	f7ff bfdf 	b.w	d72d2 <_ZN8SPIClass6unlockEv.isra.0>

000d7314 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7314:	0840      	lsrs	r0, r0, #1
{
   d7316:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7318:	6018      	str	r0, [r3, #0]
   d731a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d731c:	6818      	ldr	r0, [r3, #0]
   d731e:	4288      	cmp	r0, r1
   d7320:	b2e5      	uxtb	r5, r4
   d7322:	d906      	bls.n	d7332 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7324:	3401      	adds	r4, #1
   d7326:	2c08      	cmp	r4, #8
   d7328:	d002      	beq.n	d7330 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d732a:	0840      	lsrs	r0, r0, #1
   d732c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d732e:	e7f5      	b.n	d731c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7330:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7332:	4b02      	ldr	r3, [pc, #8]	; (d733c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7334:	5d5b      	ldrb	r3, [r3, r5]
   d7336:	7013      	strb	r3, [r2, #0]
}
   d7338:	bd30      	pop	{r4, r5, pc}
   d733a:	bf00      	nop
   d733c:	000d9b80 	.word	0x000d9b80

000d7340 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7344:	4606      	mov	r6, r0
   d7346:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7348:	7800      	ldrb	r0, [r0, #0]
{
   d734a:	460c      	mov	r4, r1
    CHECK(lock());
   d734c:	f7ff ffbe 	bl	d72cc <_ZN8SPIClass4lockEv.isra.0>
   d7350:	2800      	cmp	r0, #0
   d7352:	db1b      	blt.n	d738c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7354:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7356:	2214      	movs	r2, #20
   d7358:	2100      	movs	r1, #0
   d735a:	a809      	add	r0, sp, #36	; 0x24
   d735c:	f001 fb00 	bl	d8960 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7360:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7362:	2200      	movs	r2, #0
   d7364:	a909      	add	r1, sp, #36	; 0x24
   d7366:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7368:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d736c:	f7ff fe2c 	bl	d6fc8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7370:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7374:	b113      	cbz	r3, d737c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7376:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d737a:	b155      	cbz	r5, d7392 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d737c:	2700      	movs	r7, #0
   d737e:	46b9      	mov	r9, r7
   d7380:	46b8      	mov	r8, r7
   d7382:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7384:	7923      	ldrb	r3, [r4, #4]
   d7386:	b15d      	cbz	r5, d73a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7388:	b1c3      	cbz	r3, d73bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d738a:	2000      	movs	r0, #0
}
   d738c:	b00f      	add	sp, #60	; 0x3c
   d738e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7392:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7396:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d739a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d739e:	e7f1      	b.n	d7384 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d73a0:	2b00      	cmp	r3, #0
   d73a2:	d135      	bne.n	d7410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d73a4:	68a3      	ldr	r3, [r4, #8]
   d73a6:	4543      	cmp	r3, r8
   d73a8:	d108      	bne.n	d73bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d73aa:	f88d 9020 	strb.w	r9, [sp, #32]
   d73ae:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d73b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d73b6:	89a3      	ldrh	r3, [r4, #12]
   d73b8:	429a      	cmp	r2, r3
   d73ba:	d0e6      	beq.n	d738a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d73bc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d73be:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d73c0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d73c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d73c6:	ab04      	add	r3, sp, #16
   d73c8:	f10d 020f 	add.w	r2, sp, #15
   d73cc:	f7ff ffa2 	bl	d7314 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d73d0:	7921      	ldrb	r1, [r4, #4]
   d73d2:	b985      	cbnz	r5, d73f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d73d4:	b989      	cbnz	r1, d73fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d73d6:	68a3      	ldr	r3, [r4, #8]
   d73d8:	4543      	cmp	r3, r8
   d73da:	d30e      	bcc.n	d73fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d73dc:	f88d 9020 	strb.w	r9, [sp, #32]
   d73e0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d73e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d73e8:	89a3      	ldrh	r3, [r4, #12]
   d73ea:	429a      	cmp	r2, r3
   d73ec:	d105      	bne.n	d73fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d73ee:	9b04      	ldr	r3, [sp, #16]
   d73f0:	4543      	cmp	r3, r8
   d73f2:	d102      	bne.n	d73fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d73f4:	e7c9      	b.n	d738a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d73f6:	2900      	cmp	r1, #0
   d73f8:	d1f9      	bne.n	d73ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d73fa:	2300      	movs	r3, #0
   d73fc:	9301      	str	r3, [sp, #4]
   d73fe:	7b63      	ldrb	r3, [r4, #13]
   d7400:	9300      	str	r3, [sp, #0]
   d7402:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7406:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7408:	7830      	ldrb	r0, [r6, #0]
   d740a:	f7ff fde5 	bl	d6fd8 <hal_spi_set_settings>
   d740e:	e7bc      	b.n	d738a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7410:	e9cd 5500 	strd	r5, r5, [sp]
   d7414:	462b      	mov	r3, r5
   d7416:	462a      	mov	r2, r5
   d7418:	2101      	movs	r1, #1
   d741a:	e7f5      	b.n	d7408 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d741c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d741c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d741e:	7800      	ldrb	r0, [r0, #0]
   d7420:	f7ff fdba 	bl	d6f98 <hal_spi_transfer>
}
   d7424:	b2c0      	uxtb	r0, r0
   d7426:	bd08      	pop	{r3, pc}

000d7428 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7428:	b510      	push	{r4, lr}
   d742a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d742c:	6800      	ldr	r0, [r0, #0]
   d742e:	b118      	cbz	r0, d7438 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7430:	f7ff fede 	bl	d71f0 <free>
            wakeupSource_ = nullptr;
   d7434:	2300      	movs	r3, #0
   d7436:	6023      	str	r3, [r4, #0]
        }
    }
   d7438:	bd10      	pop	{r4, pc}

000d743a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d743a:	b510      	push	{r4, lr}
   d743c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d743e:	f7ff fff3 	bl	d7428 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d7442:	4620      	mov	r0, r4
   d7444:	bd10      	pop	{r4, pc}
	...

000d7448 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7448:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d744a:	4b09      	ldr	r3, [pc, #36]	; (d7470 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d744c:	4c09      	ldr	r4, [pc, #36]	; (d7474 <_GLOBAL__sub_I_System+0x2c>)
   d744e:	2202      	movs	r2, #2
   d7450:	2000      	movs	r0, #0
   d7452:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7454:	4b08      	ldr	r3, [pc, #32]	; (d7478 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7456:	6020      	str	r0, [r4, #0]
   d7458:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d745a:	71a0      	strb	r0, [r4, #6]
   d745c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d745e:	f7ff fe1b 	bl	d7098 <set_system_mode>
SystemClass System;
   d7462:	4620      	mov	r0, r4
   d7464:	4a05      	ldr	r2, [pc, #20]	; (d747c <_GLOBAL__sub_I_System+0x34>)
   d7466:	4906      	ldr	r1, [pc, #24]	; (d7480 <_GLOBAL__sub_I_System+0x38>)
   d7468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d746c:	f001 b938 	b.w	d86e0 <__aeabi_atexit>
   d7470:	2003e664 	.word	0x2003e664
   d7474:	2003e658 	.word	0x2003e658
   d7478:	ffff0000 	.word	0xffff0000
   d747c:	2003e4a4 	.word	0x2003e4a4
   d7480:	000d743b 	.word	0x000d743b

000d7484 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d7484:	b570      	push	{r4, r5, r6, lr}
   d7486:	b086      	sub	sp, #24
   d7488:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d748a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d748c:	4668      	mov	r0, sp
   d748e:	f000 faf7 	bl	d7a80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7494:	1d34      	adds	r4, r6, #4
   d7496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7498:	682b      	ldr	r3, [r5, #0]
   d749a:	7023      	strb	r3, [r4, #0]
    }
   d749c:	4630      	mov	r0, r6
   d749e:	b006      	add	sp, #24
   d74a0:	bd70      	pop	{r4, r5, r6, pc}

000d74a2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d74a2:	b510      	push	{r4, lr}
   d74a4:	4604      	mov	r4, r0
{
	free(buffer);
   d74a6:	6800      	ldr	r0, [r0, #0]
   d74a8:	f7ff fea2 	bl	d71f0 <free>
}
   d74ac:	4620      	mov	r0, r4
   d74ae:	bd10      	pop	{r4, pc}

000d74b0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d74b0:	b510      	push	{r4, lr}
   d74b2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d74b4:	6800      	ldr	r0, [r0, #0]
   d74b6:	b108      	cbz	r0, d74bc <_ZN6String10invalidateEv+0xc>
   d74b8:	f7ff fe9a 	bl	d71f0 <free>
	buffer = NULL;
   d74bc:	2300      	movs	r3, #0
	capacity = len = 0;
   d74be:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d74c2:	6023      	str	r3, [r4, #0]
}
   d74c4:	bd10      	pop	{r4, pc}

000d74c6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d74c6:	b538      	push	{r3, r4, r5, lr}
   d74c8:	4604      	mov	r4, r0
   d74ca:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d74cc:	6800      	ldr	r0, [r0, #0]
   d74ce:	3101      	adds	r1, #1
   d74d0:	f7ff fe96 	bl	d7200 <realloc>
	if (newbuffer) {
   d74d4:	b110      	cbz	r0, d74dc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d74d6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d74da:	2001      	movs	r0, #1
	}
	return 0;
}
   d74dc:	bd38      	pop	{r3, r4, r5, pc}

000d74de <_ZN6String7reserveEj>:
{
   d74de:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d74e0:	6803      	ldr	r3, [r0, #0]
{
   d74e2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d74e4:	b123      	cbz	r3, d74f0 <_ZN6String7reserveEj+0x12>
   d74e6:	6843      	ldr	r3, [r0, #4]
   d74e8:	428b      	cmp	r3, r1
   d74ea:	d301      	bcc.n	d74f0 <_ZN6String7reserveEj+0x12>
   d74ec:	2001      	movs	r0, #1
}
   d74ee:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d74f0:	4620      	mov	r0, r4
   d74f2:	f7ff ffe8 	bl	d74c6 <_ZN6String12changeBufferEj>
   d74f6:	2800      	cmp	r0, #0
   d74f8:	d0f9      	beq.n	d74ee <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d74fa:	68a3      	ldr	r3, [r4, #8]
   d74fc:	2b00      	cmp	r3, #0
   d74fe:	d1f5      	bne.n	d74ec <_ZN6String7reserveEj+0xe>
   d7500:	6822      	ldr	r2, [r4, #0]
   d7502:	7013      	strb	r3, [r2, #0]
   d7504:	e7f2      	b.n	d74ec <_ZN6String7reserveEj+0xe>

000d7506 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7506:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7508:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d750a:	4611      	mov	r1, r2
   d750c:	9201      	str	r2, [sp, #4]
{
   d750e:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7510:	f7ff ffe5 	bl	d74de <_ZN6String7reserveEj>
   d7514:	9a01      	ldr	r2, [sp, #4]
   d7516:	b928      	cbnz	r0, d7524 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7518:	4620      	mov	r0, r4
   d751a:	f7ff ffc9 	bl	d74b0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d751e:	4620      	mov	r0, r4
   d7520:	b003      	add	sp, #12
   d7522:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7524:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7526:	4629      	mov	r1, r5
   d7528:	6820      	ldr	r0, [r4, #0]
   d752a:	f001 fa0b 	bl	d8944 <memcpy>
	buffer[len] = 0;
   d752e:	6822      	ldr	r2, [r4, #0]
   d7530:	68a3      	ldr	r3, [r4, #8]
   d7532:	2100      	movs	r1, #0
   d7534:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7536:	e7f2      	b.n	d751e <_ZN6String4copyEPKcj+0x18>

000d7538 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7538:	2300      	movs	r3, #0
String::String(const char *cstr)
   d753a:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d753c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7540:	4604      	mov	r4, r0
	len = 0;
   d7542:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7544:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7546:	b141      	cbz	r1, d755a <_ZN6StringC1EPKc+0x22>
   d7548:	4608      	mov	r0, r1
   d754a:	9101      	str	r1, [sp, #4]
   d754c:	f001 fa46 	bl	d89dc <strlen>
   d7550:	9901      	ldr	r1, [sp, #4]
   d7552:	4602      	mov	r2, r0
   d7554:	4620      	mov	r0, r4
   d7556:	f7ff ffd6 	bl	d7506 <_ZN6String4copyEPKcj>
}
   d755a:	4620      	mov	r0, r4
   d755c:	b002      	add	sp, #8
   d755e:	bd10      	pop	{r4, pc}

000d7560 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7560:	4288      	cmp	r0, r1
{
   d7562:	b510      	push	{r4, lr}
   d7564:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7566:	d005      	beq.n	d7574 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7568:	680b      	ldr	r3, [r1, #0]
   d756a:	b12b      	cbz	r3, d7578 <_ZN6StringaSERKS_+0x18>
   d756c:	688a      	ldr	r2, [r1, #8]
   d756e:	4619      	mov	r1, r3
   d7570:	f7ff ffc9 	bl	d7506 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7574:	4620      	mov	r0, r4
   d7576:	bd10      	pop	{r4, pc}
	else invalidate();
   d7578:	f7ff ff9a 	bl	d74b0 <_ZN6String10invalidateEv>
   d757c:	e7fa      	b.n	d7574 <_ZN6StringaSERKS_+0x14>

000d757e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d757e:	b510      	push	{r4, lr}
	buffer = NULL;
   d7580:	2300      	movs	r3, #0
String::String(const String &value)
   d7582:	4604      	mov	r4, r0
	capacity = 0;
   d7584:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7588:	6083      	str	r3, [r0, #8]
	flags = 0;
   d758a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d758c:	f7ff ffe8 	bl	d7560 <_ZN6StringaSERKS_>
}
   d7590:	4620      	mov	r0, r4
   d7592:	bd10      	pop	{r4, pc}

000d7594 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7594:	b513      	push	{r0, r1, r4, lr}
   d7596:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7598:	b159      	cbz	r1, d75b2 <_ZN6StringaSEPKc+0x1e>
   d759a:	4608      	mov	r0, r1
   d759c:	9101      	str	r1, [sp, #4]
   d759e:	f001 fa1d 	bl	d89dc <strlen>
   d75a2:	9901      	ldr	r1, [sp, #4]
   d75a4:	4602      	mov	r2, r0
   d75a6:	4620      	mov	r0, r4
   d75a8:	f7ff ffad 	bl	d7506 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d75ac:	4620      	mov	r0, r4
   d75ae:	b002      	add	sp, #8
   d75b0:	bd10      	pop	{r4, pc}
	else invalidate();
   d75b2:	f7ff ff7d 	bl	d74b0 <_ZN6String10invalidateEv>
   d75b6:	e7f9      	b.n	d75ac <_ZN6StringaSEPKc+0x18>

000d75b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d75b8:	b570      	push	{r4, r5, r6, lr}
   d75ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d75bc:	460e      	mov	r6, r1
   d75be:	b909      	cbnz	r1, d75c4 <_ZN6String6concatEPKcj+0xc>
   d75c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d75c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d75c4:	b16a      	cbz	r2, d75e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d75c6:	6884      	ldr	r4, [r0, #8]
   d75c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d75ca:	4621      	mov	r1, r4
   d75cc:	f7ff ff87 	bl	d74de <_ZN6String7reserveEj>
   d75d0:	2800      	cmp	r0, #0
   d75d2:	d0f5      	beq.n	d75c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d75d4:	6828      	ldr	r0, [r5, #0]
   d75d6:	68ab      	ldr	r3, [r5, #8]
   d75d8:	4631      	mov	r1, r6
   d75da:	4418      	add	r0, r3
   d75dc:	f001 f9f6 	bl	d89cc <strcpy>
	len = newlen;
   d75e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d75e2:	2001      	movs	r0, #1
   d75e4:	e7ed      	b.n	d75c2 <_ZN6String6concatEPKcj+0xa>

000d75e6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d75e6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d75e8:	688a      	ldr	r2, [r1, #8]
   d75ea:	6809      	ldr	r1, [r1, #0]
{
   d75ec:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d75ee:	f7ff ffe3 	bl	d75b8 <_ZN6String6concatEPKcj>
   d75f2:	b910      	cbnz	r0, d75fa <_ZplRK15StringSumHelperRK6String+0x14>
   d75f4:	4620      	mov	r0, r4
   d75f6:	f7ff ff5b 	bl	d74b0 <_ZN6String10invalidateEv>
	return a;
}
   d75fa:	4620      	mov	r0, r4
   d75fc:	bd10      	pop	{r4, pc}

000d75fe <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d75fe:	b513      	push	{r0, r1, r4, lr}
   d7600:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7602:	b929      	cbnz	r1, d7610 <_ZplRK15StringSumHelperPKc+0x12>
   d7604:	4620      	mov	r0, r4
   d7606:	f7ff ff53 	bl	d74b0 <_ZN6String10invalidateEv>
	return a;
}
   d760a:	4620      	mov	r0, r4
   d760c:	b002      	add	sp, #8
   d760e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7610:	4608      	mov	r0, r1
   d7612:	9101      	str	r1, [sp, #4]
   d7614:	f001 f9e2 	bl	d89dc <strlen>
   d7618:	9901      	ldr	r1, [sp, #4]
   d761a:	4602      	mov	r2, r0
   d761c:	4620      	mov	r0, r4
   d761e:	f7ff ffcb 	bl	d75b8 <_ZN6String6concatEPKcj>
   d7622:	2800      	cmp	r0, #0
   d7624:	d0ee      	beq.n	d7604 <_ZplRK15StringSumHelperPKc+0x6>
   d7626:	e7f0      	b.n	d760a <_ZplRK15StringSumHelperPKc+0xc>

000d7628 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7628:	b510      	push	{r4, lr}
   d762a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d762c:	6800      	ldr	r0, [r0, #0]
   d762e:	b108      	cbz	r0, d7634 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7630:	f7ff fbc2 	bl	d6db8 <os_mutex_recursive_destroy>
    }
   d7634:	4620      	mov	r0, r4
   d7636:	bd10      	pop	{r4, pc}

000d7638 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7638:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d763a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d763c:	4604      	mov	r4, r0
      if (_M_manager)
   d763e:	b113      	cbz	r3, d7646 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7640:	2203      	movs	r2, #3
   d7642:	4601      	mov	r1, r0
   d7644:	4798      	blx	r3
    }
   d7646:	4620      	mov	r0, r4
   d7648:	bd10      	pop	{r4, pc}
	...

000d764c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d764c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d764e:	4c06      	ldr	r4, [pc, #24]	; (d7668 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7650:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7652:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7654:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7656:	f7ff fba7 	bl	d6da8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d765a:	4620      	mov	r0, r4
   d765c:	4a03      	ldr	r2, [pc, #12]	; (d766c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d765e:	4904      	ldr	r1, [pc, #16]	; (d7670 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7664:	f001 b83c 	b.w	d86e0 <__aeabi_atexit>
   d7668:	2003e668 	.word	0x2003e668
   d766c:	2003e4a4 	.word	0x2003e4a4
   d7670:	000d7629 	.word	0x000d7629

000d7674 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7676:	4606      	mov	r6, r0
   d7678:	460d      	mov	r5, r1
  size_t n = 0;
   d767a:	188f      	adds	r7, r1, r2
   d767c:	2400      	movs	r4, #0
  while (size--) {
   d767e:	42bd      	cmp	r5, r7
   d7680:	d00c      	beq.n	d769c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7682:	6833      	ldr	r3, [r6, #0]
   d7684:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7688:	689b      	ldr	r3, [r3, #8]
   d768a:	4630      	mov	r0, r6
   d768c:	4798      	blx	r3
     if (chunk>=0)
   d768e:	1e03      	subs	r3, r0, #0
   d7690:	db01      	blt.n	d7696 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7692:	441c      	add	r4, r3
  while (size--) {
   d7694:	e7f3      	b.n	d767e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7696:	2c00      	cmp	r4, #0
   d7698:	bf08      	it	eq
   d769a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d769c:	4620      	mov	r0, r4
   d769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d76a0:	b513      	push	{r0, r1, r4, lr}
   d76a2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d76a4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d76a6:	b159      	cbz	r1, d76c0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d76a8:	9101      	str	r1, [sp, #4]
   d76aa:	f001 f997 	bl	d89dc <strlen>
   d76ae:	6823      	ldr	r3, [r4, #0]
   d76b0:	9901      	ldr	r1, [sp, #4]
   d76b2:	68db      	ldr	r3, [r3, #12]
   d76b4:	4602      	mov	r2, r0
   d76b6:	4620      	mov	r0, r4
    }
   d76b8:	b002      	add	sp, #8
   d76ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d76be:	4718      	bx	r3
    }
   d76c0:	b002      	add	sp, #8
   d76c2:	bd10      	pop	{r4, pc}

000d76c4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d76c4:	b508      	push	{r3, lr}
  return write(str);
   d76c6:	f7ff ffeb 	bl	d76a0 <_ZN5Print5writeEPKc>
}
   d76ca:	bd08      	pop	{r3, pc}

000d76cc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d76cc:	6803      	ldr	r3, [r0, #0]
   d76ce:	689b      	ldr	r3, [r3, #8]
   d76d0:	4718      	bx	r3

000d76d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d76d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d76d4:	210d      	movs	r1, #13
{
   d76d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d76d8:	f7ff fff8 	bl	d76cc <_ZN5Print5printEc>
  n += print('\n');
   d76dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d76de:	4604      	mov	r4, r0
  n += print('\n');
   d76e0:	4628      	mov	r0, r5
   d76e2:	f7ff fff3 	bl	d76cc <_ZN5Print5printEc>
  return n;
}
   d76e6:	4420      	add	r0, r4
   d76e8:	bd38      	pop	{r3, r4, r5, pc}

000d76ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d76ea:	b538      	push	{r3, r4, r5, lr}
   d76ec:	4605      	mov	r5, r0
  return write(str);
   d76ee:	f7ff ffd7 	bl	d76a0 <_ZN5Print5writeEPKc>
   d76f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d76f4:	4628      	mov	r0, r5
   d76f6:	f7ff ffec 	bl	d76d2 <_ZN5Print7printlnEv>
  return n;
}
   d76fa:	4420      	add	r0, r4
   d76fc:	bd38      	pop	{r3, r4, r5, pc}

000d76fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76fe:	b530      	push	{r4, r5, lr}
   d7700:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7702:	2300      	movs	r3, #0
   d7704:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7708:	2a01      	cmp	r2, #1
   d770a:	bf98      	it	ls
   d770c:	220a      	movls	r2, #10
   d770e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7710:	460d      	mov	r5, r1
   d7712:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7716:	fb01 5312 	mls	r3, r1, r2, r5
   d771a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d771e:	2b09      	cmp	r3, #9
   d7720:	bf94      	ite	ls
   d7722:	3330      	addls	r3, #48	; 0x30
   d7724:	3337      	addhi	r3, #55	; 0x37
   d7726:	b2db      	uxtb	r3, r3
  } while(n);
   d7728:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d772a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d772e:	d9ef      	bls.n	d7710 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7730:	4621      	mov	r1, r4
   d7732:	f7ff ffb5 	bl	d76a0 <_ZN5Print5writeEPKc>
}
   d7736:	b00b      	add	sp, #44	; 0x2c
   d7738:	bd30      	pop	{r4, r5, pc}

000d773a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d773e:	b086      	sub	sp, #24
   d7740:	af00      	add	r7, sp, #0
   d7742:	4605      	mov	r5, r0
   d7744:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7746:	1d38      	adds	r0, r7, #4
   d7748:	2114      	movs	r1, #20
{
   d774a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d774c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d774e:	f7ff fd67 	bl	d7220 <vsnprintf>

    if (n<bufsize)
   d7752:	2813      	cmp	r0, #19
   d7754:	d80e      	bhi.n	d7774 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7756:	1d39      	adds	r1, r7, #4
   d7758:	4628      	mov	r0, r5
   d775a:	f7ff ffa1 	bl	d76a0 <_ZN5Print5writeEPKc>
   d775e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7760:	b11e      	cbz	r6, d776a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7762:	4628      	mov	r0, r5
   d7764:	f7ff ffb5 	bl	d76d2 <_ZN5Print7printlnEv>
   d7768:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d776a:	4620      	mov	r0, r4
   d776c:	3718      	adds	r7, #24
   d776e:	46bd      	mov	sp, r7
   d7770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7774:	f100 0308 	add.w	r3, r0, #8
   d7778:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d777c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d777e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7782:	4622      	mov	r2, r4
   d7784:	1c41      	adds	r1, r0, #1
   d7786:	683b      	ldr	r3, [r7, #0]
   d7788:	4668      	mov	r0, sp
   d778a:	f7ff fd49 	bl	d7220 <vsnprintf>
  return write(str);
   d778e:	4669      	mov	r1, sp
   d7790:	4628      	mov	r0, r5
   d7792:	f7ff ff85 	bl	d76a0 <_ZN5Print5writeEPKc>
   d7796:	4604      	mov	r4, r0
   d7798:	46c5      	mov	sp, r8
   d779a:	e7e1      	b.n	d7760 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d779c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d779c:	b510      	push	{r4, lr}
   d779e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d77a0:	f7ff fada 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d77a4:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d77a6:	6823      	ldr	r3, [r4, #0]
   d77a8:	4620      	mov	r0, r4
   d77aa:	695b      	ldr	r3, [r3, #20]
   d77ac:	4798      	blx	r3
    if (c >= 0) return c;
   d77ae:	2800      	cmp	r0, #0
   d77b0:	da08      	bge.n	d77c4 <_ZN6Stream9timedReadEv+0x28>
   d77b2:	f7ff fad1 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d77b6:	68e3      	ldr	r3, [r4, #12]
   d77b8:	1ac0      	subs	r0, r0, r3
   d77ba:	68a3      	ldr	r3, [r4, #8]
   d77bc:	4298      	cmp	r0, r3
   d77be:	d3f2      	bcc.n	d77a6 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d77c0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d77c4:	bd10      	pop	{r4, pc}

000d77c6 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d77c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77c8:	4606      	mov	r6, r0
   d77ca:	460d      	mov	r5, r1
   d77cc:	4617      	mov	r7, r2
  size_t count = 0;
   d77ce:	2400      	movs	r4, #0
  while (count < length) {
   d77d0:	42bc      	cmp	r4, r7
   d77d2:	d007      	beq.n	d77e4 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d77d4:	4630      	mov	r0, r6
   d77d6:	f7ff ffe1 	bl	d779c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d77da:	1e03      	subs	r3, r0, #0
   d77dc:	db02      	blt.n	d77e4 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d77de:	552b      	strb	r3, [r5, r4]
    count++;
   d77e0:	3401      	adds	r4, #1
  while (count < length) {
   d77e2:	e7f5      	b.n	d77d0 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d77e4:	4620      	mov	r0, r4
   d77e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77e8 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d77e8:	2300      	movs	r3, #0
   d77ea:	6840      	ldr	r0, [r0, #4]
   d77ec:	461a      	mov	r2, r3
   d77ee:	4619      	mov	r1, r3
   d77f0:	f7ff bc9e 	b.w	d7130 <network_on>

000d77f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d77f4:	4b01      	ldr	r3, [pc, #4]	; (d77fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d77f6:	4a02      	ldr	r2, [pc, #8]	; (d7800 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d77f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d77fa:	4770      	bx	lr
   d77fc:	2003e66c 	.word	0x2003e66c
   d7800:	000d9b90 	.word	0x000d9b90

000d7804 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7804:	4b02      	ldr	r3, [pc, #8]	; (d7810 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7806:	681a      	ldr	r2, [r3, #0]
   d7808:	4b02      	ldr	r3, [pc, #8]	; (d7814 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d780a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d780c:	4770      	bx	lr
   d780e:	bf00      	nop
   d7810:	2003e43c 	.word	0x2003e43c
   d7814:	2003e670 	.word	0x2003e670

000d7818 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7818:	2100      	movs	r1, #0
   d781a:	f7ff bc45 	b.w	d70a8 <system_delay_ms>

000d781e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d781e:	b510      	push	{r4, lr}
   d7820:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7822:	f7ff ff09 	bl	d7638 <_ZNSt14_Function_baseD1Ev>
   d7826:	4620      	mov	r0, r4
   d7828:	bd10      	pop	{r4, pc}
	...

000d782c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d782c:	4803      	ldr	r0, [pc, #12]	; (d783c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d782e:	4a04      	ldr	r2, [pc, #16]	; (d7840 <_GLOBAL__sub_I_RGB+0x14>)
   d7830:	4904      	ldr	r1, [pc, #16]	; (d7844 <_GLOBAL__sub_I_RGB+0x18>)
   d7832:	2300      	movs	r3, #0
   d7834:	6083      	str	r3, [r0, #8]
   d7836:	f000 bf53 	b.w	d86e0 <__aeabi_atexit>
   d783a:	bf00      	nop
   d783c:	2003e674 	.word	0x2003e674
   d7840:	2003e4a4 	.word	0x2003e4a4
   d7844:	000d781f 	.word	0x000d781f

000d7848 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7848:	4b01      	ldr	r3, [pc, #4]	; (d7850 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d784a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d784c:	4770      	bx	lr
   d784e:	bf00      	nop
   d7850:	2003e440 	.word	0x2003e440

000d7854 <serialEventRun>:
{
   d7854:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7856:	4b0b      	ldr	r3, [pc, #44]	; (d7884 <serialEventRun+0x30>)
   d7858:	b143      	cbz	r3, d786c <serialEventRun+0x18>
   d785a:	f000 f97d 	bl	d7b58 <_Z16_fetch_usbserialv>
   d785e:	6803      	ldr	r3, [r0, #0]
   d7860:	691b      	ldr	r3, [r3, #16]
   d7862:	4798      	blx	r3
   d7864:	2800      	cmp	r0, #0
   d7866:	dd01      	ble.n	d786c <serialEventRun+0x18>
        serialEvent();
   d7868:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d786c:	4b06      	ldr	r3, [pc, #24]	; (d7888 <serialEventRun+0x34>)
   d786e:	b143      	cbz	r3, d7882 <serialEventRun+0x2e>
   d7870:	f000 f9f0 	bl	d7c54 <_Z22__fetch_global_Serial1v>
   d7874:	6803      	ldr	r3, [r0, #0]
   d7876:	691b      	ldr	r3, [r3, #16]
   d7878:	4798      	blx	r3
   d787a:	2800      	cmp	r0, #0
   d787c:	dd01      	ble.n	d7882 <serialEventRun+0x2e>
        serialEvent1();
   d787e:	f3af 8000 	nop.w
}
   d7882:	bd08      	pop	{r3, pc}
	...

000d788c <_post_loop>:
{
   d788c:	b508      	push	{r3, lr}
	serialEventRun();
   d788e:	f7ff ffe1 	bl	d7854 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7892:	f7ff fa61 	bl	d6d58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7896:	4b01      	ldr	r3, [pc, #4]	; (d789c <_post_loop+0x10>)
   d7898:	6018      	str	r0, [r3, #0]
}
   d789a:	bd08      	pop	{r3, pc}
   d789c:	2003e7d4 	.word	0x2003e7d4

000d78a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d78a0:	4802      	ldr	r0, [pc, #8]	; (d78ac <_Z33system_initialize_user_backup_ramv+0xc>)
   d78a2:	4a03      	ldr	r2, [pc, #12]	; (d78b0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d78a4:	4903      	ldr	r1, [pc, #12]	; (d78b4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d78a6:	1a12      	subs	r2, r2, r0
   d78a8:	f001 b84c 	b.w	d8944 <memcpy>
   d78ac:	2003f400 	.word	0x2003f400
   d78b0:	2003f404 	.word	0x2003f404
   d78b4:	000d9f60 	.word	0x000d9f60

000d78b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d78b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78ba:	2300      	movs	r3, #0
   d78bc:	9300      	str	r3, [sp, #0]
   d78be:	461a      	mov	r2, r3
   d78c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78c4:	f7ff fc0a 	bl	d70dc <system_ctrl_set_result>
}
   d78c8:	b003      	add	sp, #12
   d78ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d78d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d78d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d78d2:	8843      	ldrh	r3, [r0, #2]
   d78d4:	2b0a      	cmp	r3, #10
   d78d6:	d008      	beq.n	d78ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d78d8:	2b50      	cmp	r3, #80	; 0x50
   d78da:	d10b      	bne.n	d78f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d78dc:	4b09      	ldr	r3, [pc, #36]	; (d7904 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d78de:	681b      	ldr	r3, [r3, #0]
   d78e0:	b14b      	cbz	r3, d78f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d78e2:	b003      	add	sp, #12
   d78e4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d78e8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d78ea:	f7ff ffe5 	bl	d78b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d78ee:	b003      	add	sp, #12
   d78f0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78f4:	2300      	movs	r3, #0
   d78f6:	9300      	str	r3, [sp, #0]
   d78f8:	461a      	mov	r2, r3
   d78fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78fe:	f7ff fbed 	bl	d70dc <system_ctrl_set_result>
}
   d7902:	e7f4      	b.n	d78ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7904:	2003e688 	.word	0x2003e688

000d7908 <module_user_init_hook>:
{
   d7908:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d790a:	4c12      	ldr	r4, [pc, #72]	; (d7954 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d790c:	4812      	ldr	r0, [pc, #72]	; (d7958 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d790e:	4d13      	ldr	r5, [pc, #76]	; (d795c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7910:	2100      	movs	r1, #0
   d7912:	f7ff fc95 	bl	d7240 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7916:	6823      	ldr	r3, [r4, #0]
   d7918:	42ab      	cmp	r3, r5
   d791a:	4b11      	ldr	r3, [pc, #68]	; (d7960 <module_user_init_hook+0x58>)
   d791c:	bf0c      	ite	eq
   d791e:	2201      	moveq	r2, #1
   d7920:	2200      	movne	r2, #0
   d7922:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7924:	d002      	beq.n	d792c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7926:	f7ff ffbb 	bl	d78a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d792a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d792c:	f7ff fa04 	bl	d6d38 <HAL_RNG_GetRandomNumber>
   d7930:	4604      	mov	r4, r0
    srand(seed);
   d7932:	f001 f81d 	bl	d8970 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7936:	4b0b      	ldr	r3, [pc, #44]	; (d7964 <module_user_init_hook+0x5c>)
   d7938:	b113      	cbz	r3, d7940 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d793a:	4620      	mov	r0, r4
   d793c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7940:	2100      	movs	r1, #0
   d7942:	4808      	ldr	r0, [pc, #32]	; (d7964 <module_user_init_hook+0x5c>)
   d7944:	f7ff fc44 	bl	d71d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d794c:	4806      	ldr	r0, [pc, #24]	; (d7968 <module_user_init_hook+0x60>)
   d794e:	2100      	movs	r1, #0
   d7950:	f7ff bbba 	b.w	d70c8 <system_ctrl_set_app_request_handler>
   d7954:	2003f400 	.word	0x2003f400
   d7958:	000d7849 	.word	0x000d7849
   d795c:	9a271c1e 	.word	0x9a271c1e
   d7960:	2003e684 	.word	0x2003e684
   d7964:	00000000 	.word	0x00000000
   d7968:	000d78d1 	.word	0x000d78d1

000d796c <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d796c:	4770      	bx	lr

000d796e <_ZN9IPAddressD0Ev>:
   d796e:	b510      	push	{r4, lr}
   d7970:	2118      	movs	r1, #24
   d7972:	4604      	mov	r4, r0
   d7974:	f000 feb9 	bl	d86ea <_ZdlPvj>
   d7978:	4620      	mov	r0, r4
   d797a:	bd10      	pop	{r4, pc}

000d797c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d797c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d797e:	7d03      	ldrb	r3, [r0, #20]
   d7980:	2b06      	cmp	r3, #6
{
   d7982:	b08d      	sub	sp, #52	; 0x34
   d7984:	460e      	mov	r6, r1
   d7986:	f100 0704 	add.w	r7, r0, #4
   d798a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d798e:	d012      	beq.n	d79b6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7990:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7994:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7998:	220a      	movs	r2, #10
   d799a:	4630      	mov	r0, r6
   d799c:	f7ff feaf 	bl	d76fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79a0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79a2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d79a4:	d019      	beq.n	d79da <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d79a6:	2c00      	cmp	r4, #0
   d79a8:	d0f4      	beq.n	d7994 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d79aa:	212e      	movs	r1, #46	; 0x2e
   d79ac:	4630      	mov	r0, r6
   d79ae:	f7ff fe8d 	bl	d76cc <_ZN5Print5printEc>
   d79b2:	4404      	add	r4, r0
   d79b4:	e7ee      	b.n	d7994 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79b6:	232f      	movs	r3, #47	; 0x2f
   d79b8:	466a      	mov	r2, sp
   d79ba:	4639      	mov	r1, r7
   d79bc:	200a      	movs	r0, #10
		buf[0] = 0;
   d79be:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79c2:	f7ff fa01 	bl	d6dc8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d79c6:	4668      	mov	r0, sp
   d79c8:	f001 f808 	bl	d89dc <strlen>
   d79cc:	6833      	ldr	r3, [r6, #0]
   d79ce:	4602      	mov	r2, r0
   d79d0:	68db      	ldr	r3, [r3, #12]
   d79d2:	4669      	mov	r1, sp
   d79d4:	4630      	mov	r0, r6
   d79d6:	4798      	blx	r3
   d79d8:	4604      	mov	r4, r0
    }
    return n;
}
   d79da:	4620      	mov	r0, r4
   d79dc:	b00d      	add	sp, #52	; 0x34
   d79de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79e0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d79e0:	b510      	push	{r4, lr}
   d79e2:	4b05      	ldr	r3, [pc, #20]	; (d79f8 <_ZN9IPAddressC1Ev+0x18>)
   d79e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79e6:	2211      	movs	r2, #17
   d79e8:	f840 3b04 	str.w	r3, [r0], #4
   d79ec:	2100      	movs	r1, #0
   d79ee:	f000 ffb7 	bl	d8960 <memset>
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	bd10      	pop	{r4, pc}
   d79f6:	bf00      	nop
   d79f8:	000d9bb8 	.word	0x000d9bb8

000d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d79fc:	4603      	mov	r3, r0
   d79fe:	4a07      	ldr	r2, [pc, #28]	; (d7a1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a00:	b510      	push	{r4, lr}
   d7a02:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7a06:	f101 0210 	add.w	r2, r1, #16
   d7a0a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a0e:	f843 4b04 	str.w	r4, [r3], #4
   d7a12:	4291      	cmp	r1, r2
   d7a14:	d1f9      	bne.n	d7a0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a16:	780a      	ldrb	r2, [r1, #0]
   d7a18:	701a      	strb	r2, [r3, #0]
}
   d7a1a:	bd10      	pop	{r4, pc}
   d7a1c:	000d9bb8 	.word	0x000d9bb8

000d7a20 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7a20:	7d03      	ldrb	r3, [r0, #20]
   d7a22:	2b04      	cmp	r3, #4
   d7a24:	d104      	bne.n	d7a30 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7a26:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a28:	3800      	subs	r0, #0
   d7a2a:	bf18      	it	ne
   d7a2c:	2001      	movne	r0, #1
   d7a2e:	4770      	bx	lr
    } else if (version() == 6) {
   d7a30:	2b06      	cmp	r3, #6
   d7a32:	d107      	bne.n	d7a44 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a34:	6843      	ldr	r3, [r0, #4]
   d7a36:	b93b      	cbnz	r3, d7a48 <_ZNK9IPAddresscvbEv+0x28>
   d7a38:	6883      	ldr	r3, [r0, #8]
   d7a3a:	b92b      	cbnz	r3, d7a48 <_ZNK9IPAddresscvbEv+0x28>
   d7a3c:	68c3      	ldr	r3, [r0, #12]
   d7a3e:	b91b      	cbnz	r3, d7a48 <_ZNK9IPAddresscvbEv+0x28>
   d7a40:	6900      	ldr	r0, [r0, #16]
   d7a42:	e7f1      	b.n	d7a28 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7a44:	2000      	movs	r0, #0
   d7a46:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7a48:	2001      	movs	r0, #1
}
   d7a4a:	4770      	bx	lr

000d7a4c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7a4c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a4e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a52:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a56:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a5a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7a5e:	2304      	movs	r3, #4
   d7a60:	6041      	str	r1, [r0, #4]
   d7a62:	7503      	strb	r3, [r0, #20]
}
   d7a64:	bd10      	pop	{r4, pc}
	...

000d7a68 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d7a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a6a:	4d04      	ldr	r5, [pc, #16]	; (d7a7c <_ZN9IPAddressC1Ehhhh+0x14>)
   d7a6c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7a6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7a72:	9500      	str	r5, [sp, #0]
   d7a74:	f7ff ffea 	bl	d7a4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a78:	b003      	add	sp, #12
   d7a7a:	bd30      	pop	{r4, r5, pc}
   d7a7c:	000d9bb8 	.word	0x000d9bb8

000d7a80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7a80:	b513      	push	{r0, r1, r4, lr}
   d7a82:	4b05      	ldr	r3, [pc, #20]	; (d7a98 <_ZN9IPAddressC1EPKh+0x18>)
   d7a84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7a86:	78cb      	ldrb	r3, [r1, #3]
   d7a88:	9300      	str	r3, [sp, #0]
   d7a8a:	788b      	ldrb	r3, [r1, #2]
   d7a8c:	784a      	ldrb	r2, [r1, #1]
   d7a8e:	7809      	ldrb	r1, [r1, #0]
   d7a90:	f7ff ffdc 	bl	d7a4c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a94:	b002      	add	sp, #8
   d7a96:	bd10      	pop	{r4, pc}
   d7a98:	000d9bb8 	.word	0x000d9bb8

000d7a9c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a9c:	7441      	strb	r1, [r0, #17]
}
   d7a9e:	4770      	bx	lr

000d7aa0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7aa0:	4770      	bx	lr

000d7aa2 <_ZN9USBSerial4readEv>:
{
   d7aa2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7aa4:	2100      	movs	r1, #0
   d7aa6:	7c00      	ldrb	r0, [r0, #16]
   d7aa8:	f7ff face 	bl	d7048 <HAL_USB_USART_Receive_Data>
}
   d7aac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ab0:	bd08      	pop	{r3, pc}

000d7ab2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7ab2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7ab4:	2101      	movs	r1, #1
   d7ab6:	7c00      	ldrb	r0, [r0, #16]
   d7ab8:	f7ff fac6 	bl	d7048 <HAL_USB_USART_Receive_Data>
}
   d7abc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ac0:	bd08      	pop	{r3, pc}

000d7ac2 <_ZN9USBSerial17availableForWriteEv>:
{
   d7ac2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7ac4:	7c00      	ldrb	r0, [r0, #16]
   d7ac6:	f7ff fab7 	bl	d7038 <HAL_USB_USART_Available_Data_For_Write>
}
   d7aca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ace:	bd08      	pop	{r3, pc}

000d7ad0 <_ZN9USBSerial9availableEv>:
{
   d7ad0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7ad2:	7c00      	ldrb	r0, [r0, #16]
   d7ad4:	f7ff faa8 	bl	d7028 <HAL_USB_USART_Available_Data>
}
   d7ad8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7adc:	bd08      	pop	{r3, pc}

000d7ade <_ZN9USBSerial5writeEh>:
{
   d7ade:	b513      	push	{r0, r1, r4, lr}
   d7ae0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ae2:	7c00      	ldrb	r0, [r0, #16]
{
   d7ae4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ae6:	f7ff faa7 	bl	d7038 <HAL_USB_USART_Available_Data_For_Write>
   d7aea:	2800      	cmp	r0, #0
   d7aec:	9901      	ldr	r1, [sp, #4]
   d7aee:	dc01      	bgt.n	d7af4 <_ZN9USBSerial5writeEh+0x16>
   d7af0:	7c60      	ldrb	r0, [r4, #17]
   d7af2:	b120      	cbz	r0, d7afe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7af4:	7c20      	ldrb	r0, [r4, #16]
   d7af6:	f7ff faaf 	bl	d7058 <HAL_USB_USART_Send_Data>
   d7afa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7afe:	b002      	add	sp, #8
   d7b00:	bd10      	pop	{r4, pc}

000d7b02 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7b02:	7c00      	ldrb	r0, [r0, #16]
   d7b04:	f7ff bab0 	b.w	d7068 <HAL_USB_USART_Flush_Data>

000d7b08 <_ZN9USBSerialD0Ev>:
   d7b08:	b510      	push	{r4, lr}
   d7b0a:	2114      	movs	r1, #20
   d7b0c:	4604      	mov	r4, r0
   d7b0e:	f000 fdec 	bl	d86ea <_ZdlPvj>
   d7b12:	4620      	mov	r0, r4
   d7b14:	bd10      	pop	{r4, pc}
	...

000d7b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7b18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7b1e:	4604      	mov	r4, r0
   d7b20:	4608      	mov	r0, r1
   d7b22:	2100      	movs	r1, #0
   d7b24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7b28:	4b04      	ldr	r3, [pc, #16]	; (d7b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7b2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7b2c:	2301      	movs	r3, #1
  _serial = serial;
   d7b2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7b30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7b32:	4611      	mov	r1, r2
   d7b34:	f7ff fa68 	bl	d7008 <HAL_USB_USART_Init>
}
   d7b38:	4620      	mov	r0, r4
   d7b3a:	bd10      	pop	{r4, pc}
   d7b3c:	000d9bcc 	.word	0x000d9bcc

000d7b40 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7b40:	7c00      	ldrb	r0, [r0, #16]
   d7b42:	2200      	movs	r2, #0
   d7b44:	f7ff ba68 	b.w	d7018 <HAL_USB_USART_Begin>

000d7b48 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7b4a:	2214      	movs	r2, #20
{
   d7b4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7b4e:	2100      	movs	r1, #0
   d7b50:	f000 ff06 	bl	d8960 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7b54:	4620      	mov	r0, r4
   d7b56:	bd10      	pop	{r4, pc}

000d7b58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7b58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b5a:	4c10      	ldr	r4, [pc, #64]	; (d7b9c <_Z16_fetch_usbserialv+0x44>)
{
   d7b5c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7b5e:	a803      	add	r0, sp, #12
   d7b60:	f7ff fff2 	bl	d7b48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b64:	7821      	ldrb	r1, [r4, #0]
   d7b66:	f3bf 8f5b 	dmb	ish
   d7b6a:	f011 0101 	ands.w	r1, r1, #1
   d7b6e:	d111      	bne.n	d7b94 <_Z16_fetch_usbserialv+0x3c>
   d7b70:	4620      	mov	r0, r4
   d7b72:	9101      	str	r1, [sp, #4]
   d7b74:	f7fc faa0 	bl	d40b8 <__cxa_guard_acquire>
   d7b78:	9901      	ldr	r1, [sp, #4]
   d7b7a:	b158      	cbz	r0, d7b94 <_Z16_fetch_usbserialv+0x3c>
   d7b7c:	aa03      	add	r2, sp, #12
   d7b7e:	4808      	ldr	r0, [pc, #32]	; (d7ba0 <_Z16_fetch_usbserialv+0x48>)
   d7b80:	f7ff ffca 	bl	d7b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7b84:	4620      	mov	r0, r4
   d7b86:	f7fc fa9c 	bl	d40c2 <__cxa_guard_release>
   d7b8a:	4a06      	ldr	r2, [pc, #24]	; (d7ba4 <_Z16_fetch_usbserialv+0x4c>)
   d7b8c:	4906      	ldr	r1, [pc, #24]	; (d7ba8 <_Z16_fetch_usbserialv+0x50>)
   d7b8e:	4804      	ldr	r0, [pc, #16]	; (d7ba0 <_Z16_fetch_usbserialv+0x48>)
   d7b90:	f000 fda6 	bl	d86e0 <__aeabi_atexit>
	return _usbserial;
}
   d7b94:	4802      	ldr	r0, [pc, #8]	; (d7ba0 <_Z16_fetch_usbserialv+0x48>)
   d7b96:	b008      	add	sp, #32
   d7b98:	bd10      	pop	{r4, pc}
   d7b9a:	bf00      	nop
   d7b9c:	2003e68c 	.word	0x2003e68c
   d7ba0:	2003e690 	.word	0x2003e690
   d7ba4:	2003e4a4 	.word	0x2003e4a4
   d7ba8:	000d7aa1 	.word	0x000d7aa1

000d7bac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7bac:	4770      	bx	lr

000d7bae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7bae:	7441      	strb	r1, [r0, #17]
}
   d7bb0:	4770      	bx	lr

000d7bb2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7bb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7bb4:	7c00      	ldrb	r0, [r0, #16]
   d7bb6:	f7ff f957 	bl	d6e68 <hal_usart_available_data_for_write>
}
   d7bba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bbe:	bd08      	pop	{r3, pc}

000d7bc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7bc0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7bc2:	7c00      	ldrb	r0, [r0, #16]
   d7bc4:	f7ff f928 	bl	d6e18 <hal_usart_available>
}
   d7bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7bcc:	bd08      	pop	{r3, pc}

000d7bce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7bce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7bd0:	7c00      	ldrb	r0, [r0, #16]
   d7bd2:	f7ff f931 	bl	d6e38 <hal_usart_peek>
}
   d7bd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7bda:	bd08      	pop	{r3, pc}

000d7bdc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7bdc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7bde:	7c00      	ldrb	r0, [r0, #16]
   d7be0:	f7ff f922 	bl	d6e28 <hal_usart_read>
}
   d7be4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7be8:	bd08      	pop	{r3, pc}

000d7bea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7bea:	7c00      	ldrb	r0, [r0, #16]
   d7bec:	f7ff b92c 	b.w	d6e48 <hal_usart_flush>

000d7bf0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7bf2:	7c45      	ldrb	r5, [r0, #17]
{
   d7bf4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7bf6:	b12d      	cbz	r5, d7c04 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7bf8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7bfa:	b003      	add	sp, #12
   d7bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7c00:	f7ff b902 	b.w	d6e08 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c04:	7c00      	ldrb	r0, [r0, #16]
   d7c06:	9101      	str	r1, [sp, #4]
   d7c08:	f7ff f92e 	bl	d6e68 <hal_usart_available_data_for_write>
   d7c0c:	2800      	cmp	r0, #0
   d7c0e:	9901      	ldr	r1, [sp, #4]
   d7c10:	dcf2      	bgt.n	d7bf8 <_ZN11USARTSerial5writeEh+0x8>
}
   d7c12:	4628      	mov	r0, r5
   d7c14:	b003      	add	sp, #12
   d7c16:	bd30      	pop	{r4, r5, pc}

000d7c18 <_ZN11USARTSerialD0Ev>:
   d7c18:	b510      	push	{r4, lr}
   d7c1a:	2114      	movs	r1, #20
   d7c1c:	4604      	mov	r4, r0
   d7c1e:	f000 fd64 	bl	d86ea <_ZdlPvj>
   d7c22:	4620      	mov	r0, r4
   d7c24:	bd10      	pop	{r4, pc}
	...

000d7c28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7c28:	b510      	push	{r4, lr}
   d7c2a:	f04f 0c00 	mov.w	ip, #0
   d7c2e:	4604      	mov	r4, r0
   d7c30:	4608      	mov	r0, r1
   d7c32:	4611      	mov	r1, r2
   d7c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c38:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7c3c:	4a04      	ldr	r2, [pc, #16]	; (d7c50 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7c3e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7c40:	2201      	movs	r2, #1
  _serial = serial;
   d7c42:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7c44:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7c46:	461a      	mov	r2, r3
   d7c48:	f7ff f8d6 	bl	d6df8 <hal_usart_init>
}
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	bd10      	pop	{r4, pc}
   d7c50:	000d9bfc 	.word	0x000d9bfc

000d7c54 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c54:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7c56:	4c0e      	ldr	r4, [pc, #56]	; (d7c90 <_Z22__fetch_global_Serial1v+0x3c>)
   d7c58:	7821      	ldrb	r1, [r4, #0]
   d7c5a:	f3bf 8f5b 	dmb	ish
   d7c5e:	f011 0101 	ands.w	r1, r1, #1
   d7c62:	d112      	bne.n	d7c8a <_Z22__fetch_global_Serial1v+0x36>
   d7c64:	4620      	mov	r0, r4
   d7c66:	9101      	str	r1, [sp, #4]
   d7c68:	f7fc fa26 	bl	d40b8 <__cxa_guard_acquire>
   d7c6c:	9901      	ldr	r1, [sp, #4]
   d7c6e:	b160      	cbz	r0, d7c8a <_Z22__fetch_global_Serial1v+0x36>
   d7c70:	4a08      	ldr	r2, [pc, #32]	; (d7c94 <_Z22__fetch_global_Serial1v+0x40>)
   d7c72:	4b09      	ldr	r3, [pc, #36]	; (d7c98 <_Z22__fetch_global_Serial1v+0x44>)
   d7c74:	4809      	ldr	r0, [pc, #36]	; (d7c9c <_Z22__fetch_global_Serial1v+0x48>)
   d7c76:	f7ff ffd7 	bl	d7c28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	f7fc fa21 	bl	d40c2 <__cxa_guard_release>
   d7c80:	4a07      	ldr	r2, [pc, #28]	; (d7ca0 <_Z22__fetch_global_Serial1v+0x4c>)
   d7c82:	4908      	ldr	r1, [pc, #32]	; (d7ca4 <_Z22__fetch_global_Serial1v+0x50>)
   d7c84:	4805      	ldr	r0, [pc, #20]	; (d7c9c <_Z22__fetch_global_Serial1v+0x48>)
   d7c86:	f000 fd2b 	bl	d86e0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7c8a:	4804      	ldr	r0, [pc, #16]	; (d7c9c <_Z22__fetch_global_Serial1v+0x48>)
   d7c8c:	b002      	add	sp, #8
   d7c8e:	bd10      	pop	{r4, pc}
   d7c90:	2003e6a4 	.word	0x2003e6a4
   d7c94:	2003e6a8 	.word	0x2003e6a8
   d7c98:	2003e72c 	.word	0x2003e72c
   d7c9c:	2003e7b0 	.word	0x2003e7b0
   d7ca0:	2003e4a4 	.word	0x2003e4a4
   d7ca4:	000d7bad 	.word	0x000d7bad

000d7ca8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7ca8:	4770      	bx	lr

000d7caa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cac:	4606      	mov	r6, r0
   d7cae:	4615      	mov	r5, r2
   d7cb0:	460c      	mov	r4, r1
   d7cb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7cb4:	42bc      	cmp	r4, r7
   d7cb6:	d006      	beq.n	d7cc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7cb8:	6833      	ldr	r3, [r6, #0]
   d7cba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7cbe:	689b      	ldr	r3, [r3, #8]
   d7cc0:	4630      	mov	r0, r6
   d7cc2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7cc4:	e7f6      	b.n	d7cb4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7cca:	7c00      	ldrb	r0, [r0, #16]
   d7ccc:	2200      	movs	r2, #0
   d7cce:	f7ff b8f3 	b.w	d6eb8 <hal_i2c_write>

000d7cd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7cd2:	7c00      	ldrb	r0, [r0, #16]
   d7cd4:	2100      	movs	r1, #0
   d7cd6:	f7ff b8f7 	b.w	d6ec8 <hal_i2c_available>

000d7cda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7cda:	7c00      	ldrb	r0, [r0, #16]
   d7cdc:	2100      	movs	r1, #0
   d7cde:	f7ff b8fb 	b.w	d6ed8 <hal_i2c_read>

000d7ce2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7ce2:	7c00      	ldrb	r0, [r0, #16]
   d7ce4:	2100      	movs	r1, #0
   d7ce6:	f7ff b8ff 	b.w	d6ee8 <hal_i2c_peek>

000d7cea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7cea:	7c00      	ldrb	r0, [r0, #16]
   d7cec:	2100      	movs	r1, #0
   d7cee:	f7ff b903 	b.w	d6ef8 <hal_i2c_flush>

000d7cf2 <_ZN7TwoWireD0Ev>:
   d7cf2:	b510      	push	{r4, lr}
   d7cf4:	2114      	movs	r1, #20
   d7cf6:	4604      	mov	r4, r0
   d7cf8:	f000 fcf7 	bl	d86ea <_ZdlPvj>
   d7cfc:	4620      	mov	r0, r4
   d7cfe:	bd10      	pop	{r4, pc}

000d7d00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7d00:	b510      	push	{r4, lr}
   d7d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d06:	4604      	mov	r4, r0
   d7d08:	4608      	mov	r0, r1
   d7d0a:	2100      	movs	r1, #0
   d7d0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7d10:	4b03      	ldr	r3, [pc, #12]	; (d7d20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7d12:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7d14:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7d16:	4611      	mov	r1, r2
   d7d18:	f7ff f8fe 	bl	d6f18 <hal_i2c_init>
}
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	bd10      	pop	{r4, pc}
   d7d20:	000d9c2c 	.word	0x000d9c2c

000d7d24 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7d24:	7c00      	ldrb	r0, [r0, #16]
   d7d26:	2200      	movs	r2, #0
   d7d28:	f7ff b8a6 	b.w	d6e78 <hal_i2c_set_speed>

000d7d2c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7d2c:	2300      	movs	r3, #0
   d7d2e:	7c00      	ldrb	r0, [r0, #16]
   d7d30:	461a      	mov	r2, r3
   d7d32:	4619      	mov	r1, r3
   d7d34:	f7ff b8a8 	b.w	d6e88 <hal_i2c_begin>

000d7d38 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7d38:	7c00      	ldrb	r0, [r0, #16]
   d7d3a:	2200      	movs	r2, #0
   d7d3c:	f7ff b8ac 	b.w	d6e98 <hal_i2c_begin_transmission>

000d7d40 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7d40:	b2c9      	uxtb	r1, r1
   d7d42:	f7ff bff9 	b.w	d7d38 <_ZN7TwoWire17beginTransmissionEh>

000d7d46 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7d46:	7c00      	ldrb	r0, [r0, #16]
   d7d48:	2200      	movs	r2, #0
   d7d4a:	f7ff b8ad 	b.w	d6ea8 <hal_i2c_end_transmission>

000d7d4e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7d4e:	2101      	movs	r1, #1
   d7d50:	f7ff bff9 	b.w	d7d46 <_ZN7TwoWire15endTransmissionEh>

000d7d54 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7d54:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7d56:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7d58:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7d5c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7d5e:	2201      	movs	r2, #1
   d7d60:	f04f 33ff 	mov.w	r3, #4294967295
   d7d64:	f10d 0107 	add.w	r1, sp, #7
   d7d68:	47a0      	blx	r4
}
   d7d6a:	b002      	add	sp, #8
   d7d6c:	bd10      	pop	{r4, pc}

000d7d6e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7d6e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7d70:	6803      	ldr	r3, [r0, #0]
   d7d72:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7d74:	f04f 33ff 	mov.w	r3, #4294967295
   d7d78:	46a4      	mov	ip, r4
}
   d7d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7d7e:	4760      	bx	ip

000d7d80 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7d80:	b513      	push	{r0, r1, r4, lr}
   d7d82:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7d84:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7d86:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7d8a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7d8c:	f10d 0107 	add.w	r1, sp, #7
   d7d90:	2201      	movs	r2, #1
   d7d92:	47a0      	blx	r4
}
   d7d94:	b002      	add	sp, #8
   d7d96:	bd10      	pop	{r4, pc}

000d7d98 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7d98:	4770      	bx	lr

000d7d9a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7d9a:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7d9c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7d9e:	681a      	ldr	r2, [r3, #0]
   d7da0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7da2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7da4:	da10      	bge.n	d7dc8 <_ZN9TCPClient9connectedEv+0x2e>
   d7da6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7daa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7dae:	429a      	cmp	r2, r3
   d7db0:	d10a      	bne.n	d7dc8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7db2:	6803      	ldr	r3, [r0, #0]
   d7db4:	691b      	ldr	r3, [r3, #16]
   d7db6:	4798      	blx	r3
        if (!rv) {
   d7db8:	4604      	mov	r4, r0
   d7dba:	b928      	cbnz	r0, d7dc8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7dbc:	682b      	ldr	r3, [r5, #0]
   d7dbe:	4628      	mov	r0, r5
   d7dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7dc2:	4798      	blx	r3
        rv = available();
   d7dc4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7dc6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7dc8:	2001      	movs	r0, #1
   d7dca:	e7fc      	b.n	d7dc6 <_ZN9TCPClient9connectedEv+0x2c>

000d7dcc <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7dcc:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7dce:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7dd0:	43c0      	mvns	r0, r0
   d7dd2:	0fc0      	lsrs	r0, r0, #31
   d7dd4:	4770      	bx	lr

000d7dd6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7dd6:	4770      	bx	lr

000d7dd8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7dd8:	4b06      	ldr	r3, [pc, #24]	; (d7df4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7dda:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7ddc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7dde:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7de2:	d005      	beq.n	d7df0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7de4:	4608      	mov	r0, r1
   d7de6:	f000 fc85 	bl	d86f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7dea:	2800      	cmp	r0, #0
	return nullptr;
   d7dec:	bf08      	it	eq
   d7dee:	2400      	moveq	r4, #0
      }
   d7df0:	4620      	mov	r0, r4
   d7df2:	bd10      	pop	{r4, pc}
   d7df4:	000d9b88 	.word	0x000d9b88

000d7df8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7df8:	b510      	push	{r4, lr}
   d7dfa:	21ac      	movs	r1, #172	; 0xac
   d7dfc:	4604      	mov	r4, r0
   d7dfe:	f000 fc74 	bl	d86ea <_ZdlPvj>
   d7e02:	4620      	mov	r0, r4
   d7e04:	bd10      	pop	{r4, pc}

000d7e06 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7e06:	f7fc b948 	b.w	d409a <_ZdlPv>

000d7e0a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7e0e:	f04f 0800 	mov.w	r8, #0
   d7e12:	b086      	sub	sp, #24
   d7e14:	461d      	mov	r5, r3
   d7e16:	f8c0 8004 	str.w	r8, [r0, #4]
   d7e1a:	4604      	mov	r4, r0
   d7e1c:	460e      	mov	r6, r1
   d7e1e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7e20:	4641      	mov	r1, r8
   d7e22:	2210      	movs	r2, #16
   d7e24:	a802      	add	r0, sp, #8
   d7e26:	f000 fd9b 	bl	d8960 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7e2a:	1c6b      	adds	r3, r5, #1
   d7e2c:	d009      	beq.n	d7e42 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7e32:	fbb5 f3f0 	udiv	r3, r5, r0
   d7e36:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7e3a:	fb00 5313 	mls	r3, r0, r3, r5
   d7e3e:	4358      	muls	r0, r3
   d7e40:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7e42:	6960      	ldr	r0, [r4, #20]
   d7e44:	2310      	movs	r3, #16
   d7e46:	9300      	str	r3, [sp, #0]
   d7e48:	6800      	ldr	r0, [r0, #0]
   d7e4a:	ab02      	add	r3, sp, #8
   d7e4c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7e50:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e54:	f7ff f868 	bl	d6f28 <sock_setsockopt>
    if (ret < 0) {
   d7e58:	2800      	cmp	r0, #0
   d7e5a:	da07      	bge.n	d7e6c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7e5c:	f7ff f9e8 	bl	d7230 <__errno>
   d7e60:	6803      	ldr	r3, [r0, #0]
   d7e62:	6063      	str	r3, [r4, #4]
        return 0;
   d7e64:	2000      	movs	r0, #0
}
   d7e66:	b006      	add	sp, #24
   d7e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7e6c:	6960      	ldr	r0, [r4, #20]
   d7e6e:	2300      	movs	r3, #0
   d7e70:	6800      	ldr	r0, [r0, #0]
   d7e72:	463a      	mov	r2, r7
   d7e74:	4631      	mov	r1, r6
   d7e76:	f7ff f877 	bl	d6f68 <sock_send>
    if (ret < 0) {
   d7e7a:	1e03      	subs	r3, r0, #0
   d7e7c:	dbee      	blt.n	d7e5c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7e7e:	4618      	mov	r0, r3
   d7e80:	e7f1      	b.n	d7e66 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7e84 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7e84:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7e86:	6984      	ldr	r4, [r0, #24]
   d7e88:	4b0a      	ldr	r3, [pc, #40]	; (d7eb4 <_ZN9TCPClientD1Ev+0x30>)
   d7e8a:	6003      	str	r3, [r0, #0]
   d7e8c:	4605      	mov	r5, r0
   d7e8e:	b17c      	cbz	r4, d7eb0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7e90:	6863      	ldr	r3, [r4, #4]
   d7e92:	3b01      	subs	r3, #1
   d7e94:	6063      	str	r3, [r4, #4]
   d7e96:	b95b      	cbnz	r3, d7eb0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7e98:	6823      	ldr	r3, [r4, #0]
   d7e9a:	4620      	mov	r0, r4
   d7e9c:	689b      	ldr	r3, [r3, #8]
   d7e9e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7ea0:	68a3      	ldr	r3, [r4, #8]
   d7ea2:	3b01      	subs	r3, #1
   d7ea4:	60a3      	str	r3, [r4, #8]
   d7ea6:	b91b      	cbnz	r3, d7eb0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7ea8:	6823      	ldr	r3, [r4, #0]
   d7eaa:	4620      	mov	r0, r4
   d7eac:	68db      	ldr	r3, [r3, #12]
   d7eae:	4798      	blx	r3
   d7eb0:	4628      	mov	r0, r5
   d7eb2:	bd38      	pop	{r3, r4, r5, pc}
   d7eb4:	000d9c88 	.word	0x000d9c88

000d7eb8 <_ZN9TCPClientD0Ev>:
   d7eb8:	b510      	push	{r4, lr}
   d7eba:	4604      	mov	r4, r0
   d7ebc:	f7ff ffe2 	bl	d7e84 <_ZN9TCPClientD1Ev>
   d7ec0:	4620      	mov	r0, r4
   d7ec2:	211c      	movs	r1, #28
   d7ec4:	f000 fc11 	bl	d86ea <_ZdlPvj>
   d7ec8:	4620      	mov	r0, r4
   d7eca:	bd10      	pop	{r4, pc}

000d7ecc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7ecc:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7ece:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7ed0:	4b05      	ldr	r3, [pc, #20]	; (d7ee8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7ed2:	4604      	mov	r4, r0
   d7ed4:	358c      	adds	r5, #140	; 0x8c
   d7ed6:	f844 3b04 	str.w	r3, [r4], #4
   d7eda:	4606      	mov	r6, r0
   d7edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ee0:	682b      	ldr	r3, [r5, #0]
   d7ee2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7ee4:	4630      	mov	r0, r6
   d7ee6:	bd70      	pop	{r4, r5, r6, pc}
   d7ee8:	000d9bb8 	.word	0x000d9bb8

000d7eec <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7eec:	b510      	push	{r4, lr}
   d7eee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7ef0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ef4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ef8:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7efa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7efc:	d005      	beq.n	d7f0a <_ZN9TCPClient4peekEv+0x1e>
   d7efe:	6963      	ldr	r3, [r4, #20]
   d7f00:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7f04:	4413      	add	r3, r2
   d7f06:	7918      	ldrb	r0, [r3, #4]
}
   d7f08:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7f0a:	6803      	ldr	r3, [r0, #0]
   d7f0c:	691b      	ldr	r3, [r3, #16]
   d7f0e:	4798      	blx	r3
   d7f10:	2800      	cmp	r0, #0
   d7f12:	d1f4      	bne.n	d7efe <_ZN9TCPClient4peekEv+0x12>
   d7f14:	f04f 30ff 	mov.w	r0, #4294967295
   d7f18:	e7f6      	b.n	d7f08 <_ZN9TCPClient4peekEv+0x1c>

000d7f1a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7f1a:	b510      	push	{r4, lr}
   d7f1c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7f1e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7f22:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7f26:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7f28:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7f2a:	d008      	beq.n	d7f3e <_ZN9TCPClient4readEv+0x24>
   d7f2c:	6963      	ldr	r3, [r4, #20]
   d7f2e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7f32:	1c51      	adds	r1, r2, #1
   d7f34:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7f38:	4413      	add	r3, r2
   d7f3a:	7918      	ldrb	r0, [r3, #4]
}
   d7f3c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7f3e:	6803      	ldr	r3, [r0, #0]
   d7f40:	691b      	ldr	r3, [r3, #16]
   d7f42:	4798      	blx	r3
   d7f44:	2800      	cmp	r0, #0
   d7f46:	d1f1      	bne.n	d7f2c <_ZN9TCPClient4readEv+0x12>
   d7f48:	f04f 30ff 	mov.w	r0, #4294967295
   d7f4c:	e7f6      	b.n	d7f3c <_ZN9TCPClient4readEv+0x22>

000d7f4e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f50:	6943      	ldr	r3, [r0, #20]
   d7f52:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7f54:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7f58:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7f5c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7f5e:	4605      	mov	r5, r0
   d7f60:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7f62:	d016      	beq.n	d7f92 <_ZN9TCPClient4readEPhj+0x44>
   d7f64:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7f66:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7f6a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7f6e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7f70:	42bc      	cmp	r4, r7
   d7f72:	bf28      	it	cs
   d7f74:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7f76:	3304      	adds	r3, #4
   d7f78:	4622      	mov	r2, r4
   d7f7a:	4419      	add	r1, r3
   d7f7c:	4630      	mov	r0, r6
   d7f7e:	f000 fce1 	bl	d8944 <memcpy>
   d7f82:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7f84:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7f88:	4423      	add	r3, r4
   d7f8a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7f8e:	4620      	mov	r0, r4
   d7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7f92:	6803      	ldr	r3, [r0, #0]
   d7f94:	691b      	ldr	r3, [r3, #16]
   d7f96:	4798      	blx	r3
   d7f98:	2800      	cmp	r0, #0
   d7f9a:	d1e3      	bne.n	d7f64 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7f9c:	f04f 34ff 	mov.w	r4, #4294967295
   d7fa0:	e7f5      	b.n	d7f8e <_ZN9TCPClient4readEPhj+0x40>

000d7fa2 <_ZN9TCPClient12flush_bufferEv>:
   d7fa2:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7fa4:	2300      	movs	r3, #0
   d7fa6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7faa:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7fac:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7fb0:	4770      	bx	lr

000d7fb2 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7fb6:	461f      	mov	r7, r3
    stop();
   d7fb8:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7fba:	460c      	mov	r4, r1
    stop();
   d7fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7fbe:	b08a      	sub	sp, #40	; 0x28
   d7fc0:	4605      	mov	r5, r0
   d7fc2:	4616      	mov	r6, r2
    stop();
   d7fc4:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7fc6:	7d23      	ldrb	r3, [r4, #20]
   d7fc8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7fcc:	2b04      	cmp	r3, #4
   d7fce:	bf0c      	ite	eq
   d7fd0:	2002      	moveq	r0, #2
   d7fd2:	200a      	movne	r0, #10
   d7fd4:	2206      	movs	r2, #6
   d7fd6:	2101      	movs	r1, #1
   d7fd8:	f7fe ffce 	bl	d6f78 <sock_socket>
   d7fdc:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7fe0:	696b      	ldr	r3, [r5, #20]
   d7fe2:	681b      	ldr	r3, [r3, #0]
   d7fe4:	2b00      	cmp	r3, #0
   d7fe6:	da08      	bge.n	d7ffa <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7fe8:	682b      	ldr	r3, [r5, #0]
   d7fea:	4628      	mov	r0, r5
   d7fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7fee:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7ff0:	4798      	blx	r3
}
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	b00a      	add	sp, #40	; 0x28
   d7ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7ffa:	4628      	mov	r0, r5
   d7ffc:	f7ff ffd1 	bl	d7fa2 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8000:	b1b7      	cbz	r7, d8030 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8002:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8004:	a903      	add	r1, sp, #12
   d8006:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8008:	9303      	str	r3, [sp, #12]
   d800a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d800e:	f7fe fe8b 	bl	d6d28 <if_index_to_name>
   d8012:	2800      	cmp	r0, #0
   d8014:	d1e8      	bne.n	d7fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8016:	6968      	ldr	r0, [r5, #20]
   d8018:	2306      	movs	r3, #6
   d801a:	9300      	str	r3, [sp, #0]
   d801c:	6800      	ldr	r0, [r0, #0]
   d801e:	ab03      	add	r3, sp, #12
   d8020:	f241 020b 	movw	r2, #4107	; 0x100b
   d8024:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8028:	f7fe ff7e 	bl	d6f28 <sock_setsockopt>
   d802c:	2800      	cmp	r0, #0
   d802e:	d1db      	bne.n	d7fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8030:	221c      	movs	r2, #28
   d8032:	2100      	movs	r1, #0
   d8034:	a803      	add	r0, sp, #12
   d8036:	f000 fc93 	bl	d8960 <memset>
    if (ip.version() == 4) {
   d803a:	7d23      	ldrb	r3, [r4, #20]
   d803c:	2b04      	cmp	r3, #4
   d803e:	d11d      	bne.n	d807c <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8040:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8044:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8046:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d804a:	f7fe fecd 	bl	d6de8 <inet_htons>
   d804e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8052:	6860      	ldr	r0, [r4, #4]
   d8054:	f7fe fec0 	bl	d6dd8 <inet_htonl>
   d8058:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d805a:	696b      	ldr	r3, [r5, #20]
   d805c:	221c      	movs	r2, #28
   d805e:	6818      	ldr	r0, [r3, #0]
   d8060:	a903      	add	r1, sp, #12
   d8062:	f7fe ff71 	bl	d6f48 <sock_connect>
   d8066:	2800      	cmp	r0, #0
   d8068:	d1be      	bne.n	d7fe8 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d806a:	3404      	adds	r4, #4
   d806c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d806e:	696d      	ldr	r5, [r5, #20]
   d8070:	358c      	adds	r5, #140	; 0x8c
   d8072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8074:	6823      	ldr	r3, [r4, #0]
   d8076:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8078:	2401      	movs	r4, #1
   d807a:	e7ba      	b.n	d7ff2 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d807c:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d8080:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d8082:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d8086:	f7fe feaf 	bl	d6de8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d808a:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d808c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d8090:	1d23      	adds	r3, r4, #4
   d8092:	f104 0714 	add.w	r7, r4, #20
   d8096:	6818      	ldr	r0, [r3, #0]
   d8098:	6859      	ldr	r1, [r3, #4]
   d809a:	4632      	mov	r2, r6
   d809c:	c203      	stmia	r2!, {r0, r1}
   d809e:	3308      	adds	r3, #8
   d80a0:	42bb      	cmp	r3, r7
   d80a2:	4616      	mov	r6, r2
   d80a4:	d1f7      	bne.n	d8096 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d80a6:	e7d8      	b.n	d805a <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d80a8 <_ZN9TCPClient9availableEv>:
{
   d80a8:	b530      	push	{r4, r5, lr}
   d80aa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d80ac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d80b0:	b08b      	sub	sp, #44	; 0x2c
   d80b2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d80b4:	b12b      	cbz	r3, d80c2 <_ZN9TCPClient9availableEv+0x1a>
   d80b6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d80ba:	429a      	cmp	r2, r3
   d80bc:	d101      	bne.n	d80c2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d80be:	f7ff ff70 	bl	d7fa2 <_ZN9TCPClient12flush_bufferEv>
   d80c2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d80c4:	6808      	ldr	r0, [r1, #0]
   d80c6:	2800      	cmp	r0, #0
   d80c8:	db18      	blt.n	d80fc <_ZN9TCPClient9availableEv+0x54>
   d80ca:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d80ce:	2d7f      	cmp	r5, #127	; 0x7f
   d80d0:	d814      	bhi.n	d80fc <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d80d2:	3104      	adds	r1, #4
   d80d4:	2308      	movs	r3, #8
   d80d6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d80da:	4429      	add	r1, r5
   d80dc:	f7fe ff3c 	bl	d6f58 <sock_recv>
            if (ret > 0) {
   d80e0:	2800      	cmp	r0, #0
   d80e2:	dd13      	ble.n	d810c <_ZN9TCPClient9availableEv+0x64>
   d80e4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d80e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d80ea:	b90a      	cbnz	r2, d80f0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d80ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d80f0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d80f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d80f6:	4410      	add	r0, r2
   d80f8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d80fc:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d80fe:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8102:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8106:	1ac0      	subs	r0, r0, r3
   d8108:	b00b      	add	sp, #44	; 0x2c
   d810a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d810c:	f7ff f890 	bl	d7230 <__errno>
   d8110:	6803      	ldr	r3, [r0, #0]
   d8112:	2b0b      	cmp	r3, #11
   d8114:	d0f2      	beq.n	d80fc <_ZN9TCPClient9availableEv+0x54>
   d8116:	f7ff f88b 	bl	d7230 <__errno>
   d811a:	6803      	ldr	r3, [r0, #0]
   d811c:	2b0b      	cmp	r3, #11
   d811e:	d0ed      	beq.n	d80fc <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8120:	2320      	movs	r3, #32
   d8122:	2500      	movs	r5, #0
   d8124:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8128:	f7ff f882 	bl	d7230 <__errno>
   d812c:	6803      	ldr	r3, [r0, #0]
   d812e:	9301      	str	r3, [sp, #4]
   d8130:	4b08      	ldr	r3, [pc, #32]	; (d8154 <_ZN9TCPClient9availableEv+0xac>)
   d8132:	4909      	ldr	r1, [pc, #36]	; (d8158 <_ZN9TCPClient9availableEv+0xb0>)
   d8134:	9300      	str	r3, [sp, #0]
   d8136:	aa02      	add	r2, sp, #8
   d8138:	462b      	mov	r3, r5
   d813a:	2032      	movs	r0, #50	; 0x32
   d813c:	f7fe ffa4 	bl	d7088 <log_message>
                    sock_close(d_->sock);
   d8140:	6963      	ldr	r3, [r4, #20]
   d8142:	6818      	ldr	r0, [r3, #0]
   d8144:	f7fe fef8 	bl	d6f38 <sock_close>
   d8148:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d814a:	f04f 32ff 	mov.w	r2, #4294967295
   d814e:	601a      	str	r2, [r3, #0]
   d8150:	e7d4      	b.n	d80fc <_ZN9TCPClient9availableEv+0x54>
   d8152:	bf00      	nop
   d8154:	000d9c53 	.word	0x000d9c53
   d8158:	000d9c4c 	.word	0x000d9c4c

000d815c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d815c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d815e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8160:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8162:	6818      	ldr	r0, [r3, #0]
   d8164:	2800      	cmp	r0, #0
   d8166:	db01      	blt.n	d816c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8168:	f7fe fee6 	bl	d6f38 <sock_close>
   d816c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d816e:	f04f 32ff 	mov.w	r2, #4294967295
   d8172:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8174:	6960      	ldr	r0, [r4, #20]
   d8176:	2211      	movs	r2, #17
   d8178:	2100      	movs	r1, #0
   d817a:	308c      	adds	r0, #140	; 0x8c
   d817c:	f000 fbf0 	bl	d8960 <memset>
    flush_buffer();
   d8180:	4620      	mov	r0, r4
}
   d8182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d8186:	f7ff bf0c 	b.w	d7fa2 <_ZN9TCPClient12flush_bufferEv>

000d818a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d818a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d818c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d818e:	4604      	mov	r4, r0
          total(0) {
   d8190:	6001      	str	r1, [r0, #0]
   d8192:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d8196:	3088      	adds	r0, #136	; 0x88
   d8198:	f7ff fc22 	bl	d79e0 <_ZN9IPAddressC1Ev>
}
   d819c:	4620      	mov	r0, r4
   d819e:	bd10      	pop	{r4, pc}

000d81a0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d81a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d81a2:	2300      	movs	r3, #0
   d81a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d81a8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d81ac:	4a0e      	ldr	r2, [pc, #56]	; (d81e8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d81ae:	6103      	str	r3, [r0, #16]
   d81b0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d81b2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d81b4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d81b6:	20ac      	movs	r0, #172	; 0xac
   d81b8:	9101      	str	r1, [sp, #4]
   d81ba:	f7fb ff6a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d81be:	1e05      	subs	r5, r0, #0
   d81c0:	f105 060c 	add.w	r6, r5, #12
   d81c4:	d008      	beq.n	d81d8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d81c6:	2301      	movs	r3, #1
   d81c8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d81cc:	4b07      	ldr	r3, [pc, #28]	; (d81ec <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d81ce:	9901      	ldr	r1, [sp, #4]
   d81d0:	602b      	str	r3, [r5, #0]
   d81d2:	4630      	mov	r0, r6
   d81d4:	f7ff ffd9 	bl	d818a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d81d8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d81da:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d81de:	f7ff fee0 	bl	d7fa2 <_ZN9TCPClient12flush_bufferEv>
}
   d81e2:	b002      	add	sp, #8
   d81e4:	bd70      	pop	{r4, r5, r6, pc}
   d81e6:	bf00      	nop
   d81e8:	000d9c88 	.word	0x000d9c88
   d81ec:	000d9c6c 	.word	0x000d9c6c

000d81f0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d81f0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d81f2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d81f6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d81f8:	f7ff ffd2 	bl	d81a0 <_ZN9TCPClientC1Ei>
}
   d81fc:	4620      	mov	r0, r4
   d81fe:	bd10      	pop	{r4, pc}

000d8200 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8200:	b510      	push	{r4, lr}
   d8202:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8204:	6800      	ldr	r0, [r0, #0]
   d8206:	2800      	cmp	r0, #0
   d8208:	db01      	blt.n	d820e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d820a:	f7fe fe95 	bl	d6f38 <sock_close>
    }
}
   d820e:	4620      	mov	r0, r4
   d8210:	bd10      	pop	{r4, pc}

000d8212 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8212:	300c      	adds	r0, #12
   d8214:	f7ff bff4 	b.w	d8200 <_ZN9TCPClient4DataD1Ev>

000d8218 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d821c:	4698      	mov	r8, r3
    stop();
   d821e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8220:	b093      	sub	sp, #76	; 0x4c
   d8222:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8224:	2400      	movs	r4, #0
    stop();
   d8226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8228:	4606      	mov	r6, r0
   d822a:	4617      	mov	r7, r2
    stop();
   d822c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d822e:	4628      	mov	r0, r5
   d8230:	466b      	mov	r3, sp
   d8232:	4622      	mov	r2, r4
   d8234:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8236:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8238:	f7fe fd2e 	bl	d6c98 <netdb_getaddrinfo>
   d823c:	4605      	mov	r5, r0
   d823e:	2800      	cmp	r0, #0
   d8240:	d163      	bne.n	d830a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8242:	9b00      	ldr	r3, [sp, #0]
   d8244:	2b00      	cmp	r3, #0
   d8246:	d04b      	beq.n	d82e0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8248:	695b      	ldr	r3, [r3, #20]
   d824a:	2b00      	cmp	r3, #0
   d824c:	d048      	beq.n	d82e0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d824e:	a806      	add	r0, sp, #24
   d8250:	f7ff fbc6 	bl	d79e0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8254:	9b00      	ldr	r3, [sp, #0]
   d8256:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8258:	7863      	ldrb	r3, [r4, #1]
   d825a:	2b02      	cmp	r3, #2
   d825c:	d104      	bne.n	d8268 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d825e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8260:	a806      	add	r0, sp, #24
   d8262:	f7ff f90f 	bl	d7484 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8266:	e026      	b.n	d82b6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8268:	2b0a      	cmp	r3, #10
   d826a:	d124      	bne.n	d82b6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d826c:	2211      	movs	r2, #17
   d826e:	4629      	mov	r1, r5
   d8270:	a801      	add	r0, sp, #4
   d8272:	f000 fb75 	bl	d8960 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8276:	68a3      	ldr	r3, [r4, #8]
   d8278:	2b00      	cmp	r3, #0
   d827a:	d038      	beq.n	d82ee <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d827c:	f104 0308 	add.w	r3, r4, #8
   d8280:	f10d 0c04 	add.w	ip, sp, #4
   d8284:	3418      	adds	r4, #24
   d8286:	6818      	ldr	r0, [r3, #0]
   d8288:	6859      	ldr	r1, [r3, #4]
   d828a:	4662      	mov	r2, ip
   d828c:	c203      	stmia	r2!, {r0, r1}
   d828e:	3308      	adds	r3, #8
   d8290:	42a3      	cmp	r3, r4
   d8292:	4694      	mov	ip, r2
   d8294:	d1f7      	bne.n	d8286 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d8296:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8298:	a901      	add	r1, sp, #4
   d829a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d829c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d82a0:	f7ff fbac 	bl	d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d82a4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d82a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d82ac:	ac07      	add	r4, sp, #28
   d82ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82b0:	f8dc 3000 	ldr.w	r3, [ip]
   d82b4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d82b6:	a806      	add	r0, sp, #24
   d82b8:	f7ff fbb2 	bl	d7a20 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d82bc:	b180      	cbz	r0, d82e0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d82be:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d82c0:	ad07      	add	r5, sp, #28
   d82c2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d82c6:	4b12      	ldr	r3, [pc, #72]	; (d8310 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d82c8:	930c      	str	r3, [sp, #48]	; 0x30
   d82ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d82cc:	ac0d      	add	r4, sp, #52	; 0x34
   d82ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d82d0:	682b      	ldr	r3, [r5, #0]
   d82d2:	7023      	strb	r3, [r4, #0]
   d82d4:	463a      	mov	r2, r7
   d82d6:	4643      	mov	r3, r8
   d82d8:	a90c      	add	r1, sp, #48	; 0x30
   d82da:	4630      	mov	r0, r6
   d82dc:	47c8      	blx	r9
   d82de:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d82e0:	9800      	ldr	r0, [sp, #0]
   d82e2:	f7fe fcd1 	bl	d6c88 <netdb_freeaddrinfo>
}
   d82e6:	4628      	mov	r0, r5
   d82e8:	b013      	add	sp, #76	; 0x4c
   d82ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d82ee:	68e3      	ldr	r3, [r4, #12]
   d82f0:	2b00      	cmp	r3, #0
   d82f2:	d1c3      	bne.n	d827c <_ZN9TCPClient7connectEPKctm+0x64>
   d82f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d82f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d82fc:	f7fe fd6c 	bl	d6dd8 <inet_htonl>
   d8300:	4581      	cmp	r9, r0
   d8302:	d1bb      	bne.n	d827c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8304:	f104 0114 	add.w	r1, r4, #20
   d8308:	e7aa      	b.n	d8260 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d830a:	4625      	mov	r5, r4
   d830c:	e7e8      	b.n	d82e0 <_ZN9TCPClient7connectEPKctm+0xc8>
   d830e:	bf00      	nop
   d8310:	000d9bb8 	.word	0x000d9bb8

000d8314 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8314:	2200      	movs	r2, #0
   d8316:	6840      	ldr	r0, [r0, #4]
   d8318:	4611      	mov	r1, r2
   d831a:	f7fe bf01 	b.w	d7120 <network_ready>

000d831e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d831e:	2200      	movs	r2, #0
   d8320:	6840      	ldr	r0, [r0, #4]
   d8322:	4611      	mov	r1, r2
   d8324:	f7fe bf1c 	b.w	d7160 <network_listening>

000d8328 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8328:	2200      	movs	r2, #0
   d832a:	6840      	ldr	r0, [r0, #4]
   d832c:	4611      	mov	r1, r2
   d832e:	f7fe bf27 	b.w	d7180 <network_get_listen_timeout>

000d8332 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8332:	6840      	ldr	r0, [r0, #4]
   d8334:	2200      	movs	r2, #0
   d8336:	f7fe bf1b 	b.w	d7170 <network_set_listen_timeout>

000d833a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d833a:	6840      	ldr	r0, [r0, #4]
   d833c:	2200      	movs	r2, #0
   d833e:	f081 0101 	eor.w	r1, r1, #1
   d8342:	f7fe bf05 	b.w	d7150 <network_listen>

000d8346 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8346:	2300      	movs	r3, #0
   d8348:	6840      	ldr	r0, [r0, #4]
   d834a:	461a      	mov	r2, r3
   d834c:	4619      	mov	r1, r3
   d834e:	f7fe bef7 	b.w	d7140 <network_off>

000d8352 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8352:	2200      	movs	r2, #0
   d8354:	6840      	ldr	r0, [r0, #4]
   d8356:	4611      	mov	r1, r2
   d8358:	f7fe bed2 	b.w	d7100 <network_connecting>

000d835c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d835c:	6840      	ldr	r0, [r0, #4]
   d835e:	2200      	movs	r2, #0
   d8360:	2102      	movs	r1, #2
   d8362:	f7fe bed5 	b.w	d7110 <network_disconnect>

000d8366 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8366:	2300      	movs	r3, #0
   d8368:	6840      	ldr	r0, [r0, #4]
   d836a:	461a      	mov	r2, r3
   d836c:	f7fe bec0 	b.w	d70f0 <network_connect>

000d8370 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8370:	4b02      	ldr	r3, [pc, #8]	; (d837c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8372:	2204      	movs	r2, #4
   d8374:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8376:	4a02      	ldr	r2, [pc, #8]	; (d8380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8378:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d837a:	4770      	bx	lr
   d837c:	2003e7c4 	.word	0x2003e7c4
   d8380:	000d9cd4 	.word	0x000d9cd4

000d8384 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8384:	2300      	movs	r3, #0
   d8386:	6840      	ldr	r0, [r0, #4]
   d8388:	461a      	mov	r2, r3
   d838a:	f7fe beb1 	b.w	d70f0 <network_connect>

000d838e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d838e:	6840      	ldr	r0, [r0, #4]
   d8390:	2200      	movs	r2, #0
   d8392:	2102      	movs	r1, #2
   d8394:	f7fe bebc 	b.w	d7110 <network_disconnect>

000d8398 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8398:	2200      	movs	r2, #0
   d839a:	6840      	ldr	r0, [r0, #4]
   d839c:	4611      	mov	r1, r2
   d839e:	f7fe beaf 	b.w	d7100 <network_connecting>

000d83a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d83a2:	2200      	movs	r2, #0
   d83a4:	6840      	ldr	r0, [r0, #4]
   d83a6:	4611      	mov	r1, r2
   d83a8:	f7fe beba 	b.w	d7120 <network_ready>

000d83ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d83ac:	2300      	movs	r3, #0
   d83ae:	6840      	ldr	r0, [r0, #4]
   d83b0:	461a      	mov	r2, r3
   d83b2:	4619      	mov	r1, r3
   d83b4:	f7fe bebc 	b.w	d7130 <network_on>

000d83b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d83b8:	2300      	movs	r3, #0
   d83ba:	6840      	ldr	r0, [r0, #4]
   d83bc:	461a      	mov	r2, r3
   d83be:	4619      	mov	r1, r3
   d83c0:	f7fe bebe 	b.w	d7140 <network_off>

000d83c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d83c4:	6840      	ldr	r0, [r0, #4]
   d83c6:	2100      	movs	r1, #0
   d83c8:	f7fe bee2 	b.w	d7190 <network_is_on>

000d83cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d83cc:	6840      	ldr	r0, [r0, #4]
   d83ce:	2100      	movs	r1, #0
   d83d0:	f7fe bee6 	b.w	d71a0 <network_is_off>

000d83d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d83d4:	6840      	ldr	r0, [r0, #4]
   d83d6:	2200      	movs	r2, #0
   d83d8:	f081 0101 	eor.w	r1, r1, #1
   d83dc:	f7fe beb8 	b.w	d7150 <network_listen>

000d83e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d83e0:	6840      	ldr	r0, [r0, #4]
   d83e2:	2200      	movs	r2, #0
   d83e4:	f7fe bec4 	b.w	d7170 <network_set_listen_timeout>

000d83e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d83e8:	2200      	movs	r2, #0
   d83ea:	6840      	ldr	r0, [r0, #4]
   d83ec:	4611      	mov	r1, r2
   d83ee:	f7fe bec7 	b.w	d7180 <network_get_listen_timeout>

000d83f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d83f2:	2200      	movs	r2, #0
   d83f4:	6840      	ldr	r0, [r0, #4]
   d83f6:	4611      	mov	r1, r2
   d83f8:	f7fe beb2 	b.w	d7160 <network_listening>

000d83fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d83fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8400:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8402:	b095      	sub	sp, #84	; 0x54
   d8404:	4616      	mov	r6, r2
   d8406:	460d      	mov	r5, r1
   d8408:	4607      	mov	r7, r0
    IPAddress addr;
   d840a:	f7ff fae9 	bl	d79e0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d840e:	4621      	mov	r1, r4
   d8410:	2218      	movs	r2, #24
   d8412:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8414:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8416:	f000 faa3 	bl	d8960 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d841a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d841c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8420:	4621      	mov	r1, r4
   d8422:	466b      	mov	r3, sp
   d8424:	aa0c      	add	r2, sp, #48	; 0x30
   d8426:	4630      	mov	r0, r6
   d8428:	f7fe fc36 	bl	d6c98 <netdb_getaddrinfo>
    if (!r) {
   d842c:	4604      	mov	r4, r0
   d842e:	2800      	cmp	r0, #0
   d8430:	d14c      	bne.n	d84cc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8432:	4602      	mov	r2, r0
   d8434:	2101      	movs	r1, #1
   d8436:	6868      	ldr	r0, [r5, #4]
   d8438:	f7fe fe72 	bl	d7120 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d843c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d843e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8440:	4622      	mov	r2, r4
   d8442:	6868      	ldr	r0, [r5, #4]
   d8444:	f7fe fe6c 	bl	d7120 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8448:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d844a:	4681      	mov	r9, r0
        bool ok = false;
   d844c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d844e:	2e00      	cmp	r6, #0
   d8450:	d03c      	beq.n	d84cc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8452:	2900      	cmp	r1, #0
   d8454:	d13a      	bne.n	d84cc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8456:	6873      	ldr	r3, [r6, #4]
   d8458:	2b02      	cmp	r3, #2
   d845a:	d003      	beq.n	d8464 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d845c:	2b0a      	cmp	r3, #10
   d845e:	d011      	beq.n	d8484 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8460:	69f6      	ldr	r6, [r6, #28]
   d8462:	e7f4      	b.n	d844e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8464:	f1b8 0f00 	cmp.w	r8, #0
   d8468:	d00a      	beq.n	d8480 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d846a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d846c:	a806      	add	r0, sp, #24
   d846e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8470:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8472:	f7ff fb05 	bl	d7a80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8478:	1d3c      	adds	r4, r7, #4
   d847a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d847c:	682b      	ldr	r3, [r5, #0]
   d847e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8480:	4641      	mov	r1, r8
   d8482:	e7ed      	b.n	d8460 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8484:	f1b9 0f00 	cmp.w	r9, #0
   d8488:	d101      	bne.n	d848e <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d848a:	4649      	mov	r1, r9
   d848c:	e7e8      	b.n	d8460 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d848e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8490:	2210      	movs	r2, #16
   d8492:	a801      	add	r0, sp, #4
   d8494:	f000 fa64 	bl	d8960 <memset>
                    a.v = 6;
   d8498:	2306      	movs	r3, #6
   d849a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d849e:	ad01      	add	r5, sp, #4
   d84a0:	f104 0308 	add.w	r3, r4, #8
   d84a4:	3418      	adds	r4, #24
   d84a6:	6818      	ldr	r0, [r3, #0]
   d84a8:	6859      	ldr	r1, [r3, #4]
   d84aa:	462a      	mov	r2, r5
   d84ac:	c203      	stmia	r2!, {r0, r1}
   d84ae:	3308      	adds	r3, #8
   d84b0:	42a3      	cmp	r3, r4
   d84b2:	4615      	mov	r5, r2
   d84b4:	d1f7      	bne.n	d84a6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d84b6:	a901      	add	r1, sp, #4
   d84b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d84ba:	ad07      	add	r5, sp, #28
   d84bc:	f7ff fa9e 	bl	d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d84c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d84c2:	1d3c      	adds	r4, r7, #4
   d84c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d84c6:	682b      	ldr	r3, [r5, #0]
   d84c8:	7023      	strb	r3, [r4, #0]
   d84ca:	e7de      	b.n	d848a <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d84cc:	9800      	ldr	r0, [sp, #0]
   d84ce:	f7fe fbdb 	bl	d6c88 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d84d2:	4638      	mov	r0, r7
   d84d4:	b015      	add	sp, #84	; 0x54
   d84d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d84dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d84dc:	4b02      	ldr	r3, [pc, #8]	; (d84e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d84de:	4a03      	ldr	r2, [pc, #12]	; (d84ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d84e0:	601a      	str	r2, [r3, #0]
   d84e2:	2200      	movs	r2, #0
   d84e4:	605a      	str	r2, [r3, #4]

} // spark
   d84e6:	4770      	bx	lr
   d84e8:	2003e7cc 	.word	0x2003e7cc
   d84ec:	000d9d10 	.word	0x000d9d10

000d84f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d84f0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d84f2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d84f4:	d902      	bls.n	d84fc <pinAvailable+0xc>
    return false;
   d84f6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d84f8:	b002      	add	sp, #8
   d84fa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d84fc:	f1a0 030b 	sub.w	r3, r0, #11
   d8500:	2b02      	cmp	r3, #2
   d8502:	d81a      	bhi.n	d853a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8504:	4c17      	ldr	r4, [pc, #92]	; (d8564 <pinAvailable+0x74>)
   d8506:	7821      	ldrb	r1, [r4, #0]
   d8508:	f3bf 8f5b 	dmb	ish
   d850c:	f011 0101 	ands.w	r1, r1, #1
   d8510:	d10b      	bne.n	d852a <pinAvailable+0x3a>
   d8512:	4620      	mov	r0, r4
   d8514:	9101      	str	r1, [sp, #4]
   d8516:	f7fb fdcf 	bl	d40b8 <__cxa_guard_acquire>
   d851a:	9901      	ldr	r1, [sp, #4]
   d851c:	b128      	cbz	r0, d852a <pinAvailable+0x3a>
   d851e:	4812      	ldr	r0, [pc, #72]	; (d8568 <pinAvailable+0x78>)
   d8520:	f7fe feda 	bl	d72d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8524:	4620      	mov	r0, r4
   d8526:	f7fb fdcc 	bl	d40c2 <__cxa_guard_release>
   d852a:	4b0f      	ldr	r3, [pc, #60]	; (d8568 <pinAvailable+0x78>)
   d852c:	7818      	ldrb	r0, [r3, #0]
   d852e:	f7fe fd43 	bl	d6fb8 <hal_spi_is_enabled>
   d8532:	2800      	cmp	r0, #0
   d8534:	d1df      	bne.n	d84f6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8536:	2001      	movs	r0, #1
   d8538:	e7de      	b.n	d84f8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d853a:	2801      	cmp	r0, #1
   d853c:	d809      	bhi.n	d8552 <pinAvailable+0x62>
   d853e:	f000 f8a7 	bl	d8690 <_Z19__fetch_global_Wirev>
   d8542:	2100      	movs	r1, #0
   d8544:	7c00      	ldrb	r0, [r0, #16]
   d8546:	f7fe fcdf 	bl	d6f08 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d854a:	f080 0001 	eor.w	r0, r0, #1
   d854e:	b2c0      	uxtb	r0, r0
   d8550:	e7d2      	b.n	d84f8 <pinAvailable+0x8>
   d8552:	3809      	subs	r0, #9
   d8554:	2801      	cmp	r0, #1
   d8556:	d8ee      	bhi.n	d8536 <pinAvailable+0x46>
   d8558:	f7ff fb7c 	bl	d7c54 <_Z22__fetch_global_Serial1v>
   d855c:	7c00      	ldrb	r0, [r0, #16]
   d855e:	f7fe fc7b 	bl	d6e58 <hal_usart_is_enabled>
   d8562:	e7f2      	b.n	d854a <pinAvailable+0x5a>
   d8564:	2003e644 	.word	0x2003e644
   d8568:	2003e648 	.word	0x2003e648

000d856c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d856c:	2823      	cmp	r0, #35	; 0x23
{
   d856e:	b538      	push	{r3, r4, r5, lr}
   d8570:	4604      	mov	r4, r0
   d8572:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8574:	d80a      	bhi.n	d858c <pinMode+0x20>
   d8576:	29ff      	cmp	r1, #255	; 0xff
   d8578:	d008      	beq.n	d858c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d857a:	f7ff ffb9 	bl	d84f0 <pinAvailable>
   d857e:	b128      	cbz	r0, d858c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8580:	4629      	mov	r1, r5
   d8582:	4620      	mov	r0, r4
}
   d8584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8588:	f7fe bb96 	b.w	d6cb8 <HAL_Pin_Mode>
}
   d858c:	bd38      	pop	{r3, r4, r5, pc}

000d858e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d858e:	b538      	push	{r3, r4, r5, lr}
   d8590:	4604      	mov	r4, r0
   d8592:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8594:	f7fe fb98 	bl	d6cc8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8598:	28ff      	cmp	r0, #255	; 0xff
   d859a:	d010      	beq.n	d85be <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d859c:	2806      	cmp	r0, #6
   d859e:	d804      	bhi.n	d85aa <digitalWrite+0x1c>
   d85a0:	234d      	movs	r3, #77	; 0x4d
   d85a2:	fa23 f000 	lsr.w	r0, r3, r0
   d85a6:	07c3      	lsls	r3, r0, #31
   d85a8:	d409      	bmi.n	d85be <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d85aa:	4620      	mov	r0, r4
   d85ac:	f7ff ffa0 	bl	d84f0 <pinAvailable>
   d85b0:	b128      	cbz	r0, d85be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d85b2:	4629      	mov	r1, r5
   d85b4:	4620      	mov	r0, r4
}
   d85b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d85ba:	f7fe bb8d 	b.w	d6cd8 <HAL_GPIO_Write>
}
   d85be:	bd38      	pop	{r3, r4, r5, pc}

000d85c0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d85c0:	b510      	push	{r4, lr}
   d85c2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d85c4:	f7fe fb80 	bl	d6cc8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d85c8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d85ca:	b2db      	uxtb	r3, r3
   d85cc:	2b01      	cmp	r3, #1
   d85ce:	d908      	bls.n	d85e2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d85d0:	4620      	mov	r0, r4
   d85d2:	f7ff ff8d 	bl	d84f0 <pinAvailable>
   d85d6:	b120      	cbz	r0, d85e2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d85d8:	4620      	mov	r0, r4
}
   d85da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d85de:	f7fe bb83 	b.w	d6ce8 <HAL_GPIO_Read>
}
   d85e2:	2000      	movs	r0, #0
   d85e4:	bd10      	pop	{r4, pc}

000d85e6 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d85e6:	280d      	cmp	r0, #13
{
   d85e8:	b510      	push	{r4, lr}
   d85ea:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d85ec:	bf9c      	itt	ls
   d85ee:	340e      	addls	r4, #14
   d85f0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d85f2:	4620      	mov	r0, r4
   d85f4:	f7ff ff7c 	bl	d84f0 <pinAvailable>
   d85f8:	b150      	cbz	r0, d8610 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d85fa:	2103      	movs	r1, #3
   d85fc:	4620      	mov	r0, r4
   d85fe:	f7fe fb53 	bl	d6ca8 <HAL_Validate_Pin_Function>
   d8602:	2803      	cmp	r0, #3
   d8604:	d104      	bne.n	d8610 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8606:	4620      	mov	r0, r4
}
   d8608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d860c:	f7fe bb7c 	b.w	d6d08 <hal_adc_read>
}
   d8610:	2000      	movs	r0, #0
   d8612:	bd10      	pop	{r4, pc}

000d8614 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d8614:	b538      	push	{r3, r4, r5, lr}
   d8616:	4604      	mov	r4, r0
   d8618:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d861a:	f7ff ff69 	bl	d84f0 <pinAvailable>
   d861e:	b1f0      	cbz	r0, d865e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d8620:	2104      	movs	r1, #4
   d8622:	4620      	mov	r0, r4
   d8624:	f7fe fb40 	bl	d6ca8 <HAL_Validate_Pin_Function>
   d8628:	2804      	cmp	r0, #4
   d862a:	d105      	bne.n	d8638 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d862c:	b2a9      	uxth	r1, r5
   d862e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d8630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d8634:	f7fe bb60 	b.w	d6cf8 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d8638:	2102      	movs	r1, #2
   d863a:	4620      	mov	r0, r4
   d863c:	f7fe fb34 	bl	d6ca8 <HAL_Validate_Pin_Function>
   d8640:	2802      	cmp	r0, #2
   d8642:	d10c      	bne.n	d865e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d8644:	4620      	mov	r0, r4
   d8646:	f7fe fb3f 	bl	d6cc8 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d864a:	2801      	cmp	r0, #1
   d864c:	d001      	beq.n	d8652 <_Z11analogWritetm+0x3e>
   d864e:	2804      	cmp	r0, #4
   d8650:	d105      	bne.n	d865e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d8652:	4629      	mov	r1, r5
   d8654:	4620      	mov	r0, r4
}
   d8656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d865a:	f7fe bb5d 	b.w	d6d18 <hal_pwm_write_ext>
}
   d865e:	bd38      	pop	{r3, r4, r5, pc}

000d8660 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8660:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8662:	2300      	movs	r3, #0
   d8664:	2520      	movs	r5, #32
   d8666:	8043      	strh	r3, [r0, #2]
   d8668:	2314      	movs	r3, #20
{
   d866a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d866c:	8003      	strh	r3, [r0, #0]
   d866e:	6085      	str	r5, [r0, #8]
   d8670:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8672:	4906      	ldr	r1, [pc, #24]	; (d868c <_Z17acquireWireBufferv+0x2c>)
   d8674:	4628      	mov	r0, r5
   d8676:	f000 f83a 	bl	d86ee <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d867a:	4904      	ldr	r1, [pc, #16]	; (d868c <_Z17acquireWireBufferv+0x2c>)
	};
   d867c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d867e:	4628      	mov	r0, r5
   d8680:	f000 f835 	bl	d86ee <_ZnajRKSt9nothrow_t>
	};
   d8684:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8686:	4620      	mov	r0, r4
   d8688:	bd38      	pop	{r3, r4, r5, pc}
   d868a:	bf00      	nop
   d868c:	000d9d44 	.word	0x000d9d44

000d8690 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8690:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8692:	4d0f      	ldr	r5, [pc, #60]	; (d86d0 <_Z19__fetch_global_Wirev+0x40>)
   d8694:	7829      	ldrb	r1, [r5, #0]
   d8696:	f3bf 8f5b 	dmb	ish
   d869a:	f011 0401 	ands.w	r4, r1, #1
{
   d869e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d86a0:	d113      	bne.n	d86ca <_Z19__fetch_global_Wirev+0x3a>
   d86a2:	4628      	mov	r0, r5
   d86a4:	f7fb fd08 	bl	d40b8 <__cxa_guard_acquire>
   d86a8:	b178      	cbz	r0, d86ca <_Z19__fetch_global_Wirev+0x3a>
   d86aa:	a801      	add	r0, sp, #4
   d86ac:	f7ff ffd8 	bl	d8660 <_Z17acquireWireBufferv>
   d86b0:	aa01      	add	r2, sp, #4
   d86b2:	4621      	mov	r1, r4
   d86b4:	4807      	ldr	r0, [pc, #28]	; (d86d4 <_Z19__fetch_global_Wirev+0x44>)
   d86b6:	f7ff fb23 	bl	d7d00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d86ba:	4628      	mov	r0, r5
   d86bc:	f7fb fd01 	bl	d40c2 <__cxa_guard_release>
   d86c0:	4a05      	ldr	r2, [pc, #20]	; (d86d8 <_Z19__fetch_global_Wirev+0x48>)
   d86c2:	4906      	ldr	r1, [pc, #24]	; (d86dc <_Z19__fetch_global_Wirev+0x4c>)
   d86c4:	4803      	ldr	r0, [pc, #12]	; (d86d4 <_Z19__fetch_global_Wirev+0x44>)
   d86c6:	f000 f80b 	bl	d86e0 <__aeabi_atexit>
	return wire;
}
   d86ca:	4802      	ldr	r0, [pc, #8]	; (d86d4 <_Z19__fetch_global_Wirev+0x44>)
   d86cc:	b007      	add	sp, #28
   d86ce:	bd30      	pop	{r4, r5, pc}
   d86d0:	2003e7d8 	.word	0x2003e7d8
   d86d4:	2003e7dc 	.word	0x2003e7dc
   d86d8:	2003e4a4 	.word	0x2003e4a4
   d86dc:	000d7ca9 	.word	0x000d7ca9

000d86e0 <__aeabi_atexit>:
   d86e0:	460b      	mov	r3, r1
   d86e2:	4601      	mov	r1, r0
   d86e4:	4618      	mov	r0, r3
   d86e6:	f000 b91f 	b.w	d8928 <__cxa_atexit>

000d86ea <_ZdlPvj>:
   d86ea:	f7fb bcd6 	b.w	d409a <_ZdlPv>

000d86ee <_ZnajRKSt9nothrow_t>:
   d86ee:	f7fb bcd2 	b.w	d4096 <_Znaj>
	...

000d86f4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d86f4:	4901      	ldr	r1, [pc, #4]	; (d86fc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d86f6:	f000 b8f9 	b.w	d88ec <_ZNKSt9type_infoeqERKS_>
   d86fa:	bf00      	nop
   d86fc:	000d9d60 	.word	0x000d9d60

000d8700 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8702:	2400      	movs	r4, #0
   d8704:	2310      	movs	r3, #16
   d8706:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d870a:	6803      	ldr	r3, [r0, #0]
   d870c:	9400      	str	r4, [sp, #0]
   d870e:	699e      	ldr	r6, [r3, #24]
   d8710:	f88d 4004 	strb.w	r4, [sp, #4]
   d8714:	4615      	mov	r5, r2
   d8716:	466b      	mov	r3, sp
   d8718:	6812      	ldr	r2, [r2, #0]
   d871a:	47b0      	blx	r6
   d871c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8720:	f003 0306 	and.w	r3, r3, #6
   d8724:	2b06      	cmp	r3, #6
   d8726:	bf03      	ittte	eq
   d8728:	9b00      	ldreq	r3, [sp, #0]
   d872a:	602b      	streq	r3, [r5, #0]
   d872c:	2001      	moveq	r0, #1
   d872e:	4620      	movne	r0, r4
   d8730:	b004      	add	sp, #16
   d8732:	bd70      	pop	{r4, r5, r6, pc}

000d8734 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8734:	9800      	ldr	r0, [sp, #0]
   d8736:	4290      	cmp	r0, r2
   d8738:	bf14      	ite	ne
   d873a:	2001      	movne	r0, #1
   d873c:	2006      	moveq	r0, #6
   d873e:	4770      	bx	lr

000d8740 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8740:	b510      	push	{r4, lr}
   d8742:	4b03      	ldr	r3, [pc, #12]	; (d8750 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8744:	6003      	str	r3, [r0, #0]
   d8746:	4604      	mov	r4, r0
   d8748:	f000 f8cd 	bl	d88e6 <_ZNSt9type_infoD1Ev>
   d874c:	4620      	mov	r0, r4
   d874e:	bd10      	pop	{r4, pc}
   d8750:	000d9da0 	.word	0x000d9da0

000d8754 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8754:	b510      	push	{r4, lr}
   d8756:	4604      	mov	r4, r0
   d8758:	f7ff fff2 	bl	d8740 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d875c:	4620      	mov	r0, r4
   d875e:	2108      	movs	r1, #8
   d8760:	f7ff ffc3 	bl	d86ea <_ZdlPvj>
   d8764:	4620      	mov	r0, r4
   d8766:	bd10      	pop	{r4, pc}

000d8768 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d876c:	461f      	mov	r7, r3
   d876e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8772:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8776:	4598      	cmp	r8, r3
   d8778:	4606      	mov	r6, r0
   d877a:	4615      	mov	r5, r2
   d877c:	d107      	bne.n	d878e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d877e:	9907      	ldr	r1, [sp, #28]
   d8780:	f000 f8b4 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d8784:	b118      	cbz	r0, d878e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8786:	7165      	strb	r5, [r4, #5]
   d8788:	2000      	movs	r0, #0
   d878a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d878e:	4639      	mov	r1, r7
   d8790:	4630      	mov	r0, r6
   d8792:	f000 f8ab 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d8796:	2800      	cmp	r0, #0
   d8798:	d0f6      	beq.n	d8788 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d879a:	2301      	movs	r3, #1
   d879c:	f8c4 8000 	str.w	r8, [r4]
   d87a0:	7125      	strb	r5, [r4, #4]
   d87a2:	71a3      	strb	r3, [r4, #6]
   d87a4:	e7f0      	b.n	d8788 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d87a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d87a6:	b538      	push	{r3, r4, r5, lr}
   d87a8:	4615      	mov	r5, r2
   d87aa:	461c      	mov	r4, r3
   d87ac:	f000 f89e 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d87b0:	b120      	cbz	r0, d87bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d87b2:	2308      	movs	r3, #8
   d87b4:	60e3      	str	r3, [r4, #12]
   d87b6:	2306      	movs	r3, #6
   d87b8:	6025      	str	r5, [r4, #0]
   d87ba:	7123      	strb	r3, [r4, #4]
   d87bc:	bd38      	pop	{r3, r4, r5, pc}

000d87be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d87be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d87c0:	4605      	mov	r5, r0
   d87c2:	460c      	mov	r4, r1
   d87c4:	9201      	str	r2, [sp, #4]
   d87c6:	461e      	mov	r6, r3
   d87c8:	f000 f890 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d87cc:	b950      	cbnz	r0, d87e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d87ce:	2e03      	cmp	r6, #3
   d87d0:	d808      	bhi.n	d87e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d87d2:	6823      	ldr	r3, [r4, #0]
   d87d4:	9a01      	ldr	r2, [sp, #4]
   d87d6:	695b      	ldr	r3, [r3, #20]
   d87d8:	4629      	mov	r1, r5
   d87da:	4620      	mov	r0, r4
   d87dc:	b002      	add	sp, #8
   d87de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d87e2:	4718      	bx	r3
   d87e4:	b002      	add	sp, #8
   d87e6:	bd70      	pop	{r4, r5, r6, pc}

000d87e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d87e8:	b510      	push	{r4, lr}
   d87ea:	4b03      	ldr	r3, [pc, #12]	; (d87f8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d87ec:	6003      	str	r3, [r0, #0]
   d87ee:	4604      	mov	r4, r0
   d87f0:	f7ff ffa6 	bl	d8740 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d87f4:	4620      	mov	r0, r4
   d87f6:	bd10      	pop	{r4, pc}
   d87f8:	000d9e00 	.word	0x000d9e00

000d87fc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d87fc:	b510      	push	{r4, lr}
   d87fe:	4604      	mov	r4, r0
   d8800:	f7ff fff2 	bl	d87e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8804:	4620      	mov	r0, r4
   d8806:	210c      	movs	r1, #12
   d8808:	f7ff ff6f 	bl	d86ea <_ZdlPvj>
   d880c:	4620      	mov	r0, r4
   d880e:	bd10      	pop	{r4, pc}

000d8810 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8812:	9f08      	ldr	r7, [sp, #32]
   d8814:	4297      	cmp	r7, r2
   d8816:	4605      	mov	r5, r0
   d8818:	460e      	mov	r6, r1
   d881a:	4614      	mov	r4, r2
   d881c:	d00a      	beq.n	d8834 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d881e:	68a8      	ldr	r0, [r5, #8]
   d8820:	6802      	ldr	r2, [r0, #0]
   d8822:	9708      	str	r7, [sp, #32]
   d8824:	6a15      	ldr	r5, [r2, #32]
   d8826:	4631      	mov	r1, r6
   d8828:	4622      	mov	r2, r4
   d882a:	46ac      	mov	ip, r5
   d882c:	b003      	add	sp, #12
   d882e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8832:	4760      	bx	ip
   d8834:	4619      	mov	r1, r3
   d8836:	9301      	str	r3, [sp, #4]
   d8838:	f000 f858 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d883c:	9b01      	ldr	r3, [sp, #4]
   d883e:	2800      	cmp	r0, #0
   d8840:	d0ed      	beq.n	d881e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8842:	2006      	movs	r0, #6
   d8844:	b003      	add	sp, #12
   d8846:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8848 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8848:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d884c:	460d      	mov	r5, r1
   d884e:	4619      	mov	r1, r3
   d8850:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8854:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8858:	4681      	mov	r9, r0
   d885a:	4617      	mov	r7, r2
   d885c:	4698      	mov	r8, r3
   d885e:	f000 f845 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d8862:	b190      	cbz	r0, d888a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8864:	2d00      	cmp	r5, #0
   d8866:	6034      	str	r4, [r6, #0]
   d8868:	7137      	strb	r7, [r6, #4]
   d886a:	db09      	blt.n	d8880 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d886c:	1961      	adds	r1, r4, r5
   d886e:	458a      	cmp	sl, r1
   d8870:	bf0c      	ite	eq
   d8872:	2106      	moveq	r1, #6
   d8874:	2101      	movne	r1, #1
   d8876:	71b1      	strb	r1, [r6, #6]
   d8878:	2000      	movs	r0, #0
   d887a:	b001      	add	sp, #4
   d887c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8880:	3502      	adds	r5, #2
   d8882:	d1f9      	bne.n	d8878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8884:	2301      	movs	r3, #1
   d8886:	71b3      	strb	r3, [r6, #6]
   d8888:	e7f6      	b.n	d8878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d888a:	4554      	cmp	r4, sl
   d888c:	d106      	bne.n	d889c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d888e:	4659      	mov	r1, fp
   d8890:	4648      	mov	r0, r9
   d8892:	f000 f82b 	bl	d88ec <_ZNKSt9type_infoeqERKS_>
   d8896:	b108      	cbz	r0, d889c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8898:	7177      	strb	r7, [r6, #5]
   d889a:	e7ed      	b.n	d8878 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d889c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d88a0:	6803      	ldr	r3, [r0, #0]
   d88a2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d88a6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d88aa:	69dc      	ldr	r4, [r3, #28]
   d88ac:	463a      	mov	r2, r7
   d88ae:	4643      	mov	r3, r8
   d88b0:	4629      	mov	r1, r5
   d88b2:	46a4      	mov	ip, r4
   d88b4:	b001      	add	sp, #4
   d88b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88ba:	4760      	bx	ip

000d88bc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d88bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d88c0:	4607      	mov	r7, r0
   d88c2:	460c      	mov	r4, r1
   d88c4:	4615      	mov	r5, r2
   d88c6:	461e      	mov	r6, r3
   d88c8:	f7ff ff6d 	bl	d87a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d88cc:	b948      	cbnz	r0, d88e2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d88ce:	68b8      	ldr	r0, [r7, #8]
   d88d0:	6803      	ldr	r3, [r0, #0]
   d88d2:	699f      	ldr	r7, [r3, #24]
   d88d4:	462a      	mov	r2, r5
   d88d6:	4633      	mov	r3, r6
   d88d8:	4621      	mov	r1, r4
   d88da:	46bc      	mov	ip, r7
   d88dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d88e0:	4760      	bx	ip
   d88e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d88e6 <_ZNSt9type_infoD1Ev>:
   d88e6:	4770      	bx	lr

000d88e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   d88e8:	2000      	movs	r0, #0
   d88ea:	4770      	bx	lr

000d88ec <_ZNKSt9type_infoeqERKS_>:
   d88ec:	4281      	cmp	r1, r0
   d88ee:	b508      	push	{r3, lr}
   d88f0:	d00e      	beq.n	d8910 <_ZNKSt9type_infoeqERKS_+0x24>
   d88f2:	6840      	ldr	r0, [r0, #4]
   d88f4:	7803      	ldrb	r3, [r0, #0]
   d88f6:	2b2a      	cmp	r3, #42	; 0x2a
   d88f8:	d00c      	beq.n	d8914 <_ZNKSt9type_infoeqERKS_+0x28>
   d88fa:	6849      	ldr	r1, [r1, #4]
   d88fc:	780b      	ldrb	r3, [r1, #0]
   d88fe:	2b2a      	cmp	r3, #42	; 0x2a
   d8900:	bf08      	it	eq
   d8902:	3101      	addeq	r1, #1
   d8904:	f000 f858 	bl	d89b8 <strcmp>
   d8908:	fab0 f080 	clz	r0, r0
   d890c:	0940      	lsrs	r0, r0, #5
   d890e:	bd08      	pop	{r3, pc}
   d8910:	2001      	movs	r0, #1
   d8912:	e7fc      	b.n	d890e <_ZNKSt9type_infoeqERKS_+0x22>
   d8914:	2000      	movs	r0, #0
   d8916:	e7fa      	b.n	d890e <_ZNKSt9type_infoeqERKS_+0x22>

000d8918 <atoi>:
   d8918:	220a      	movs	r2, #10
   d891a:	2100      	movs	r1, #0
   d891c:	f000 b8f4 	b.w	d8b08 <strtol>

000d8920 <atol>:
   d8920:	220a      	movs	r2, #10
   d8922:	2100      	movs	r1, #0
   d8924:	f000 b8f0 	b.w	d8b08 <strtol>

000d8928 <__cxa_atexit>:
   d8928:	b510      	push	{r4, lr}
   d892a:	4c05      	ldr	r4, [pc, #20]	; (d8940 <__cxa_atexit+0x18>)
   d892c:	4613      	mov	r3, r2
   d892e:	b12c      	cbz	r4, d893c <__cxa_atexit+0x14>
   d8930:	460a      	mov	r2, r1
   d8932:	4601      	mov	r1, r0
   d8934:	2002      	movs	r0, #2
   d8936:	f3af 8000 	nop.w
   d893a:	bd10      	pop	{r4, pc}
   d893c:	4620      	mov	r0, r4
   d893e:	e7fc      	b.n	d893a <__cxa_atexit+0x12>
   d8940:	00000000 	.word	0x00000000

000d8944 <memcpy>:
   d8944:	440a      	add	r2, r1
   d8946:	4291      	cmp	r1, r2
   d8948:	f100 33ff 	add.w	r3, r0, #4294967295
   d894c:	d100      	bne.n	d8950 <memcpy+0xc>
   d894e:	4770      	bx	lr
   d8950:	b510      	push	{r4, lr}
   d8952:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8956:	f803 4f01 	strb.w	r4, [r3, #1]!
   d895a:	4291      	cmp	r1, r2
   d895c:	d1f9      	bne.n	d8952 <memcpy+0xe>
   d895e:	bd10      	pop	{r4, pc}

000d8960 <memset>:
   d8960:	4402      	add	r2, r0
   d8962:	4603      	mov	r3, r0
   d8964:	4293      	cmp	r3, r2
   d8966:	d100      	bne.n	d896a <memset+0xa>
   d8968:	4770      	bx	lr
   d896a:	f803 1b01 	strb.w	r1, [r3], #1
   d896e:	e7f9      	b.n	d8964 <memset+0x4>

000d8970 <srand>:
   d8970:	b538      	push	{r3, r4, r5, lr}
   d8972:	4b0d      	ldr	r3, [pc, #52]	; (d89a8 <srand+0x38>)
   d8974:	681d      	ldr	r5, [r3, #0]
   d8976:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8978:	4604      	mov	r4, r0
   d897a:	b97b      	cbnz	r3, d899c <srand+0x2c>
   d897c:	2018      	movs	r0, #24
   d897e:	f7fe fc2f 	bl	d71e0 <malloc>
   d8982:	4a0a      	ldr	r2, [pc, #40]	; (d89ac <srand+0x3c>)
   d8984:	4b0a      	ldr	r3, [pc, #40]	; (d89b0 <srand+0x40>)
   d8986:	63a8      	str	r0, [r5, #56]	; 0x38
   d8988:	e9c0 2300 	strd	r2, r3, [r0]
   d898c:	4b09      	ldr	r3, [pc, #36]	; (d89b4 <srand+0x44>)
   d898e:	6083      	str	r3, [r0, #8]
   d8990:	230b      	movs	r3, #11
   d8992:	8183      	strh	r3, [r0, #12]
   d8994:	2201      	movs	r2, #1
   d8996:	2300      	movs	r3, #0
   d8998:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d899c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d899e:	2200      	movs	r2, #0
   d89a0:	611c      	str	r4, [r3, #16]
   d89a2:	615a      	str	r2, [r3, #20]
   d89a4:	bd38      	pop	{r3, r4, r5, pc}
   d89a6:	bf00      	nop
   d89a8:	2003e440 	.word	0x2003e440
   d89ac:	abcd330e 	.word	0xabcd330e
   d89b0:	e66d1234 	.word	0xe66d1234
   d89b4:	0005deec 	.word	0x0005deec

000d89b8 <strcmp>:
   d89b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d89bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d89c0:	2a01      	cmp	r2, #1
   d89c2:	bf28      	it	cs
   d89c4:	429a      	cmpcs	r2, r3
   d89c6:	d0f7      	beq.n	d89b8 <strcmp>
   d89c8:	1ad0      	subs	r0, r2, r3
   d89ca:	4770      	bx	lr

000d89cc <strcpy>:
   d89cc:	4603      	mov	r3, r0
   d89ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d89d2:	f803 2b01 	strb.w	r2, [r3], #1
   d89d6:	2a00      	cmp	r2, #0
   d89d8:	d1f9      	bne.n	d89ce <strcpy+0x2>
   d89da:	4770      	bx	lr

000d89dc <strlen>:
   d89dc:	4603      	mov	r3, r0
   d89de:	f813 2b01 	ldrb.w	r2, [r3], #1
   d89e2:	2a00      	cmp	r2, #0
   d89e4:	d1fb      	bne.n	d89de <strlen+0x2>
   d89e6:	1a18      	subs	r0, r3, r0
   d89e8:	3801      	subs	r0, #1
   d89ea:	4770      	bx	lr

000d89ec <strncpy>:
   d89ec:	b510      	push	{r4, lr}
   d89ee:	3901      	subs	r1, #1
   d89f0:	4603      	mov	r3, r0
   d89f2:	b132      	cbz	r2, d8a02 <strncpy+0x16>
   d89f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d89f8:	f803 4b01 	strb.w	r4, [r3], #1
   d89fc:	3a01      	subs	r2, #1
   d89fe:	2c00      	cmp	r4, #0
   d8a00:	d1f7      	bne.n	d89f2 <strncpy+0x6>
   d8a02:	441a      	add	r2, r3
   d8a04:	2100      	movs	r1, #0
   d8a06:	4293      	cmp	r3, r2
   d8a08:	d100      	bne.n	d8a0c <strncpy+0x20>
   d8a0a:	bd10      	pop	{r4, pc}
   d8a0c:	f803 1b01 	strb.w	r1, [r3], #1
   d8a10:	e7f9      	b.n	d8a06 <strncpy+0x1a>
	...

000d8a14 <_strtol_l.isra.0>:
   d8a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a18:	4e3a      	ldr	r6, [pc, #232]	; (d8b04 <_strtol_l.isra.0+0xf0>)
   d8a1a:	4686      	mov	lr, r0
   d8a1c:	468c      	mov	ip, r1
   d8a1e:	4660      	mov	r0, ip
   d8a20:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8a24:	5da5      	ldrb	r5, [r4, r6]
   d8a26:	f015 0508 	ands.w	r5, r5, #8
   d8a2a:	d1f8      	bne.n	d8a1e <_strtol_l.isra.0+0xa>
   d8a2c:	2c2d      	cmp	r4, #45	; 0x2d
   d8a2e:	d133      	bne.n	d8a98 <_strtol_l.isra.0+0x84>
   d8a30:	f89c 4000 	ldrb.w	r4, [ip]
   d8a34:	f04f 0801 	mov.w	r8, #1
   d8a38:	f100 0c02 	add.w	ip, r0, #2
   d8a3c:	2b00      	cmp	r3, #0
   d8a3e:	d05c      	beq.n	d8afa <_strtol_l.isra.0+0xe6>
   d8a40:	2b10      	cmp	r3, #16
   d8a42:	d10c      	bne.n	d8a5e <_strtol_l.isra.0+0x4a>
   d8a44:	2c30      	cmp	r4, #48	; 0x30
   d8a46:	d10a      	bne.n	d8a5e <_strtol_l.isra.0+0x4a>
   d8a48:	f89c 0000 	ldrb.w	r0, [ip]
   d8a4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8a50:	2858      	cmp	r0, #88	; 0x58
   d8a52:	d14d      	bne.n	d8af0 <_strtol_l.isra.0+0xdc>
   d8a54:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8a58:	2310      	movs	r3, #16
   d8a5a:	f10c 0c02 	add.w	ip, ip, #2
   d8a5e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8a62:	3f01      	subs	r7, #1
   d8a64:	2600      	movs	r6, #0
   d8a66:	fbb7 f9f3 	udiv	r9, r7, r3
   d8a6a:	4630      	mov	r0, r6
   d8a6c:	fb03 7a19 	mls	sl, r3, r9, r7
   d8a70:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8a74:	2d09      	cmp	r5, #9
   d8a76:	d818      	bhi.n	d8aaa <_strtol_l.isra.0+0x96>
   d8a78:	462c      	mov	r4, r5
   d8a7a:	42a3      	cmp	r3, r4
   d8a7c:	dd24      	ble.n	d8ac8 <_strtol_l.isra.0+0xb4>
   d8a7e:	1c75      	adds	r5, r6, #1
   d8a80:	d007      	beq.n	d8a92 <_strtol_l.isra.0+0x7e>
   d8a82:	4581      	cmp	r9, r0
   d8a84:	d31d      	bcc.n	d8ac2 <_strtol_l.isra.0+0xae>
   d8a86:	d101      	bne.n	d8a8c <_strtol_l.isra.0+0x78>
   d8a88:	45a2      	cmp	sl, r4
   d8a8a:	db1a      	blt.n	d8ac2 <_strtol_l.isra.0+0xae>
   d8a8c:	fb00 4003 	mla	r0, r0, r3, r4
   d8a90:	2601      	movs	r6, #1
   d8a92:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8a96:	e7eb      	b.n	d8a70 <_strtol_l.isra.0+0x5c>
   d8a98:	2c2b      	cmp	r4, #43	; 0x2b
   d8a9a:	bf08      	it	eq
   d8a9c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8aa0:	46a8      	mov	r8, r5
   d8aa2:	bf08      	it	eq
   d8aa4:	f100 0c02 	addeq.w	ip, r0, #2
   d8aa8:	e7c8      	b.n	d8a3c <_strtol_l.isra.0+0x28>
   d8aaa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8aae:	2d19      	cmp	r5, #25
   d8ab0:	d801      	bhi.n	d8ab6 <_strtol_l.isra.0+0xa2>
   d8ab2:	3c37      	subs	r4, #55	; 0x37
   d8ab4:	e7e1      	b.n	d8a7a <_strtol_l.isra.0+0x66>
   d8ab6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8aba:	2d19      	cmp	r5, #25
   d8abc:	d804      	bhi.n	d8ac8 <_strtol_l.isra.0+0xb4>
   d8abe:	3c57      	subs	r4, #87	; 0x57
   d8ac0:	e7db      	b.n	d8a7a <_strtol_l.isra.0+0x66>
   d8ac2:	f04f 36ff 	mov.w	r6, #4294967295
   d8ac6:	e7e4      	b.n	d8a92 <_strtol_l.isra.0+0x7e>
   d8ac8:	1c73      	adds	r3, r6, #1
   d8aca:	d106      	bne.n	d8ada <_strtol_l.isra.0+0xc6>
   d8acc:	2322      	movs	r3, #34	; 0x22
   d8ace:	f8ce 3000 	str.w	r3, [lr]
   d8ad2:	4638      	mov	r0, r7
   d8ad4:	b942      	cbnz	r2, d8ae8 <_strtol_l.isra.0+0xd4>
   d8ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ada:	f1b8 0f00 	cmp.w	r8, #0
   d8ade:	d000      	beq.n	d8ae2 <_strtol_l.isra.0+0xce>
   d8ae0:	4240      	negs	r0, r0
   d8ae2:	2a00      	cmp	r2, #0
   d8ae4:	d0f7      	beq.n	d8ad6 <_strtol_l.isra.0+0xc2>
   d8ae6:	b10e      	cbz	r6, d8aec <_strtol_l.isra.0+0xd8>
   d8ae8:	f10c 31ff 	add.w	r1, ip, #4294967295
   d8aec:	6011      	str	r1, [r2, #0]
   d8aee:	e7f2      	b.n	d8ad6 <_strtol_l.isra.0+0xc2>
   d8af0:	2430      	movs	r4, #48	; 0x30
   d8af2:	2b00      	cmp	r3, #0
   d8af4:	d1b3      	bne.n	d8a5e <_strtol_l.isra.0+0x4a>
   d8af6:	2308      	movs	r3, #8
   d8af8:	e7b1      	b.n	d8a5e <_strtol_l.isra.0+0x4a>
   d8afa:	2c30      	cmp	r4, #48	; 0x30
   d8afc:	d0a4      	beq.n	d8a48 <_strtol_l.isra.0+0x34>
   d8afe:	230a      	movs	r3, #10
   d8b00:	e7ad      	b.n	d8a5e <_strtol_l.isra.0+0x4a>
   d8b02:	bf00      	nop
   d8b04:	000d9e3a 	.word	0x000d9e3a

000d8b08 <strtol>:
   d8b08:	4613      	mov	r3, r2
   d8b0a:	460a      	mov	r2, r1
   d8b0c:	4601      	mov	r1, r0
   d8b0e:	4802      	ldr	r0, [pc, #8]	; (d8b18 <strtol+0x10>)
   d8b10:	6800      	ldr	r0, [r0, #0]
   d8b12:	f7ff bf7f 	b.w	d8a14 <_strtol_l.isra.0>
   d8b16:	bf00      	nop
   d8b18:	2003e440 	.word	0x2003e440

000d8b1c <dynalib_user>:
   d8b1c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d8b2c:	00000000 25006925 2e00696c 6f684300     ....%i.%li...Cho
   d8b3c:	20656369 00203a31 696f6843 32206563     ice 1: .Choice 2
   d8b4c:	4300203a 63696f68 3a332065 6e690020     : .Choice 3: .in
   d8b5c:	74756f00 6d777000 00776400 5f007761     .out.pwm.dw.aw._
   d8b6c:	6b436558 6f6a7746 54756d62 5f723838     XeCkFwjobmuT88r_
   d8b7c:	36384b4e 796f324b 50625470 00425968     NK86K2oypTbPhYB.
   d8b8c:	00410031 00330032 2e62616c 77656874     1.A.2.3.lab.thew
   d8b9c:	632e6c63 6d006d6f 696c6461               cl.com.madlibs.

000d8bab <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d8bab:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d8bbb:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d8bcb:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8bdb:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8beb:	32203531 20313230 343a3930 36333a39     15 2021 09:49:36
   d8bfb:	64000000 75616665 0020746c 0042534d     ...default .MSB.
   d8c0b:	0042534c 4950533c 74746553 73676e69     LSB.<SPISettings
   d8c1b:	66656420 746c7561 533c003e 65534950      default>.<SPISe
   d8c2b:	6e697474 25207367 20752573 4d207325     ttings %s%u %s M
   d8c3b:	2545444f                                 ODE%u>.

000d8c42 <_ZL4font>:
   d8c42:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d8c52:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d8c62:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d8c72:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d8c82:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d8c92:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d8ca2:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d8cb2:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d8cc2:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d8cd2:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d8ce2:	00000000 5f000000 07000000 14000700     ......._........
   d8cf2:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d8d02:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d8d12:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d8d22:	08080800 00000808 20006060 02040810     ........``. ....
   d8d32:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d8d42:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d8d52:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d8d62:	00001e29 00000014 00003440 22140800     ).......@4....."
   d8d72:	14141441 41001414 02081422 06095901     A......A"....Y..
   d8d82:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d8d92:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d8da2:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d8db2:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d8dc2:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d8dd2:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d8de2:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d8df2:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d8e02:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d8e12:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d8e22:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d8e32:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d8e42:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d8e52:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d8e62:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d8e72:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d8e82:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d8e92:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d8ea2:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d8eb2:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d8ec2:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d8ed2:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   d8ee2:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d8ef2:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d8f02:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   d8f12:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d8f22:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   d8f32:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   d8f42:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   d8f52:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d8f62:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d8f72:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d8f82:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d8f92:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d8fa2:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d8fb2:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   d8fc2:	00ff0000 ff101010 14141400 101000ff     ................
   d8fd2:	10ff00ff f010f010 fc141414 f7141400     ................
   d8fe2:	0000ff00 14ff00ff fc04f414 10171414     ................
   d8ff2:	1f10101f 14141f10 10001f14 00f01010     ................
   d9002:	1f000000 10101010 1010101f 0010f010     ................
   d9012:	10ff0000 10101010 10101010 000010ff     ................
   d9022:	0014ff00 ff00ff00 101f0000 fc000017     ................
   d9032:	1414f404 14171017 f404f414 00ff0000     ................
   d9042:	141414f7 14141414 14f700f7 14171414     ................
   d9052:	101f1010 1414141f 101014f4 00f010f0     ................
   d9062:	1f101f00 1f000000 00000014 000014fc     ................
   d9072:	10f010f0 ff10ff10 ff141414 10101014     ................
   d9082:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   d9092:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   d90a2:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   d90b2:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   d90c2:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   d90d2:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   d90e2:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   d90f2:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   d9102:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   d9112:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   d9122:	00000018 30001010 0101ff40 01011f00     .......0@.......
   d9132:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000d9144 <_ZTV12Adafruit_GFX>:
	...
   d9154:	000d5725 000d7675 000d40a5 000d512d     %W..uv...@..-Q..
   d9164:	000d512f 000d5161 000d513d 000d514f     /Q..aQ..=Q..OQ..
   d9174:	000d5071 000d512d 000d5359 000d52d3     qP..-Q..YS...R..
   d9184:	000d5179 000d51b7 000d51f1 000d5237     yQ...Q...Q..7R..
   d9194:	000d52d5 000d5253                       .R..SR..

000d919c <_ZTV16OledWingAdafruit>:
	...
   d91a4:	000d5835 000d5855 000d5725 000d7675     5X..UX..%W..uv..
   d91b4:	000d6381 000d512d 000d512f 000d5161     .c..-Q../Q..aQ..
   d91c4:	000d513d 000d514f 000d5071 000d512d     =Q..OQ..qP..-Q..
   d91d4:	000d5359 000d653b 000d6acf 000d6a81     YS..;e...j...j..
   d91e4:	000d51f1 000d5237 000d52d5 000d5253     .Q..7R...R..SR..
   d91f4:	514d0400 00045454 49514d06 03706473     ..MQTT...MQIsdp.

000d9204 <_ZTVN8particle11SPISettingsE>:
	...
   d920c:	000d501d 000d4ff1 000d4ff3              .P...O...O..

000d9218 <_ZL12splash1_data>:
   d9218:	00000000 00800100 00000000 00000000     ................
   d9228:	00008003 00000000 07000000 000000c0     ................
   d9238:	00000000 c0070000 00000000 00000000     ................
   d9248:	00c00f00 00000000 00000000 0000e01f     ................
   d9258:	00000000 1f000000 000000e0 00000000     ................
   d9268:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   d9280:	0000f07f 00000000 7ff81f00 000000f0     ................
   d9290:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   d92a0:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   d92b0:	00000000 f9ff0f00 0000c0ff 00000000     ................
   d92c0:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   d92d0:	00000000 fc030000 80ffff73 00000000     ........s.......
   d92e0:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   d92f0:	000000ff 00000000 fc1ffe7f 00000000     ................
   d9300:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   d9310:	0000e0ff 00000000 ff191f00 000000c0     ................
   d9320:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   d9330:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   d9340:	00000000 fcffff00 00000000 00000000     ................
   d9350:	00feffff 00000000 ff000000 0000feff     ................
   d9360:	00000000 efff0100 000000fe 00000000     ................
   d9370:	fecfff01 00000000 03000000 00fe07ff     ................
   d9380:	00000000 fc030000 0000fe07 00000000     ................
   d9390:	03f00300 000000fe 00000000 fe008001     ................
	...
   d93a8:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   d93c0:	0000000c 07000000 00fc0080 00c00300     ................
   d93d0:	80070000 0000fc01 0000c003 01800700     ................
   d93e0:	030000fc 000000c0 e0018007 1e000000     ................
   d93f0:	07000000 00e00180 001e0000 9ff7e37f     ................
   d9400:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   d9410:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   d9420:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   d9430:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   d9440:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   d9450:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   d9460:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   d9470:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   d9480:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   d9490:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   d94a0:	ffffff00 ffffffff c0ffffff ffffffff     ................
   d94b0:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   d94c0:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   d94d0:	5b6bfdff c0fd6adb                       ..k[.j..

000d94d8 <_ZL12splash2_data>:
   d94d8:	00600000 00000000 00000000 00000000     ..`.............
   d94e8:	0000e000 00000000 00000000 01000000     ................
   d94f8:	000000e0 00000000 00000000 f0010000     ................
	...
   d9514:	00f00300 00000000 00000000 00000000     ................
   d9524:	0000f007 00000000 00000000 07000000     ................
   d9534:	000000f8 00000000 00000000 f80f0000     ................
   d9544:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   d9554:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   d9564:	00c00300 010000fe ffff00e0 000000f8     ................
   d9574:	f000c003 0f000000 7ffe7f00 030000c0     ................
   d9584:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   d9594:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   d95a4:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   d95b4:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   d95c4:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   d95d4:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   d95e4:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   d95f4:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   d9604:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   d9614:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   d9624:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   d9634:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   d9644:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   d9654:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   d966c:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   d967c:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   d968c:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   d969c:	ff7f000f a5feffff 198d9dad 060000e0     ................
   d96ac:	ffff7f00 adb5feff e07eb5ed              ..........~.

000d96b8 <_ZTV16Adafruit_SSD1306>:
	...
   d96c0:	000d6355 000d636d 000d5725 000d7675     Uc..mc..%W..uv..
   d96d0:	000d6381 000d512d 000d512f 000d5161     .c..-Q../Q..aQ..
   d96e0:	000d513d 000d514f 000d5071 000d512d     =Q..OQ..qP..-Q..
   d96f0:	000d5359 000d653b 000d6acf 000d6a81     YS..;e...j...j..
   d9700:	000d51f1 000d5237 000d52d5 000d5253     .Q..7R...R..SR..

000d9710 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d9710:	e0c08000 fefcf8f0                       ........

000d9718 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d9718:	07030100 7f3f1f0f                       ......?.

000d9720 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d9720:	a880d5ae                                ....

000d9724 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d9724:	8d4000d3                                ..@.

000d9728 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d9728:	c8a10020                                 ...

000d972c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d972c:	a6a440db                                 .@....

000d9732 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d9732:	8f8102da                                ....

000d9736 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d9736:	                                         ...

000d9739 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d9739:	                                         ...

000d973c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d973c:	21ff0022 00000000                       "..!....

000d9744 <_ZL22BlynkReadHandlerVector>:
   d9744:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9754:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9764:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9774:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9784:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9794:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97a4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97b4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97c4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97d4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97e4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d97f4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9804:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9814:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9824:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9834:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9844:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9854:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9864:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9874:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9884:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9894:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98a4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98b4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98c4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98d4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98e4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d98f4:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9904:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9914:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9924:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..
   d9934:	000d6c59 000d6c59 000d6c59 000d6c59     Yl..Yl..Yl..Yl..

000d9944 <_ZL23BlynkWriteHandlerVector>:
   d9944:	000d6c5b 000d4251 000d6c5b 000d6c5b     [l..QB..[l..[l..
   d9954:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9964:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9974:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9984:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9994:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99a4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99b4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99c4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99d4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99e4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d99f4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a04:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a14:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a24:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a34:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a44:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a54:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a64:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a74:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a84:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9a94:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9aa4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9ab4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9ac4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9ad4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9ae4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9af4:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9b04:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9b14:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9b24:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..
   d9b34:	000d6c5b 000d6c5b 000d6c5b 000d6c5b     [l..[l..[l..[l..

000d9b44 <_ZTVN5spark13EthernetClassE>:
	...
   d9b4c:	000d72af 000d72a5 000d729b 000d7291     .r...r...r...r..
   d9b5c:	000d7285 000d7279 000d83c5 000d83cd     .r..yr..........
   d9b6c:	000d726d 000d7265 000d725b 000d7251     mr..er..[r..Qr..
   d9b7c:	000d83fd                                ....

000d9b80 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9b80:	18100800 38302820                       .... (08

000d9b88 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9b90:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d9ba0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d9bb0 <_ZTV9IPAddress>:
	...
   d9bb8:	000d797d 000d796d 000d796f              }y..my..oy..

000d9bc4 <_ZTV9USBSerial>:
	...
   d9bcc:	000d7aa1 000d7b09 000d7adf 000d7675     .z...{...z..uv..
   d9bdc:	000d7ad1 000d7aa3 000d7ab3 000d7b03     .z...z...z...{..
   d9bec:	000d7ac3 000d7a9d                       .z...z..

000d9bf4 <_ZTV11USARTSerial>:
	...
   d9bfc:	000d7bad 000d7c19 000d7bf1 000d7675     .{...|...{..uv..
   d9c0c:	000d7bc1 000d7bdd 000d7bcf 000d7beb     .{...{...{...{..
   d9c1c:	000d7baf 000d7bb3                       .{...{..

000d9c24 <_ZTV7TwoWire>:
	...
   d9c2c:	000d7ca9 000d7cf3 000d7ccb 000d7cab     .|...|...|...|..
   d9c3c:	000d7cd3 000d7cdb 000d7ce3 000d7ceb     .|...|...|...|..
   d9c4c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d9c5c:	203d2072 00006425                       r = %d..

000d9c64 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c6c:	000d7dd7 000d7df9 000d8213 000d7e07     .}...}.......~..
   d9c7c:	000d7dd9                                .}..

000d9c80 <_ZTV9TCPClient>:
	...
   d9c88:	000d7e85 000d7eb9 000d7d55 000d7d6f     .~...~..U}..o}..
   d9c98:	000d80a9 000d7f1b 000d7eed 000d7d99     .........~...}..
   d9ca8:	000d7fb3 000d8219 000d7f4f 000d815d     ........O...]...
   d9cb8:	000d7d9b 000d7dcd 000d7d81 000d7e0b     .}...}...}...~..
   d9cc8:	000d7ecd                                .~..

000d9ccc <_ZTVN5spark9WiFiClassE>:
	...
   d9cd4:	000d8367 000d835d 000d8353 000d8315     g...]...S.......
   d9ce4:	000d77e9 000d8347 000d83c5 000d83cd     .w..G...........
   d9cf4:	000d833b 000d8333 000d8329 000d831f     ;...3...).......
   d9d04:	000d83fd                                ....

000d9d08 <_ZTVN5spark12NetworkClassE>:
	...
   d9d10:	000d8385 000d838f 000d8399 000d83a3     ................
   d9d20:	000d83ad 000d83b9 000d83c5 000d83cd     ................
   d9d30:	000d83d5 000d83e1 000d83e9 000d83f3     ................
   d9d40:	000d83fd                                ....

000d9d44 <_ZSt7nothrow>:
	...

000d9d45 <_ZTSSt19_Sp_make_shared_tag>:
   d9d45:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9d55:	5f646572 00676174                        red_tag....

000d9d60 <_ZTISt19_Sp_make_shared_tag>:
   d9d60:	000d9da0 000d9d45                       ....E...

000d9d68 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9d68:	000d9e00 000d9d74 000d9e24              ....t...$...

000d9d74 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9d74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9d84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9d94:	00000045                                E...

000d9d98 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9d98:	00000000 000d9d68 000d8741 000d8755     ....h...A...U...
   d9da8:	000d88e9 000d88e9 000d87bf 000d8701     ................
   d9db8:	000d87a7 000d8769 000d8735              ....i...5...

000d9dc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9dc4:	000d9e00 000d9dd0 000d9d68              ........h...

000d9dd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9dd0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9de0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9df0:	456f666e 00000000                       nfoE....

000d9df8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9df8:	00000000 000d9dc4 000d87e9 000d87fd     ................
   d9e08:	000d88e9 000d88e9 000d87bf 000d8701     ................
   d9e18:	000d88bd 000d8849 000d8811              ....I.......

000d9e24 <_ZTISt9type_info>:
   d9e24:	000d9da0 000d9e2c                       ....,...

000d9e2c <_ZTSSt9type_info>:
   d9e2c:	74397453 5f657079 6f666e69               St9type_info.

000d9e39 <_ctype_>:
   d9e39:	20202000 20202020 28282020 20282828     .         ((((( 
   d9e49:	20202020 20202020 20202020 20202020                     
   d9e59:	10108820 10101010 10101010 10101010      ...............
   d9e69:	04040410 04040404 10040404 10101010     ................
   d9e79:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9e89:	01010101 01010101 01010101 10101010     ................
   d9e99:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9ea9:	02020202 02020202 02020202 10101010     ................
   d9eb9:	00000020 00000000 00000000 00000000      ...............
	...

000d9f3a <link_const_variable_data_end>:
	...

000d9f3c <link_constructors_location>:
   d9f3c:	000d4ec1 	.word	0x000d4ec1
   d9f40:	000d72b9 	.word	0x000d72b9
   d9f44:	000d7449 	.word	0x000d7449
   d9f48:	000d764d 	.word	0x000d764d
   d9f4c:	000d77f5 	.word	0x000d77f5
   d9f50:	000d7805 	.word	0x000d7805
   d9f54:	000d782d 	.word	0x000d782d
   d9f58:	000d8371 	.word	0x000d8371
   d9f5c:	000d84dd 	.word	0x000d84dd
