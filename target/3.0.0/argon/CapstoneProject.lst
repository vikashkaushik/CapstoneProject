
c:/Users/Vikash/Downloads/CapstoneProject/target/3.0.0/argon/CapstoneProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004784  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d87a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e4ac  000d87a4  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002dc  2003e514  2003e514  0002e514  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d880c  000d880c  0002880c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8834  000d8834  00028834  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001f9c99  00000000  00000000  00028838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001d58d  00000000  00000000  002224d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00044df3  00000000  00000000  0023fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003490  00000000  00000000  00284851  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a6a0  00000000  00000000  00287ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00041916  00000000  00000000  00292381  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f350  00000000  00000000  002d3c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ffc2  00000000  00000000  00322fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009a60  00000000  00000000  00452fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fc23 	bl	d7878 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fc2b 	bl	d7894 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4ac 	.word	0x2003e4ac
   d4048:	000d87a4 	.word	0x000d87a4
   d404c:	2003e514 	.word	0x2003e514
   d4050:	2003e514 	.word	0x2003e514
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 fc3d 	bl	d68dc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d877c 	.word	0x000d877c
   d407c:	000d87a0 	.word	0x000d87a0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b880 	b.w	d4184 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f89b 	bl	d41c0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 bbe7 	b.w	d6860 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f002 b90f 	b.w	d62b4 <malloc>

000d4096 <_Znaj>:
   d4096:	f002 b90d 	b.w	d62b4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f002 b913 	b.w	d62c4 <free>

000d409e <_ZdaPv>:
   d409e:	f002 b911 	b.w	d62c4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f856 	bl	d615c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5e2d 	.word	0x000d5e2d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40c8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ca:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d40ce:	6003      	str	r3, [r0, #0]
   d40d0:	4605      	mov	r5, r0
   d40d2:	b17c      	cbz	r4, d40f4 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	3b01      	subs	r3, #1
   d40d8:	6063      	str	r3, [r4, #4]
   d40da:	b95b      	cbnz	r3, d40f4 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	4620      	mov	r0, r4
   d40e0:	689b      	ldr	r3, [r3, #8]
   d40e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e4:	68a3      	ldr	r3, [r4, #8]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	60a3      	str	r3, [r4, #8]
   d40ea:	b91b      	cbnz	r3, d40f4 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	68db      	ldr	r3, [r3, #12]
   d40f2:	4798      	blx	r3
   d40f4:	4628      	mov	r0, r5
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	000d85c8 	.word	0x000d85c8

000d40fc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40fc:	b40e      	push	{r1, r2, r3}
   d40fe:	b503      	push	{r0, r1, lr}
   d4100:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4102:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4104:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4108:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d410a:	f002 fb26 	bl	d675a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d410e:	b002      	add	sp, #8
   d4110:	f85d eb04 	ldr.w	lr, [sp], #4
   d4114:	b003      	add	sp, #12
   d4116:	4770      	bx	lr

000d4118 <_Z8callbackPcPhj>:
MQTT client("lab.thewcl.com", 1883, callback);
#include "oled-wing-adafruit.h"
OledWingAdafruit display;
void callback(char *topic, byte *payload, unsigned int length);
void callback(char* topic, byte* payload, unsigned int length)
{
   d4118:	b5b0      	push	{r4, r5, r7, lr}
  
  char p[length + 1];
   d411a:	f102 0308 	add.w	r3, r2, #8
   d411e:	f023 0307 	bic.w	r3, r3, #7
{
   d4122:	af00      	add	r7, sp, #0
   d4124:	4614      	mov	r4, r2
  char p[length + 1];
   d4126:	ebad 0d03 	sub.w	sp, sp, r3
  memcpy(p, payload, length);
  p[length] = NULL;
   d412a:	2500      	movs	r5, #0
  memcpy(p, payload, length);
   d412c:	4668      	mov	r0, sp
   d412e:	f003 fba3 	bl	d7878 <memcpy>
  p[length] = NULL;
   d4132:	f80d 5004 	strb.w	r5, [sp, r4]
  Serial.printf("%s",p);
  display.clearDisplay();
   d4136:	4c11      	ldr	r4, [pc, #68]	; (d417c <_Z8callbackPcPhj+0x64>)
  Serial.printf("%s",p);
   d4138:	f002 fcec 	bl	d6b14 <_Z16_fetch_usbserialv>
   d413c:	466a      	mov	r2, sp
   d413e:	4910      	ldr	r1, [pc, #64]	; (d4180 <_Z8callbackPcPhj+0x68>)
   d4140:	f7ff ffdc 	bl	d40fc <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   d4144:	4620      	mov	r0, r4
   d4146:	f001 fb2b 	bl	d57a0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d414a:	4620      	mov	r0, r4
   d414c:	2101      	movs	r1, #1
   d414e:	f000 fcc2 	bl	d4ad6 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4152:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4156:	6163      	str	r3, [r4, #20]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println(p);
   d4158:	4669      	mov	r1, sp
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   d415a:	6125      	str	r5, [r4, #16]
   d415c:	4620      	mov	r0, r4
   d415e:	f002 fad4 	bl	d670a <_ZN5Print7printlnEPKc>
  display.display();
   d4162:	4620      	mov	r0, r4
   d4164:	f001 fd88 	bl	d5c78 <_ZN16Adafruit_SSD13067displayEv>
  delay(1000);
   d4168:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d416c:	f002 fb3e 	bl	d67ec <delay>
  Serial.println();
   d4170:	f002 fcd0 	bl	d6b14 <_Z16_fetch_usbserialv>
   d4174:	f002 fabd 	bl	d66f2 <_ZN5Print7printlnEv>
}  
   d4178:	46bd      	mov	sp, r7
   d417a:	bdb0      	pop	{r4, r5, r7, pc}
   d417c:	2003e5d4 	.word	0x2003e5d4
   d4180:	000d7924 	.word	0x000d7924

000d4184 <setup>:
// setup() runs once, when the device is first turned on.
void setup() {
   d4184:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  display.setup();
   d4186:	480d      	ldr	r0, [pc, #52]	; (d41bc <setup+0x38>)
   d4188:	f000 fcf4 	bl	d4b74 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d418c:	480b      	ldr	r0, [pc, #44]	; (d41bc <setup+0x38>)
   d418e:	f001 fb07 	bl	d57a0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4192:	2101      	movs	r1, #1
   d4194:	4809      	ldr	r0, [pc, #36]	; (d41bc <setup+0x38>)
   d4196:	f000 fc9e 	bl	d4ad6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d419a:	4808      	ldr	r0, [pc, #32]	; (d41bc <setup+0x38>)
   d419c:	2300      	movs	r3, #0
   d419e:	6103      	str	r3, [r0, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d41a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41a4:	6143      	str	r3, [r0, #20]
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  
  display.display();
   d41a6:	f001 fd67 	bl	d5c78 <_ZN16Adafruit_SSD13067displayEv>
  Serial.begin(9600);
   d41aa:	f002 fcb3 	bl	d6b14 <_Z16_fetch_usbserialv>
}
   d41ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   d41b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b6:	f002 bca1 	b.w	d6afc <_ZN9USBSerial5beginEl>
   d41ba:	bf00      	nop
   d41bc:	2003e5d4 	.word	0x2003e5d4

000d41c0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // The core of your code will likely live here.
  display.loop();
   d41c2:	4c14      	ldr	r4, [pc, #80]	; (d4214 <loop+0x54>)
   d41c4:	4620      	mov	r0, r4
   d41c6:	f000 fcfe 	bl	d4bc6 <_ZN16OledWingAdafruit4loopEv>
  display.clearDisplay();
   d41ca:	4620      	mov	r0, r4
   d41cc:	f001 fae8 	bl	d57a0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d41d0:	4620      	mov	r0, r4
   d41d2:	2101      	movs	r1, #1
   d41d4:	f000 fc7f 	bl	d4ad6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d41d8:	2200      	movs	r2, #0
   d41da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  if (client.isConnected()) {
   d41de:	480e      	ldr	r0, [pc, #56]	; (d4218 <loop+0x58>)
   d41e0:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d41e4:	f000 fea7 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d41e8:	b140      	cbz	r0, d41fc <loop+0x3c>
    client.loop();
   d41ea:	480b      	ldr	r0, [pc, #44]	; (d4218 <loop+0x58>)
   d41ec:	f000 ffec 	bl	d51c8 <_ZN4MQTT4loopEv>
    client.subscribe("madlibs");
  } 
  else {
    client.connect(System.deviceID());
    client.subscribe("madlibs");
   d41f0:	490a      	ldr	r1, [pc, #40]	; (d421c <loop+0x5c>)
   d41f2:	4809      	ldr	r0, [pc, #36]	; (d4218 <loop+0x58>)
   d41f4:	f001 f930 	bl	d5458 <_ZN4MQTT9subscribeEPKc>
    
  }
  
  
}
   d41f8:	b004      	add	sp, #16
   d41fa:	bd10      	pop	{r4, pc}
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d41fc:	4668      	mov	r0, sp
   d41fe:	f002 f849 	bl	d6294 <spark_deviceID>
    client.connect(System.deviceID());
   d4202:	9900      	ldr	r1, [sp, #0]
   d4204:	4804      	ldr	r0, [pc, #16]	; (d4218 <loop+0x58>)
   d4206:	f000 ff87 	bl	d5118 <_ZN4MQTT7connectEPKc>
   d420a:	4668      	mov	r0, sp
   d420c:	f002 f9ab 	bl	d6566 <_ZN6StringD1Ev>
   d4210:	e7ee      	b.n	d41f0 <loop+0x30>
   d4212:	bf00      	nop
   d4214:	2003e5d4 	.word	0x2003e5d4
   d4218:	2003e574 	.word	0x2003e574
   d421c:	000d7927 	.word	0x000d7927

000d4220 <_GLOBAL__sub_I_Blynk>:
}
   d4220:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4222:	4d1c      	ldr	r5, [pc, #112]	; (d4294 <_GLOBAL__sub_I_Blynk+0x74>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4224:	4e1c      	ldr	r6, [pc, #112]	; (d4298 <_GLOBAL__sub_I_Blynk+0x78>)
SYSTEM_THREAD(ENABLED);
   d4226:	2100      	movs	r1, #0
   d4228:	2001      	movs	r0, #1
   d422a:	f001 ffb7 	bl	d619c <system_thread_set_state>
   d422e:	4628      	mov	r0, r5
   d4230:	2400      	movs	r4, #0
   d4232:	f002 ffbb 	bl	d71ac <_ZN9TCPClientC1Ev>
   d4236:	f105 001c 	add.w	r0, r5, #28
   d423a:	f002 fbbb 	bl	d69b4 <_ZN9IPAddressC1Ev>
   d423e:	636c      	str	r4, [r5, #52]	; 0x34
   d4240:	872c      	strh	r4, [r5, #56]	; 0x38
   d4242:	4632      	mov	r2, r6
   d4244:	4915      	ldr	r1, [pc, #84]	; (d429c <_GLOBAL__sub_I_Blynk+0x7c>)
   d4246:	4628      	mov	r0, r5
   d4248:	f003 f9ec 	bl	d7624 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d424c:	4b14      	ldr	r3, [pc, #80]	; (d42a0 <_GLOBAL__sub_I_Blynk+0x80>)
MQTT client("lab.thewcl.com", 1883, callback);
   d424e:	4915      	ldr	r1, [pc, #84]	; (d42a4 <_GLOBAL__sub_I_Blynk+0x84>)
   d4250:	619c      	str	r4, [r3, #24]
   d4252:	e9c3 5400 	strd	r5, r4, [r3]
   d4256:	4d14      	ldr	r5, [pc, #80]	; (d42a8 <_GLOBAL__sub_I_Blynk+0x88>)
   d4258:	839c      	strh	r4, [r3, #28]
   d425a:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d425e:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4262:	f240 725b 	movw	r2, #1883	; 0x75b
   d4266:	4b11      	ldr	r3, [pc, #68]	; (d42ac <_GLOBAL__sub_I_Blynk+0x8c>)
   d4268:	9400      	str	r4, [sp, #0]
   d426a:	4628      	mov	r0, r5
OledWingAdafruit display;
   d426c:	4c10      	ldr	r4, [pc, #64]	; (d42b0 <_GLOBAL__sub_I_Blynk+0x90>)
MQTT client("lab.thewcl.com", 1883, callback);
   d426e:	f000 fd59 	bl	d4d24 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4272:	4632      	mov	r2, r6
   d4274:	490f      	ldr	r1, [pc, #60]	; (d42b4 <_GLOBAL__sub_I_Blynk+0x94>)
   d4276:	4628      	mov	r0, r5
   d4278:	f003 f9d4 	bl	d7624 <__aeabi_atexit>
OledWingAdafruit display;
   d427c:	2107      	movs	r1, #7
   d427e:	4620      	mov	r0, r4
   d4280:	f000 fc4a 	bl	d4b18 <_ZN16OledWingAdafruitC1Ei>
   d4284:	490c      	ldr	r1, [pc, #48]	; (d42b8 <_GLOBAL__sub_I_Blynk+0x98>)
   d4286:	4632      	mov	r2, r6
   d4288:	4620      	mov	r0, r4
}
   d428a:	b002      	add	sp, #8
   d428c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
OledWingAdafruit display;
   d4290:	f003 b9c8 	b.w	d7624 <__aeabi_atexit>
   d4294:	2003e538 	.word	0x2003e538
   d4298:	2003e514 	.word	0x2003e514
   d429c:	000d40c9 	.word	0x000d40c9
   d42a0:	2003e518 	.word	0x2003e518
   d42a4:	000d792f 	.word	0x000d792f
   d42a8:	2003e574 	.word	0x2003e574
   d42ac:	000d4119 	.word	0x000d4119
   d42b0:	2003e5d4 	.word	0x2003e5d4
   d42b4:	000d5461 	.word	0x000d5461
   d42b8:	000d4ae5 	.word	0x000d4ae5

000d42bc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d42bc:	4770      	bx	lr

000d42be <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d42be:	b510      	push	{r4, lr}
  }
   d42c0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d42c2:	4604      	mov	r4, r0
  }
   d42c4:	f003 f9b3 	bl	d762e <_ZdlPvj>
   d42c8:	4620      	mov	r0, r4
   d42ca:	bd10      	pop	{r4, pc}

000d42cc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d42cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d42ce:	4604      	mov	r4, r0
   d42d0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d42d2:	7922      	ldrb	r2, [r4, #4]
   d42d4:	68a3      	ldr	r3, [r4, #8]
   d42d6:	b132      	cbz	r2, d42e6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d42d8:	b9a3      	cbnz	r3, d4304 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d42da:	490b      	ldr	r1, [pc, #44]	; (d4308 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d42dc:	b002      	add	sp, #8
   d42de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d42e2:	f002 b9ff 	b.w	d66e4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42e6:	4a09      	ldr	r2, [pc, #36]	; (d430c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d42e8:	7b26      	ldrb	r6, [r4, #12]
   d42ea:	4d09      	ldr	r5, [pc, #36]	; (d4310 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42ec:	4909      	ldr	r1, [pc, #36]	; (d4314 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42ee:	7b64      	ldrb	r4, [r4, #13]
   d42f0:	2e01      	cmp	r6, #1
   d42f2:	bf18      	it	ne
   d42f4:	4629      	movne	r1, r5
   d42f6:	e9cd 1400 	strd	r1, r4, [sp]
   d42fa:	4907      	ldr	r1, [pc, #28]	; (d4318 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42fc:	f7ff fefe 	bl	d40fc <_ZN5Print6printfEPKcz>
  }
   d4300:	b002      	add	sp, #8
   d4302:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4304:	4a05      	ldr	r2, [pc, #20]	; (d431c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4306:	e7ef      	b.n	d42e8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4308:	000d794f 	.word	0x000d794f
   d430c:	000d7946 	.word	0x000d7946
   d4310:	000d794b 	.word	0x000d794b
   d4314:	000d7947 	.word	0x000d7947
   d4318:	000d7965 	.word	0x000d7965
   d431c:	000d793e 	.word	0x000d793e

000d4320 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4324:	b085      	sub	sp, #20
   d4326:	461f      	mov	r7, r3
   d4328:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d432c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4330:	eba8 0902 	sub.w	r9, r8, r2
   d4334:	eba7 0a01 	sub.w	sl, r7, r1
   d4338:	f1b9 0f00 	cmp.w	r9, #0
   d433c:	bfb8      	it	lt
   d433e:	f1c9 0900 	rsblt	r9, r9, #0
   d4342:	f1ba 0f00 	cmp.w	sl, #0
   d4346:	bfb8      	it	lt
   d4348:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d434c:	45d1      	cmp	r9, sl
        uint16_t color) {
   d434e:	4683      	mov	fp, r0
   d4350:	460c      	mov	r4, r1
   d4352:	4615      	mov	r5, r2
    if (steep) {
   d4354:	dd04      	ble.n	d4360 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4356:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4358:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d435a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d435c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d435e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4360:	42bc      	cmp	r4, r7
   d4362:	dd05      	ble.n	d4370 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4364:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4366:	4645      	mov	r5, r8
   d4368:	4690      	mov	r8, r2
    if (x0 > x1) {
   d436a:	4622      	mov	r2, r4
   d436c:	463c      	mov	r4, r7
   d436e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4370:	1b3e      	subs	r6, r7, r4
   d4372:	b2b2      	uxth	r2, r6
   d4374:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4376:	eba8 0205 	sub.w	r2, r8, r5
   d437a:	2a00      	cmp	r2, #0
   d437c:	bfb8      	it	lt
   d437e:	4252      	neglt	r2, r2
   d4380:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4382:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4386:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d438a:	4545      	cmp	r5, r8
   d438c:	bfb4      	ite	lt
   d438e:	2201      	movlt	r2, #1
   d4390:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4394:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4396:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4398:	42bc      	cmp	r4, r7
   d439a:	dc1c      	bgt.n	d43d6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d439c:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d43a0:	9303      	str	r3, [sp, #12]
        if (steep) {
   d43a2:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d43a4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d43a8:	bfc7      	ittee	gt
   d43aa:	4629      	movgt	r1, r5
   d43ac:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d43ae:	462a      	movle	r2, r5
   d43b0:	4621      	movle	r1, r4
   d43b2:	4658      	mov	r0, fp
   d43b4:	47c0      	blx	r8
        }
        err -= dy;
   d43b6:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d43b8:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d43ba:	1ab6      	subs	r6, r6, r2
   d43bc:	b2b1      	uxth	r1, r6
   d43be:	b236      	sxth	r6, r6
        if (err < 0) {
   d43c0:	2e00      	cmp	r6, #0
   d43c2:	da05      	bge.n	d43d0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d43c4:	9a02      	ldr	r2, [sp, #8]
   d43c6:	4415      	add	r5, r2
            err += dx;
   d43c8:	9a00      	ldr	r2, [sp, #0]
   d43ca:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d43cc:	b22d      	sxth	r5, r5
            err += dx;
   d43ce:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d43d0:	3401      	adds	r4, #1
   d43d2:	b224      	sxth	r4, r4
   d43d4:	e7e0      	b.n	d4398 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d43d6:	b005      	add	sp, #20
   d43d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d43dc <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d43dc:	4770      	bx	lr

000d43de <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d43de:	b410      	push	{r4}
    drawPixel(x, y, color);
   d43e0:	6804      	ldr	r4, [r0, #0]
   d43e2:	6924      	ldr	r4, [r4, #16]
   d43e4:	46a4      	mov	ip, r4
}
   d43e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d43ea:	4760      	bx	ip

000d43ec <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43ec:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d43ee:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d43f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d43f4:	9502      	str	r5, [sp, #8]
   d43f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d43f8:	46a4      	mov	ip, r4
}
   d43fa:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d43fc:	4760      	bx	ip

000d43fe <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43fe:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4400:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4402:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d4406:	9502      	str	r5, [sp, #8]
   d4408:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d440a:	46a4      	mov	ip, r4
}
   d440c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d440e:	4760      	bx	ip

000d4410 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4410:	b470      	push	{r4, r5, r6}
   d4412:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4416:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d441a:	6804      	ldr	r4, [r0, #0]
   d441c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4420:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4422:	46a4      	mov	ip, r4
}
   d4424:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d4426:	4760      	bx	ip

000d4428 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d442c:	461c      	mov	r4, r3
    startWrite();
   d442e:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d4430:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4434:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4436:	4605      	mov	r5, r0
   d4438:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d443a:	3c01      	subs	r4, #1
   d443c:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d443e:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d4440:	b224      	sxth	r4, r4
    startWrite();
   d4442:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4444:	682b      	ldr	r3, [r5, #0]
   d4446:	f8cd 8004 	str.w	r8, [sp, #4]
   d444a:	9400      	str	r4, [sp, #0]
   d444c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d444e:	4628      	mov	r0, r5
   d4450:	463b      	mov	r3, r7
   d4452:	4632      	mov	r2, r6
   d4454:	4639      	mov	r1, r7
   d4456:	47a0      	blx	r4
    endWrite();
   d4458:	682b      	ldr	r3, [r5, #0]
   d445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d445c:	4628      	mov	r0, r5
}
   d445e:	b002      	add	sp, #8
   d4460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4464:	4718      	bx	r3

000d4466 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4466:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d446a:	461d      	mov	r5, r3
    startWrite();
   d446c:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d446e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4472:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4474:	4604      	mov	r4, r0
   d4476:	4617      	mov	r7, r2
   d4478:	460e      	mov	r6, r1
    startWrite();
   d447a:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d447c:	e9cd 7800 	strd	r7, r8, [sp]
   d4480:	6822      	ldr	r2, [r4, #0]
   d4482:	1e6b      	subs	r3, r5, #1
   d4484:	4433      	add	r3, r6
   d4486:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4488:	4620      	mov	r0, r4
   d448a:	b21b      	sxth	r3, r3
   d448c:	463a      	mov	r2, r7
   d448e:	4631      	mov	r1, r6
   d4490:	47a8      	blx	r5
    endWrite();
   d4492:	6823      	ldr	r3, [r4, #0]
   d4494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4496:	4620      	mov	r0, r4
}
   d4498:	b002      	add	sp, #8
   d449a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d449e:	4718      	bx	r3

000d44a0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44a4:	461e      	mov	r6, r3
    startWrite();
   d44a6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44a8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d44ac:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44ae:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d44b2:	460c      	mov	r4, r1
   d44b4:	4605      	mov	r5, r0
   d44b6:	4617      	mov	r7, r2
    startWrite();
   d44b8:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d44ba:	4426      	add	r6, r4
   d44bc:	42b4      	cmp	r4, r6
   d44be:	682b      	ldr	r3, [r5, #0]
   d44c0:	da0b      	bge.n	d44da <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d44c2:	f8cd 8000 	str.w	r8, [sp]
   d44c6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44ca:	4621      	mov	r1, r4
   d44cc:	464b      	mov	r3, r9
   d44ce:	463a      	mov	r2, r7
   d44d0:	4628      	mov	r0, r5
   d44d2:	3401      	adds	r4, #1
   d44d4:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d44d6:	b224      	sxth	r4, r4
   d44d8:	e7f0      	b.n	d44bc <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d44da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44dc:	4628      	mov	r0, r5
}
   d44de:	b002      	add	sp, #8
   d44e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d44e4:	4718      	bx	r3

000d44e6 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d44e6:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d44e8:	6802      	ldr	r2, [r0, #0]
   d44ea:	9101      	str	r1, [sp, #4]
   d44ec:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d44f0:	9100      	str	r1, [sp, #0]
   d44f2:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d44f4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d44f8:	2200      	movs	r2, #0
   d44fa:	4611      	mov	r1, r2
   d44fc:	47a0      	blx	r4
}
   d44fe:	b002      	add	sp, #8
   d4500:	bd10      	pop	{r4, pc}

000d4502 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4502:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4506:	461d      	mov	r5, r3
    startWrite();
   d4508:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d450a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d450e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4510:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4514:	4604      	mov	r4, r0
   d4516:	460f      	mov	r7, r1
   d4518:	4616      	mov	r6, r2
    startWrite();
   d451a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d451c:	6823      	ldr	r3, [r4, #0]
   d451e:	f8cd 8000 	str.w	r8, [sp]
   d4522:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4526:	4632      	mov	r2, r6
   d4528:	462b      	mov	r3, r5
   d452a:	4639      	mov	r1, r7
   d452c:	4620      	mov	r0, r4
   d452e:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4530:	6823      	ldr	r3, [r4, #0]
   d4532:	f8cd 8000 	str.w	r8, [sp]
   d4536:	f109 32ff 	add.w	r2, r9, #4294967295
   d453a:	4432      	add	r2, r6
   d453c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d4540:	4639      	mov	r1, r7
   d4542:	462b      	mov	r3, r5
   d4544:	4620      	mov	r0, r4
   d4546:	b212      	sxth	r2, r2
   d4548:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d454a:	6823      	ldr	r3, [r4, #0]
   d454c:	f8cd 8000 	str.w	r8, [sp]
   d4550:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4554:	4632      	mov	r2, r6
   d4556:	464b      	mov	r3, r9
   d4558:	4639      	mov	r1, r7
   d455a:	4620      	mov	r0, r4
   d455c:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d455e:	1e6b      	subs	r3, r5, #1
   d4560:	19d9      	adds	r1, r3, r7
   d4562:	6823      	ldr	r3, [r4, #0]
   d4564:	f8cd 8000 	str.w	r8, [sp]
   d4568:	6a1d      	ldr	r5, [r3, #32]
   d456a:	4620      	mov	r0, r4
   d456c:	464b      	mov	r3, r9
   d456e:	4632      	mov	r2, r6
   d4570:	b209      	sxth	r1, r1
   d4572:	47a8      	blx	r5
    endWrite();
   d4574:	6823      	ldr	r3, [r4, #0]
   d4576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4578:	4620      	mov	r0, r4
}
   d457a:	b002      	add	sp, #8
   d457c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4580:	4718      	bx	r3

000d4582 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4582:	4770      	bx	lr

000d4584 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4588:	4299      	cmp	r1, r3
        uint16_t color) {
   d458a:	4616      	mov	r6, r2
   d458c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4590:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4594:	6802      	ldr	r2, [r0, #0]
   d4596:	4680      	mov	r8, r0
   d4598:	460d      	mov	r5, r1
   d459a:	461c      	mov	r4, r3
    if(x0 == x1){
   d459c:	d113      	bne.n	d45c6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d459e:	42be      	cmp	r6, r7
   d45a0:	bfc8      	it	gt
   d45a2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45a4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d45a8:	bfc4      	itt	gt
   d45aa:	463e      	movgt	r6, r7
   d45ac:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d45ae:	1c7b      	adds	r3, r7, #1
   d45b0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d45b2:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45b4:	b21b      	sxth	r3, r3
   d45b6:	4632      	mov	r2, r6
   d45b8:	4629      	mov	r1, r5
   d45ba:	4640      	mov	r0, r8
   d45bc:	46a4      	mov	ip, r4
}
   d45be:	b003      	add	sp, #12
   d45c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45c4:	4760      	bx	ip
    } else if(y0 == y1){
   d45c6:	42be      	cmp	r6, r7
   d45c8:	d10a      	bne.n	d45e0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d45ca:	4299      	cmp	r1, r3
   d45cc:	bfc2      	ittt	gt
   d45ce:	460b      	movgt	r3, r1
   d45d0:	4625      	movgt	r5, r4
   d45d2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d45d4:	1c63      	adds	r3, r4, #1
   d45d6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d45da:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d45dc:	1b5b      	subs	r3, r3, r5
   d45de:	e7e9      	b.n	d45b4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d45e0:	6953      	ldr	r3, [r2, #20]
   d45e2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d45e4:	e9cd 7900 	strd	r7, r9, [sp]
   d45e8:	f8d8 3000 	ldr.w	r3, [r8]
   d45ec:	4640      	mov	r0, r8
   d45ee:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d45f0:	4632      	mov	r2, r6
   d45f2:	4623      	mov	r3, r4
   d45f4:	4629      	mov	r1, r5
   d45f6:	47b8      	blx	r7
        endWrite();
   d45f8:	f8d8 3000 	ldr.w	r3, [r8]
   d45fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45fe:	4640      	mov	r0, r8
}
   d4600:	b003      	add	sp, #12
   d4602:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d4606:	4718      	bx	r3

000d4608 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d4608:	f001 0303 	and.w	r3, r1, #3
   d460c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4610:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4612:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4614:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4618:	bf59      	ittee	pl
   d461a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d461c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d461e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4620:	81c3      	strhmi	r3, [r0, #14]
}
   d4622:	4770      	bx	lr

000d4624 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4624:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d4626:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d4628:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d462a:	4a07      	ldr	r2, [pc, #28]	; (d4648 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d462c:	4d07      	ldr	r5, [pc, #28]	; (d464c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d462e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d4630:	2400      	movs	r4, #0
    _width    = WIDTH;
   d4632:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4634:	f04f 31ff 	mov.w	r1, #4294967295
   d4638:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d463c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d463e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d4640:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d4642:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4644:	6204      	str	r4, [r0, #32]
}
   d4646:	bd30      	pop	{r4, r5, pc}
   d4648:	01000101 	.word	0x01000101
   d464c:	000d7e8c 	.word	0x000d7e8c

000d4650 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4654:	b089      	sub	sp, #36	; 0x24
   d4656:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d465a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d465c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4660:	9304      	str	r3, [sp, #16]
   d4662:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d4666:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4668:	9305      	str	r3, [sp, #20]
   d466a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d466e:	4604      	mov	r4, r0
    startWrite();
   d4670:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4672:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d4676:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d467a:	bf48      	it	mi
   d467c:	f108 020e 	addmi.w	r2, r8, #14
   d4680:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4684:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d4686:	4635      	mov	r5, r6
   d4688:	9b03      	ldr	r3, [sp, #12]
   d468a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d468c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4690:	189a      	adds	r2, r3, r2
   d4692:	9b05      	ldr	r3, [sp, #20]
   d4694:	428b      	cmp	r3, r1
   d4696:	b212      	sxth	r2, r2
   d4698:	dd27      	ble.n	d46ea <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d469a:	9b04      	ldr	r3, [sp, #16]
   d469c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d469e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46a2:	9306      	str	r3, [sp, #24]
   d46a4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d46a8:	4580      	cmp	r8, r0
   d46aa:	fa1f f189 	uxth.w	r1, r9
   d46ae:	dd17      	ble.n	d46e0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d46b0:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46b2:	bf05      	ittet	eq
   d46b4:	9b06      	ldreq	r3, [sp, #24]
   d46b6:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d46b8:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d46ba:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d46bc:	bf18      	it	ne
   d46be:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d46c0:	062b      	lsls	r3, r5, #24
   d46c2:	d50a      	bpl.n	d46da <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d46c4:	9b02      	ldr	r3, [sp, #8]
   d46c6:	6820      	ldr	r0, [r4, #0]
   d46c8:	9207      	str	r2, [sp, #28]
   d46ca:	4419      	add	r1, r3
   d46cc:	6983      	ldr	r3, [r0, #24]
   d46ce:	b209      	sxth	r1, r1
   d46d0:	461f      	mov	r7, r3
   d46d2:	4620      	mov	r0, r4
   d46d4:	4653      	mov	r3, sl
   d46d6:	47b8      	blx	r7
   d46d8:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d46da:	f109 0901 	add.w	r9, r9, #1
   d46de:	e7e1      	b.n	d46a4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d46e0:	9b01      	ldr	r3, [sp, #4]
   d46e2:	3301      	adds	r3, #1
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	445e      	add	r6, fp
   d46e8:	e7ce      	b.n	d4688 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d46ea:	6823      	ldr	r3, [r4, #0]
   d46ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46ee:	4620      	mov	r0, r4
}
   d46f0:	b009      	add	sp, #36	; 0x24
   d46f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d46f6:	4718      	bx	r3

000d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46fc:	ed2d 8b02 	vpush	{d8}
   d4700:	b091      	sub	sp, #68	; 0x44
   d4702:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4704:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d4706:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d470a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d470e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4712:	9103      	str	r1, [sp, #12]
   d4714:	461f      	mov	r7, r3
   d4716:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d471a:	9304      	str	r3, [sp, #16]
   d471c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d471e:	2a00      	cmp	r2, #0
   d4720:	f040 80c5 	bne.w	d48ae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4724:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4728:	428b      	cmp	r3, r1
   d472a:	f340 814c 	ble.w	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d472e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d4732:	42b3      	cmp	r3, r6
   d4734:	f340 8147 	ble.w	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4738:	2306      	movs	r3, #6
   d473a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d473e:	2b00      	cmp	r3, #0
   d4740:	f340 8141 	ble.w	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4744:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4748:	2b00      	cmp	r3, #0
   d474a:	f340 813c 	ble.w	d49c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d474e:	7f03      	ldrb	r3, [r0, #28]
   d4750:	b91b      	cbnz	r3, d475a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d4752:	2faf      	cmp	r7, #175	; 0xaf
   d4754:	bf84      	itt	hi
   d4756:	3701      	addhi	r7, #1
   d4758:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d475a:	f8db 3000 	ldr.w	r3, [fp]
   d475e:	4658      	mov	r0, fp
   d4760:	695b      	ldr	r3, [r3, #20]
   d4762:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4764:	2205      	movs	r2, #5
   d4766:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4768:	2200      	movs	r2, #0
   d476a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d476c:	4a98      	ldr	r2, [pc, #608]	; (d49d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d476e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d4772:	18d3      	adds	r3, r2, r3
   d4774:	930c      	str	r3, [sp, #48]	; 0x30
   d4776:	b2b3      	uxth	r3, r6
   d4778:	9306      	str	r3, [sp, #24]
   d477a:	9a05      	ldr	r2, [sp, #20]
   d477c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d477e:	5c9b      	ldrb	r3, [r3, r2]
   d4780:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4782:	b2ab      	uxth	r3, r5
   d4784:	930b      	str	r3, [sp, #44]	; 0x2c
   d4786:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d478a:	9308      	str	r3, [sp, #32]
   d478c:	9b03      	ldr	r3, [sp, #12]
   d478e:	fb02 f905 	mul.w	r9, r2, r5
   d4792:	fa19 f983 	uxtah	r9, r9, r3
   d4796:	fa0f f389 	sxth.w	r3, r9
   d479a:	ee08 3a10 	vmov	s16, r3
   d479e:	2308      	movs	r3, #8
   d47a0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d47a2:	9b03      	ldr	r3, [sp, #12]
   d47a4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47a8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d47ac:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d47b0:	9a07      	ldr	r2, [sp, #28]
   d47b2:	f8db 3000 	ldr.w	r3, [fp]
   d47b6:	07d2      	lsls	r2, r2, #31
   d47b8:	d552      	bpl.n	d4860 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d47ba:	2d01      	cmp	r5, #1
   d47bc:	fa1f f289 	uxth.w	r2, r9
   d47c0:	d13e      	bne.n	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d47c2:	2c01      	cmp	r4, #1
   d47c4:	d13c      	bne.n	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d47c6:	699b      	ldr	r3, [r3, #24]
   d47c8:	9906      	ldr	r1, [sp, #24]
   d47ca:	461f      	mov	r7, r3
   d47cc:	9b04      	ldr	r3, [sp, #16]
   d47ce:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d47d0:	b212      	sxth	r2, r2
   d47d2:	4651      	mov	r1, sl
   d47d4:	4658      	mov	r0, fp
   d47d6:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d47d8:	f109 0301 	add.w	r3, r9, #1
   d47dc:	fa4f f983 	sxtb.w	r9, r3
   d47e0:	9b07      	ldr	r3, [sp, #28]
   d47e2:	085b      	lsrs	r3, r3, #1
   d47e4:	9307      	str	r3, [sp, #28]
   d47e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d47e8:	3b01      	subs	r3, #1
   d47ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47ee:	930a      	str	r3, [sp, #40]	; 0x28
   d47f0:	d1de      	bne.n	d47b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47f2:	9f05      	ldr	r7, [sp, #20]
   d47f4:	3701      	adds	r7, #1
   d47f6:	b27b      	sxtb	r3, r7
   d47f8:	9305      	str	r3, [sp, #20]
   d47fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47fc:	3b01      	subs	r3, #1
   d47fe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4802:	9309      	str	r3, [sp, #36]	; 0x24
   d4804:	d1b9      	bne.n	d477a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d4806:	9b04      	ldr	r3, [sp, #16]
   d4808:	4543      	cmp	r3, r8
   d480a:	d00f      	beq.n	d482c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d480c:	2d01      	cmp	r5, #1
   d480e:	f8db 3000 	ldr.w	r3, [fp]
   d4812:	d13b      	bne.n	d488c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4814:	2c01      	cmp	r4, #1
   d4816:	d139      	bne.n	d488c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4818:	9908      	ldr	r1, [sp, #32]
   d481a:	f8cd 8000 	str.w	r8, [sp]
   d481e:	3105      	adds	r1, #5
   d4820:	6a1c      	ldr	r4, [r3, #32]
   d4822:	4632      	mov	r2, r6
   d4824:	2308      	movs	r3, #8
   d4826:	b209      	sxth	r1, r1
   d4828:	4658      	mov	r0, fp
   d482a:	47a0      	blx	r4
        endWrite();
   d482c:	f8db 3000 	ldr.w	r3, [fp]
   d4830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4832:	4658      	mov	r0, fp
}
   d4834:	b011      	add	sp, #68	; 0x44
   d4836:	ecbd 8b02 	vpop	{d8}
   d483a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d483e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d4840:	9906      	ldr	r1, [sp, #24]
   d4842:	fb14 f202 	smulbb	r2, r4, r2
   d4846:	440a      	add	r2, r1
   d4848:	9904      	ldr	r1, [sp, #16]
   d484a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d484c:	9400      	str	r4, [sp, #0]
   d484e:	69db      	ldr	r3, [r3, #28]
   d4850:	ee18 1a10 	vmov	r1, s16
   d4854:	461f      	mov	r7, r3
   d4856:	b212      	sxth	r2, r2
   d4858:	462b      	mov	r3, r5
   d485a:	4658      	mov	r0, fp
   d485c:	47b8      	blx	r7
   d485e:	e7bb      	b.n	d47d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4860:	9a04      	ldr	r2, [sp, #16]
   d4862:	4542      	cmp	r2, r8
   d4864:	d0b8      	beq.n	d47d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d4866:	2d01      	cmp	r5, #1
   d4868:	fa1f f289 	uxth.w	r2, r9
   d486c:	d107      	bne.n	d487e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d486e:	2c01      	cmp	r4, #1
   d4870:	d105      	bne.n	d487e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d4872:	699b      	ldr	r3, [r3, #24]
   d4874:	9906      	ldr	r1, [sp, #24]
   d4876:	461f      	mov	r7, r3
   d4878:	440a      	add	r2, r1
   d487a:	4643      	mov	r3, r8
   d487c:	e7a8      	b.n	d47d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d487e:	9906      	ldr	r1, [sp, #24]
   d4880:	f8cd 8004 	str.w	r8, [sp, #4]
   d4884:	fb14 f202 	smulbb	r2, r4, r2
   d4888:	440a      	add	r2, r1
   d488a:	e7df      	b.n	d484c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d488c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d488e:	f8cd 8004 	str.w	r8, [sp, #4]
   d4892:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d4896:	9a08      	ldr	r2, [sp, #32]
   d4898:	00e4      	lsls	r4, r4, #3
   d489a:	440a      	add	r2, r1
   d489c:	4611      	mov	r1, r2
   d489e:	9400      	str	r4, [sp, #0]
   d48a0:	69dc      	ldr	r4, [r3, #28]
   d48a2:	4632      	mov	r2, r6
   d48a4:	462b      	mov	r3, r5
   d48a6:	b209      	sxth	r1, r1
   d48a8:	4658      	mov	r0, fp
   d48aa:	47a0      	blx	r4
        endWrite();
   d48ac:	e7be      	b.n	d482c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48ae:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d48b0:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d48b2:	6812      	ldr	r2, [r2, #0]
   d48b4:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d48b6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d48b8:	b2ff      	uxtb	r7, r7
   d48ba:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d48be:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d48c2:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d48c4:	789a      	ldrb	r2, [r3, #2]
   d48c6:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d48c8:	78da      	ldrb	r2, [r3, #3]
   d48ca:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d48cc:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48ce:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d48d2:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d48d6:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d48d8:	d801      	bhi.n	d48de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d48da:	2c01      	cmp	r4, #1
   d48dc:	d957      	bls.n	d498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d48de:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d48e2:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d48e4:	fa0f f38a 	sxth.w	r3, sl
   d48e8:	9307      	str	r3, [sp, #28]
        startWrite();
   d48ea:	f8db 3000 	ldr.w	r3, [fp]
   d48ee:	4658      	mov	r0, fp
   d48f0:	695b      	ldr	r3, [r3, #20]
   d48f2:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48f4:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48f6:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48fa:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48fc:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4900:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4902:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4904:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d4906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4908:	429f      	cmp	r7, r3
   d490a:	d28f      	bcs.n	d482c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d490c:	9b07      	ldr	r3, [sp, #28]
   d490e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4910:	443b      	add	r3, r7
   d4912:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d4916:	2200      	movs	r2, #0
   d4918:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d491a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d491c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d491e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4922:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4926:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d492a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d492c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d492e:	9905      	ldr	r1, [sp, #20]
   d4930:	4291      	cmp	r1, r2
   d4932:	d241      	bcs.n	d49b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4934:	1c5a      	adds	r2, r3, #1
   d4936:	b2d2      	uxtb	r2, r2
   d4938:	075b      	lsls	r3, r3, #29
   d493a:	920c      	str	r2, [sp, #48]	; 0x30
   d493c:	d107      	bne.n	d494e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d493e:	9b06      	ldr	r3, [sp, #24]
   d4940:	9906      	ldr	r1, [sp, #24]
   d4942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4944:	3301      	adds	r3, #1
   d4946:	b29b      	uxth	r3, r3
   d4948:	f812 9001 	ldrb.w	r9, [r2, r1]
   d494c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d494e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4952:	d012      	beq.n	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4954:	2d01      	cmp	r5, #1
   d4956:	f8db 3000 	ldr.w	r3, [fp]
   d495a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d495e:	d11a      	bne.n	d4996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4960:	2c01      	cmp	r4, #1
   d4962:	d118      	bne.n	d4996 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4966:	699b      	ldr	r3, [r3, #24]
   d4968:	4411      	add	r1, r2
   d496a:	9a05      	ldr	r2, [sp, #20]
   d496c:	4411      	add	r1, r2
   d496e:	461e      	mov	r6, r3
   d4970:	4652      	mov	r2, sl
   d4972:	9b04      	ldr	r3, [sp, #16]
   d4974:	b209      	sxth	r1, r1
   d4976:	4658      	mov	r0, fp
   d4978:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d497a:	9e05      	ldr	r6, [sp, #20]
   d497c:	3601      	adds	r6, #1
   d497e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4980:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4984:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4986:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d498a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d498c:	e7ce      	b.n	d492c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d498e:	2300      	movs	r3, #0
   d4990:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4994:	e7a9      	b.n	d48ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4996:	9805      	ldr	r0, [sp, #20]
   d4998:	9a08      	ldr	r2, [sp, #32]
   d499a:	4402      	add	r2, r0
   d499c:	fb02 1105 	mla	r1, r2, r5, r1
   d49a0:	9a04      	ldr	r2, [sp, #16]
   d49a2:	e9cd 4200 	strd	r4, r2, [sp]
   d49a6:	69db      	ldr	r3, [r3, #28]
   d49a8:	ee18 2a10 	vmov	r2, s16
   d49ac:	461e      	mov	r6, r3
   d49ae:	b209      	sxth	r1, r1
   d49b0:	462b      	mov	r3, r5
   d49b2:	4658      	mov	r0, fp
   d49b4:	47b0      	blx	r6
   d49b6:	e7e0      	b.n	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d49b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d49ba:	3701      	adds	r7, #1
   d49bc:	4498      	add	r8, r3
   d49be:	fa5f f888 	uxtb.w	r8, r8
   d49c2:	b2ff      	uxtb	r7, r7
   d49c4:	e79f      	b.n	d4906 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d49c6:	b011      	add	sp, #68	; 0x44
   d49c8:	ecbd 8b02 	vpop	{d8}
   d49cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d49d0:	000d7982 	.word	0x000d7982

000d49d4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d49d6:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d49d8:	b085      	sub	sp, #20
   d49da:	4604      	mov	r4, r0
   d49dc:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d49de:	2a00      	cmp	r2, #0
   d49e0:	d134      	bne.n	d4a4c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d49e2:	290a      	cmp	r1, #10
   d49e4:	d108      	bne.n	d49f8 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d49e6:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d49e8:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d49ea:	7e42      	ldrb	r2, [r0, #25]
   d49ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d49f0:	8263      	strh	r3, [r4, #18]
}
   d49f2:	2001      	movs	r0, #1
   d49f4:	b005      	add	sp, #20
   d49f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d49f8:	290d      	cmp	r1, #13
   d49fa:	d0fa      	beq.n	d49f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d49fc:	7ee1      	ldrb	r1, [r4, #27]
   d49fe:	7e00      	ldrb	r0, [r0, #24]
   d4a00:	7e65      	ldrb	r5, [r4, #25]
   d4a02:	b171      	cbz	r1, d4a22 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4a04:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4a08:	2106      	movs	r1, #6
   d4a0a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4a0e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4a12:	42b1      	cmp	r1, r6
   d4a14:	bfc1      	itttt	gt
   d4a16:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4a1a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a1c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a20:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a22:	8ae2      	ldrh	r2, [r4, #22]
   d4a24:	9201      	str	r2, [sp, #4]
   d4a26:	8aa2      	ldrh	r2, [r4, #20]
   d4a28:	9200      	str	r2, [sp, #0]
   d4a2a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4a2e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a32:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a36:	4620      	mov	r0, r4
   d4a38:	f7ff fe5e 	bl	d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4a3c:	7e23      	ldrb	r3, [r4, #24]
   d4a3e:	8a22      	ldrh	r2, [r4, #16]
   d4a40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4a44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a48:	8223      	strh	r3, [r4, #16]
   d4a4a:	e7d2      	b.n	d49f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a4c:	290a      	cmp	r1, #10
   d4a4e:	d107      	bne.n	d4a60 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a50:	2300      	movs	r3, #0
   d4a52:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a54:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a56:	7e41      	ldrb	r1, [r0, #25]
   d4a58:	8a42      	ldrh	r2, [r0, #18]
   d4a5a:	fb01 2303 	mla	r3, r1, r3, r2
   d4a5e:	e7c7      	b.n	d49f0 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a60:	290d      	cmp	r1, #13
   d4a62:	d0c6      	beq.n	d49f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4a64:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4a66:	42a9      	cmp	r1, r5
   d4a68:	d3c3      	bcc.n	d49f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4a6a:	7a51      	ldrb	r1, [r2, #9]
   d4a6c:	4299      	cmp	r1, r3
   d4a6e:	d3c0      	bcc.n	d49f2 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4a70:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4a72:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4a74:	b2ed      	uxtb	r5, r5
   d4a76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a7a:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a7c:	b32f      	cbz	r7, d4aca <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a7e:	78e9      	ldrb	r1, [r5, #3]
   d4a80:	b319      	cbz	r1, d4aca <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a82:	7ee1      	ldrb	r1, [r4, #27]
   d4a84:	7e00      	ldrb	r0, [r0, #24]
   d4a86:	7e66      	ldrb	r6, [r4, #25]
   d4a88:	b191      	cbz	r1, d4ab0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a8a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a8e:	4439      	add	r1, r7
   d4a90:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a94:	fb00 7101 	mla	r1, r0, r1, r7
   d4a98:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a9c:	42b9      	cmp	r1, r7
   d4a9e:	dd07      	ble.n	d4ab0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4aa0:	2700      	movs	r7, #0
   d4aa2:	8227      	strh	r7, [r4, #16]
   d4aa4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4aa8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4aaa:	fb02 1206 	mla	r2, r2, r6, r1
   d4aae:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4ab0:	8ae2      	ldrh	r2, [r4, #22]
   d4ab2:	9201      	str	r2, [sp, #4]
   d4ab4:	8aa2      	ldrh	r2, [r4, #20]
   d4ab6:	9200      	str	r2, [sp, #0]
   d4ab8:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4abc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4ac0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f7ff fe17 	bl	d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4aca:	7929      	ldrb	r1, [r5, #4]
   d4acc:	7e23      	ldrb	r3, [r4, #24]
   d4ace:	8a22      	ldrh	r2, [r4, #16]
   d4ad0:	fb01 2303 	mla	r3, r1, r3, r2
   d4ad4:	e7b8      	b.n	d4a48 <_ZN12Adafruit_GFX5writeEh+0x74>

000d4ad6 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4ad6:	2901      	cmp	r1, #1
   d4ad8:	bf38      	it	cc
   d4ada:	2101      	movcc	r1, #1
   d4adc:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4ade:	7641      	strb	r1, [r0, #25]
}
   d4ae0:	4770      	bx	lr
	...

000d4ae4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4ae4:	b510      	push	{r4, lr}
   d4ae6:	4b06      	ldr	r3, [pc, #24]	; (d4b00 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4ae8:	6003      	str	r3, [r0, #0]
   d4aea:	4604      	mov	r4, r0
	if (mutex) {
   d4aec:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4aee:	b108      	cbz	r0, d4af4 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4af0:	f001 f9b4 	bl	d5e5c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4af4:	4620      	mov	r0, r4
   d4af6:	f000 fcdb 	bl	d54b0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd10      	pop	{r4, pc}
   d4afe:	bf00      	nop
   d4b00:	000d7ee4 	.word	0x000d7ee4

000d4b04 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4b04:	b510      	push	{r4, lr}
   d4b06:	4604      	mov	r4, r0
}
   d4b08:	f7ff ffec 	bl	d4ae4 <_ZN16OledWingAdafruitD1Ev>
   d4b0c:	4620      	mov	r0, r4
   d4b0e:	2170      	movs	r1, #112	; 0x70
   d4b10:	f002 fd8d 	bl	d762e <_ZdlPvj>
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd10      	pop	{r4, pc}

000d4b18 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4b18:	b530      	push	{r4, r5, lr}
   d4b1a:	b085      	sub	sp, #20
   d4b1c:	4604      	mov	r4, r0
   d4b1e:	460d      	mov	r5, r1
   d4b20:	f002 fd58 	bl	d75d4 <_Z19__fetch_global_Wirev>
   d4b24:	4a10      	ldr	r2, [pc, #64]	; (d4b68 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b26:	4911      	ldr	r1, [pc, #68]	; (d4b6c <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b28:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4b2c:	f04f 32ff 	mov.w	r2, #4294967295
   d4b30:	2180      	movs	r1, #128	; 0x80
   d4b32:	4603      	mov	r3, r0
   d4b34:	9200      	str	r2, [sp, #0]
   d4b36:	4620      	mov	r0, r4
   d4b38:	2220      	movs	r2, #32
   d4b3a:	f000 fd3f 	bl	d55bc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4b3e:	4b0c      	ldr	r3, [pc, #48]	; (d4b70 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4b40:	6023      	str	r3, [r4, #0]
   d4b42:	2300      	movs	r3, #0
   d4b44:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4b48:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b4c:	f000 f854 	bl	d4bf8 <_ZN8DebounceC1Ev>
   d4b50:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b54:	f000 f850 	bl	d4bf8 <_ZN8DebounceC1Ev>
   d4b58:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b5c:	f000 f84c 	bl	d4bf8 <_ZN8DebounceC1Ev>
}
   d4b60:	4620      	mov	r0, r4
   d4b62:	b005      	add	sp, #20
   d4b64:	bd30      	pop	{r4, r5, pc}
   d4b66:	bf00      	nop
   d4b68:	00061a80 	.word	0x00061a80
   d4b6c:	000186a0 	.word	0x000186a0
   d4b70:	000d7ee4 	.word	0x000d7ee4

000d4b74 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4b74:	b513      	push	{r0, r1, r4, lr}
   d4b76:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b78:	3050      	adds	r0, #80	; 0x50
   d4b7a:	f001 f967 	bl	d5e4c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b80:	07d9      	lsls	r1, r3, #31
   d4b82:	d505      	bpl.n	d4b90 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b84:	2202      	movs	r2, #2
   d4b86:	2104      	movs	r1, #4
   d4b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b8c:	f000 f848 	bl	d4c20 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b90:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b92:	079a      	lsls	r2, r3, #30
   d4b94:	d505      	bpl.n	d4ba2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b96:	2200      	movs	r2, #0
   d4b98:	2103      	movs	r1, #3
   d4b9a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b9e:	f000 f83f 	bl	d4c20 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4ba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4ba4:	075b      	lsls	r3, r3, #29
   d4ba6:	d505      	bpl.n	d4bb4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4ba8:	2202      	movs	r2, #2
   d4baa:	4611      	mov	r1, r2
   d4bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4bb0:	f000 f836 	bl	d4c20 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4bb4:	2301      	movs	r3, #1
   d4bb6:	9300      	str	r3, [sp, #0]
   d4bb8:	223c      	movs	r2, #60	; 0x3c
   d4bba:	2102      	movs	r1, #2
   d4bbc:	4620      	mov	r0, r4
   d4bbe:	f000 fdfd 	bl	d57bc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4bc2:	b002      	add	sp, #8
   d4bc4:	bd10      	pop	{r4, pc}

000d4bc6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4bc6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4bc8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4bca:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4bcc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4bce:	d502      	bpl.n	d4bd6 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4bd0:	3058      	adds	r0, #88	; 0x58
   d4bd2:	f000 f832 	bl	d4c3a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4bd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bd8:	079a      	lsls	r2, r3, #30
   d4bda:	d503      	bpl.n	d4be4 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4bdc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4be0:	f000 f82b 	bl	d4c3a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4be6:	075b      	lsls	r3, r3, #29
   d4be8:	d505      	bpl.n	d4bf6 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4bea:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4bf2:	f000 b822 	b.w	d4c3a <_ZN8Debounce6updateEv>
}
   d4bf6:	bd10      	pop	{r4, pc}

000d4bf8 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4bf8:	2100      	movs	r1, #0
   d4bfa:	220a      	movs	r2, #10
   d4bfc:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4c00:	4770      	bx	lr

000d4c02 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4c02:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4c04:	b510      	push	{r4, lr}
   d4c06:	4604      	mov	r4, r0
    this->pin = pin;
   d4c08:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4c0a:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4c0c:	b288      	uxth	r0, r1
   d4c0e:	f002 fcb5 	bl	d757c <digitalRead>
   d4c12:	b108      	cbz	r0, d4c18 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4c14:	2303      	movs	r3, #3
   d4c16:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c18:	f001 f910 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4c1c:	6020      	str	r0, [r4, #0]
#endif
}
   d4c1e:	bd10      	pop	{r4, pc}

000d4c20 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4c20:	b538      	push	{r3, r4, r5, lr}
   d4c22:	460c      	mov	r4, r1
   d4c24:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4c26:	4611      	mov	r1, r2
   d4c28:	b2a0      	uxth	r0, r4
   d4c2a:	f002 fc7d 	bl	d7528 <pinMode>
  
  this->attach(pin);
   d4c2e:	4621      	mov	r1, r4
   d4c30:	4628      	mov	r0, r5
}
   d4c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4c36:	f7ff bfe4 	b.w	d4c02 <_ZN8Debounce6attachEi>

000d4c3a <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4c3a:	b538      	push	{r3, r4, r5, lr}
   d4c3c:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4c3e:	79c0      	ldrb	r0, [r0, #7]
   d4c40:	f002 fc9c 	bl	d757c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4c44:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4c46:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4c48:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4c4c:	bf18      	it	ne
   d4c4e:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c50:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4c54:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4c56:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c58:	d00a      	beq.n	d4c70 <_ZN8Debounce6updateEv+0x36>
   d4c5a:	f001 f8ef 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4c5e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4c60:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4c62:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4c66:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4c68:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4c6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4c6e:	bd38      	pop	{r3, r4, r5, pc}
   d4c70:	f001 f8e4 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4c74:	6823      	ldr	r3, [r4, #0]
   d4c76:	1ac0      	subs	r0, r0, r3
   d4c78:	88a3      	ldrh	r3, [r4, #4]
   d4c7a:	4298      	cmp	r0, r3
   d4c7c:	d3f4      	bcc.n	d4c68 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4c7e:	79a3      	ldrb	r3, [r4, #6]
   d4c80:	f003 0301 	and.w	r3, r3, #1
   d4c84:	42ab      	cmp	r3, r5
   d4c86:	d0ef      	beq.n	d4c68 <_ZN8Debounce6updateEv+0x2e>
   d4c88:	f001 f8d8 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4c8c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4c8e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4c90:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4c94:	f043 0308 	orr.w	r3, r3, #8
   d4c98:	e7e5      	b.n	d4c66 <_ZN8Debounce6updateEv+0x2c>

000d4c9a <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4c9a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4c9e:	b510      	push	{r4, lr}
   d4ca0:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4ca2:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4ca4:	b113      	cbz	r3, d4cac <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4ca6:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4ca8:	f001 f8e0 	bl	d5e6c <os_mutex_lock>
#endif
#endif
#endif
        }
   d4cac:	4620      	mov	r0, r4
   d4cae:	bd10      	pop	{r4, pc}

000d4cb0 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d4cb0:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4cb2:	6803      	ldr	r3, [r0, #0]
   d4cb4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4cb8:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4cba:	b112      	cbz	r2, d4cc2 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4cbc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d4cbe:	f001 f8dd 	bl	d5e7c <os_mutex_unlock>
#endif
#endif
#endif
        }
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	bd10      	pop	{r4, pc}

000d4cc6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cc8:	461f      	mov	r7, r3
   d4cca:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4cce:	4604      	mov	r4, r0
   d4cd0:	460d      	mov	r5, r1
   d4cd2:	4616      	mov	r6, r2
    if (thread) {
   d4cd4:	b12b      	cbz	r3, d4ce2 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4cd6:	2301      	movs	r3, #1
   d4cd8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4cdc:	3058      	adds	r0, #88	; 0x58
   d4cde:	f001 f8b5 	bl	d5e4c <os_mutex_create>
    }
    this->callback = callback;
   d4ce2:	9b08      	ldr	r3, [sp, #32]
   d4ce4:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4ce6:	2300      	movs	r3, #0
   d4ce8:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4cea:	b106      	cbz	r6, d4cee <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4cec:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d4cee:	b125      	cbz	r5, d4cfa <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d4cf0:	4629      	mov	r1, r5
   d4cf2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4cf6:	f001 fc95 	bl	d6624 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4cfa:	9b06      	ldr	r3, [sp, #24]
   d4cfc:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4cfe:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d4d00:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d4d02:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4d06:	2bff      	cmp	r3, #255	; 0xff
   d4d08:	bfb8      	it	lt
   d4d0a:	23ff      	movlt	r3, #255	; 0xff
   d4d0c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4d10:	b108      	cbz	r0, d4d16 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d4d12:	f7ff f9c4 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4d16:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4d1a:	f7ff f9bc 	bl	d4096 <_Znaj>
   d4d1e:	61e0      	str	r0, [r4, #28]
}
   d4d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4d24 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4d24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4d28:	4604      	mov	r4, r0
            bool thread) {
   d4d2a:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4d2c:	4617      	mov	r7, r2
   d4d2e:	4698      	mov	r8, r3
   d4d30:	460e      	mov	r6, r1
            bool thread) {
   d4d32:	f002 fa3b 	bl	d71ac <_ZN9TCPClientC1Ev>
   d4d36:	490d      	ldr	r1, [pc, #52]	; (d4d6c <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d4d38:	61e5      	str	r5, [r4, #28]
   d4d3a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4d3e:	f001 fc5d 	bl	d65fc <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d42:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d4d46:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d48:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d4d4c:	22ff      	movs	r2, #255	; 0xff
   d4d4e:	230f      	movs	r3, #15
   d4d50:	e9cd 3200 	strd	r3, r2, [sp]
   d4d54:	4620      	mov	r0, r4
            bool thread) {
   d4d56:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4d5a:	463b      	mov	r3, r7
   d4d5c:	462a      	mov	r2, r5
   d4d5e:	4631      	mov	r1, r6
   d4d60:	f7ff ffb1 	bl	d4cc6 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d4d64:	4620      	mov	r0, r4
   d4d66:	b004      	add	sp, #16
   d4d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d6c:	000d7946 	.word	0x000d7946

000d4d70 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4d70:	b510      	push	{r4, lr}
   d4d72:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4d74:	4620      	mov	r0, r4
   d4d76:	f002 f975 	bl	d7064 <_ZN9TCPClient9availableEv>
   d4d7a:	2800      	cmp	r0, #0
   d4d7c:	d0fa      	beq.n	d4d74 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4d7e:	4620      	mov	r0, r4
   d4d80:	f002 f8a9 	bl	d6ed6 <_ZN9TCPClient4readEv>
}
   d4d84:	b2c0      	uxtb	r0, r0
   d4d86:	bd10      	pop	{r4, pc}

000d4d88 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4d8c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4d8e:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4d90:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d4d92:	f7ff ffed 	bl	d4d70 <_ZN4MQTT8readByteEv>
   d4d96:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4d98:	69eb      	ldr	r3, [r5, #28]
   d4d9a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4d9e:	f04f 0901 	mov.w	r9, #1
   d4da2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4da6:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4daa:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4dac:	4628      	mov	r0, r5
   d4dae:	f7ff ffdf 	bl	d4d70 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4db2:	4626      	mov	r6, r4
   d4db4:	69eb      	ldr	r3, [r5, #28]
   d4db6:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4db8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4dbc:	fb13 f309 	smulbb	r3, r3, r9
   d4dc0:	4498      	add	r8, r3
        buffer[len++] = digit;
   d4dc2:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4dc4:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4dc6:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4dc8:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4dcc:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4dd0:	d4ec      	bmi.n	d4dac <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d4dd2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4dd4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4dd8:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4dda:	d124      	bne.n	d4e26 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4ddc:	4628      	mov	r0, r5
   d4dde:	69ef      	ldr	r7, [r5, #28]
   d4de0:	f7ff ffc6 	bl	d4d70 <_ZN4MQTT8readByteEv>
   d4de4:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4de6:	4628      	mov	r0, r5
   d4de8:	69ef      	ldr	r7, [r5, #28]
   d4dea:	1cf4      	adds	r4, r6, #3
   d4dec:	f7ff ffc0 	bl	d4d70 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4df0:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d4df2:	b2b6      	uxth	r6, r6
   d4df4:	b2a4      	uxth	r4, r4
   d4df6:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4df8:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4dfa:	b2b6      	uxth	r6, r6
   d4dfc:	46b1      	mov	r9, r6
   d4dfe:	4627      	mov	r7, r4
   d4e00:	45c1      	cmp	r9, r8
   d4e02:	d212      	bcs.n	d4e2a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4e04:	4628      	mov	r0, r5
   d4e06:	f7ff ffb3 	bl	d4d70 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4e0a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4e0e:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d4e10:	bf88      	it	hi
   d4e12:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4e14:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4e18:	bf88      	it	hi
   d4e1a:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d4e1c:	3701      	adds	r7, #1
   d4e1e:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d4e20:	fa1f f989 	uxth.w	r9, r9
   d4e24:	e7ec      	b.n	d4e00 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4e26:	2600      	movs	r6, #0
   d4e28:	e7e7      	b.n	d4dfa <_ZN4MQTT10readPacketEPh+0x72>
   d4e2a:	eba8 0006 	sub.w	r0, r8, r6
   d4e2e:	45b0      	cmp	r8, r6
   d4e30:	bf2c      	ite	cs
   d4e32:	4606      	movcs	r6, r0
   d4e34:	2600      	movcc	r6, #0
   d4e36:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d4e38:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d4e3c:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4e3e:	42a0      	cmp	r0, r4
   d4e40:	bf2c      	ite	cs
   d4e42:	4620      	movcs	r0, r4
   d4e44:	2000      	movcc	r0, #0
   d4e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4e4a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4e4c:	468c      	mov	ip, r1
   d4e4e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4e50:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4e52:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4e54:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d4e56:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4e58:	a802      	add	r0, sp, #8
        digit = len % 128;
   d4e5a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d4e5e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d4e62:	f103 0401 	add.w	r4, r3, #1
   d4e66:	4403      	add	r3, r0
            digit |= 0x80;
   d4e68:	bf88      	it	hi
   d4e6a:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d4e6e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d4e72:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d4e76:	b2e4      	uxtb	r4, r4
   d4e78:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d4e7c:	d810      	bhi.n	d4ea0 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d4e7e:	f1c4 0304 	rsb	r3, r4, #4
   d4e82:	18d1      	adds	r1, r2, r3
   d4e84:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4e88:	f1c4 0305 	rsb	r3, r4, #5
   d4e8c:	4413      	add	r3, r2
   d4e8e:	a801      	add	r0, sp, #4
   d4e90:	3205      	adds	r2, #5
   d4e92:	4293      	cmp	r3, r2
   d4e94:	d006      	beq.n	d4ea4 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4e96:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4e9a:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d4e9e:	e7f8      	b.n	d4e92 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d4ea0:	4623      	mov	r3, r4
   d4ea2:	e7d8      	b.n	d4e56 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4ea4:	1c72      	adds	r2, r6, #1
   d4ea6:	4422      	add	r2, r4
   d4ea8:	4638      	mov	r0, r7
   d4eaa:	f001 ff3e 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
   d4eae:	4605      	mov	r5, r0
   d4eb0:	f000 ffc4 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4eb4:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4eb6:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4eb8:	4432      	add	r2, r6
   d4eba:	b2a8      	uxth	r0, r5
}
   d4ebc:	1a13      	subs	r3, r2, r0
   d4ebe:	4258      	negs	r0, r3
   d4ec0:	4158      	adcs	r0, r3
   d4ec2:	b003      	add	sp, #12
   d4ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ec6 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4ec6:	b513      	push	{r0, r1, r4, lr}
   d4ec8:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d4eca:	4601      	mov	r1, r0
   d4ecc:	a801      	add	r0, sp, #4
   d4ece:	f7ff fee4 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d4ed2:	69e3      	ldr	r3, [r4, #28]
   d4ed4:	22e0      	movs	r2, #224	; 0xe0
   d4ed6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4ed8:	69e3      	ldr	r3, [r4, #28]
   d4eda:	2200      	movs	r2, #0
   d4edc:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d4ede:	69e1      	ldr	r1, [r4, #28]
   d4ee0:	2202      	movs	r2, #2
   d4ee2:	4620      	mov	r0, r4
   d4ee4:	f001 ff21 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4ee8:	4620      	mov	r0, r4
   d4eea:	f002 f915 	bl	d7118 <_ZN9TCPClient4stopEv>
   d4eee:	f000 ffa5 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4ef2:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d4ef6:	a801      	add	r0, sp, #4
   d4ef8:	f7ff feda 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d4efc:	b002      	add	sp, #8
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4f00:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4f02:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f04:	4604      	mov	r4, r0
    pos += 2;
   d4f06:	b298      	uxth	r0, r3
   d4f08:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4f0a:	5ccd      	ldrb	r5, [r1, r3]
   d4f0c:	b155      	cbz	r5, d4f24 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d4f0e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4f12:	4286      	cmp	r6, r0
   d4f14:	f103 0701 	add.w	r7, r3, #1
   d4f18:	d904      	bls.n	d4f24 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d4f1a:	1c46      	adds	r6, r0, #1
   d4f1c:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d4f1e:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d4f20:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d4f22:	e7f2      	b.n	d4f0a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4f24:	b299      	uxth	r1, r3
   d4f26:	1a44      	subs	r4, r0, r1
   d4f28:	4422      	add	r2, r4
   d4f2a:	1209      	asrs	r1, r1, #8
   d4f2c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4f30:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d4f34:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f36 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4f36:	b538      	push	{r3, r4, r5, lr}
   d4f38:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d4f3a:	f001 ff0c 	bl	d6d56 <_ZN9TCPClient9connectedEv>
   d4f3e:	2800      	cmp	r0, #0
   d4f40:	bf14      	ite	ne
   d4f42:	2501      	movne	r5, #1
   d4f44:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d4f46:	d102      	bne.n	d4f4e <_ZN4MQTT11isConnectedEv+0x18>
   d4f48:	4620      	mov	r0, r4
   d4f4a:	f002 f8e5 	bl	d7118 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4f4e:	4628      	mov	r0, r5
   d4f50:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f58:	b088      	sub	sp, #32
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d4f60:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d4f64:	4689      	mov	r9, r1
   d4f66:	4617      	mov	r7, r2
   d4f68:	461e      	mov	r6, r3
    if (!isConnected()) {
   d4f6a:	f7ff ffe4 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d4f6e:	4605      	mov	r5, r0
   d4f70:	2800      	cmp	r0, #0
   d4f72:	f040 80cb 	bne.w	d510c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d4f76:	4621      	mov	r1, r4
   d4f78:	a801      	add	r0, sp, #4
   d4f7a:	f7ff fe8e 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d4f7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4f80:	2900      	cmp	r1, #0
   d4f82:	f040 8087 	bne.w	d5094 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d4f86:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4f8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4f8c:	462b      	mov	r3, r5
   d4f8e:	4620      	mov	r0, r4
   d4f90:	f002 f920 	bl	d71d4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4f94:	2800      	cmp	r0, #0
   d4f96:	d079      	beq.n	d508c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4f98:	2301      	movs	r3, #1
   d4f9a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4f9c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d4fa0:	69e2      	ldr	r2, [r4, #28]
   d4fa2:	2b04      	cmp	r3, #4
   d4fa4:	f040 8081 	bne.w	d50aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4fa8:	4b59      	ldr	r3, [pc, #356]	; (d5110 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4faa:	6818      	ldr	r0, [r3, #0]
   d4fac:	8899      	ldrh	r1, [r3, #4]
   d4fae:	799b      	ldrb	r3, [r3, #6]
   d4fb0:	f8ad 100c 	strh.w	r1, [sp, #12]
   d4fb4:	f88d 300e 	strb.w	r3, [sp, #14]
   d4fb8:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4fba:	f8c2 0005 	str.w	r0, [r2, #5]
   d4fbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4fc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4fc6:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4fca:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4fcc:	230c      	movs	r3, #12
            if (willTopic) {
   d4fce:	f1b8 0f00 	cmp.w	r8, #0
   d4fd2:	d07f      	beq.n	d50d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4fd4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d4fd8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d4fdc:	0140      	lsls	r0, r0, #5
   d4fde:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d4fe2:	f040 0006 	orr.w	r0, r0, #6
   d4fe6:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4fe8:	f1ba 0f00 	cmp.w	sl, #0
   d4fec:	d101      	bne.n	d4ff2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d4fee:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d4ff2:	b11f      	cbz	r7, d4ffc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d4ff4:	2e00      	cmp	r6, #0
   d4ff6:	d16f      	bne.n	d50d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d4ff8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4ffc:	69e2      	ldr	r2, [r4, #28]
   d4ffe:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d5000:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5002:	69e1      	ldr	r1, [r4, #28]
   d5004:	1c58      	adds	r0, r3, #1
   d5006:	1212      	asrs	r2, r2, #8
   d5008:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d500a:	1c9a      	adds	r2, r3, #2
   d500c:	69e1      	ldr	r1, [r4, #28]
   d500e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5010:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5012:	3303      	adds	r3, #3
   d5014:	69e2      	ldr	r2, [r4, #28]
   d5016:	4649      	mov	r1, r9
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff ff71 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
   d501e:	4603      	mov	r3, r0
            if (willTopic) {
   d5020:	f1b8 0f00 	cmp.w	r8, #0
   d5024:	d00b      	beq.n	d503e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d5026:	69e2      	ldr	r2, [r4, #28]
   d5028:	4641      	mov	r1, r8
   d502a:	4620      	mov	r0, r4
   d502c:	f7ff ff68 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5030:	69e2      	ldr	r2, [r4, #28]
   d5032:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d5034:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d5036:	4620      	mov	r0, r4
   d5038:	f7ff ff62 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
   d503c:	4603      	mov	r3, r0
            if(user != NULL) {
   d503e:	b167      	cbz	r7, d505a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d5040:	69e2      	ldr	r2, [r4, #28]
   d5042:	4639      	mov	r1, r7
   d5044:	4620      	mov	r0, r4
   d5046:	f7ff ff5b 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
   d504a:	4603      	mov	r3, r0
                if(pass != NULL) {
   d504c:	b12e      	cbz	r6, d505a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d504e:	69e2      	ldr	r2, [r4, #28]
   d5050:	4631      	mov	r1, r6
   d5052:	4620      	mov	r0, r4
   d5054:	f7ff ff54 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
   d5058:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d505a:	3b05      	subs	r3, #5
   d505c:	69e2      	ldr	r2, [r4, #28]
   d505e:	b29b      	uxth	r3, r3
   d5060:	2110      	movs	r1, #16
   d5062:	4620      	mov	r0, r4
   d5064:	f7ff fef1 	bl	d4e4a <_ZN4MQTT5writeEhPht>
   d5068:	f000 fee8 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d506c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5070:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5074:	4620      	mov	r0, r4
   d5076:	f001 fff5 	bl	d7064 <_ZN9TCPClient9availableEv>
   d507a:	bb80      	cbnz	r0, d50de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d507c:	f000 fede 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5080:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5082:	1ac0      	subs	r0, r0, r3
   d5084:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5086:	4373      	muls	r3, r6
   d5088:	4298      	cmp	r0, r3
   d508a:	d9f3      	bls.n	d5074 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d508c:	4620      	mov	r0, r4
   d508e:	f002 f843 	bl	d7118 <_ZN9TCPClient4stopEv>
   d5092:	e034      	b.n	d50fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d5094:	a802      	add	r0, sp, #8
   d5096:	f001 fcd1 	bl	d6a3c <_ZN9IPAddressC1EPKh>
   d509a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d509e:	462b      	mov	r3, r5
   d50a0:	a902      	add	r1, sp, #8
   d50a2:	4620      	mov	r0, r4
   d50a4:	f001 ff63 	bl	d6f6e <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d50a8:	e774      	b.n	d4f94 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d50aa:	4b1a      	ldr	r3, [pc, #104]	; (d5114 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d50ac:	6818      	ldr	r0, [r3, #0]
   d50ae:	6859      	ldr	r1, [r3, #4]
   d50b0:	7a1b      	ldrb	r3, [r3, #8]
   d50b2:	f10d 0c08 	add.w	ip, sp, #8
   d50b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d50ba:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d50be:	ab02      	add	r3, sp, #8
   d50c0:	cb03      	ldmia	r3!, {r0, r1}
   d50c2:	f8c2 0005 	str.w	r0, [r2, #5]
   d50c6:	f8c2 1009 	str.w	r1, [r2, #9]
   d50ca:	f89c 3000 	ldrb.w	r3, [ip]
   d50ce:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d50d0:	230e      	movs	r3, #14
   d50d2:	e77c      	b.n	d4fce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d50d4:	2002      	movs	r0, #2
   d50d6:	e787      	b.n	d4fe8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d50d8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d50dc:	e78e      	b.n	d4ffc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d50de:	a902      	add	r1, sp, #8
   d50e0:	4620      	mov	r0, r4
   d50e2:	f7ff fe51 	bl	d4d88 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d50e6:	2804      	cmp	r0, #4
   d50e8:	d1d0      	bne.n	d508c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d50ea:	69e3      	ldr	r3, [r4, #28]
   d50ec:	78de      	ldrb	r6, [r3, #3]
   d50ee:	2e00      	cmp	r6, #0
   d50f0:	d1cc      	bne.n	d508c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d50f2:	f000 fea3 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d50f6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d50f8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d50fa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d50fe:	a801      	add	r0, sp, #4
   d5100:	f7ff fdd6 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5104:	4628      	mov	r0, r5
   d5106:	b008      	add	sp, #32
   d5108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d510c:	2500      	movs	r5, #0
   d510e:	e7f9      	b.n	d5104 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d5110:	000d7f34 	.word	0x000d7f34
   d5114:	000d7f3b 	.word	0x000d7f3b

000d5118 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d5118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d511a:	2301      	movs	r3, #1
   d511c:	2204      	movs	r2, #4
   d511e:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d5122:	2300      	movs	r3, #0
   d5124:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d5128:	e9cd 3300 	strd	r3, r3, [sp]
   d512c:	461a      	mov	r2, r3
   d512e:	f7ff ff11 	bl	d4f54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5132:	b007      	add	sp, #28
   d5134:	f85d fb04 	ldr.w	pc, [sp], #4

000d5138 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d5138:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d513a:	4604      	mov	r4, r0
   d513c:	460e      	mov	r6, r1
    if (isConnected()) {
   d513e:	f7ff fefa 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d5142:	4605      	mov	r5, r0
   d5144:	b1c8      	cbz	r0, d517a <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5146:	4621      	mov	r1, r4
   d5148:	a801      	add	r0, sp, #4
   d514a:	f7ff fda6 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d514e:	69e3      	ldr	r3, [r4, #28]
   d5150:	2262      	movs	r2, #98	; 0x62
   d5152:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5154:	69e3      	ldr	r3, [r4, #28]
   d5156:	2202      	movs	r2, #2
   d5158:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d515a:	69e3      	ldr	r3, [r4, #28]
   d515c:	1232      	asrs	r2, r6, #8
   d515e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5160:	69e3      	ldr	r3, [r4, #28]
   d5162:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5164:	69e1      	ldr	r1, [r4, #28]
   d5166:	2204      	movs	r2, #4
   d5168:	4620      	mov	r0, r4
   d516a:	f001 fdde 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
   d516e:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d5170:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d5172:	bf18      	it	ne
   d5174:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5176:	f7ff fd9b 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d517a:	4628      	mov	r0, r5
   d517c:	b002      	add	sp, #8
   d517e:	bd70      	pop	{r4, r5, r6, pc}

000d5180 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d5180:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5182:	4604      	mov	r4, r0
   d5184:	460e      	mov	r6, r1
    if (isConnected()) {
   d5186:	f7ff fed6 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d518a:	4605      	mov	r5, r0
   d518c:	b1c8      	cbz	r0, d51c2 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d518e:	4621      	mov	r1, r4
   d5190:	a801      	add	r0, sp, #4
   d5192:	f7ff fd82 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5196:	69e3      	ldr	r3, [r4, #28]
   d5198:	2272      	movs	r2, #114	; 0x72
   d519a:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d519c:	69e3      	ldr	r3, [r4, #28]
   d519e:	2202      	movs	r2, #2
   d51a0:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d51a2:	69e3      	ldr	r3, [r4, #28]
   d51a4:	1232      	asrs	r2, r6, #8
   d51a6:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d51a8:	69e3      	ldr	r3, [r4, #28]
   d51aa:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d51ac:	69e1      	ldr	r1, [r4, #28]
   d51ae:	2204      	movs	r2, #4
   d51b0:	4620      	mov	r0, r4
   d51b2:	f001 fdba 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
   d51b6:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d51b8:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d51ba:	bf18      	it	ne
   d51bc:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d51be:	f7ff fd77 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d51c2:	4628      	mov	r0, r5
   d51c4:	b002      	add	sp, #8
   d51c6:	bd70      	pop	{r4, r5, r6, pc}

000d51c8 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d51c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51cc:	ed2d 8b02 	vpush	{d8}
   d51d0:	b087      	sub	sp, #28
   d51d2:	af00      	add	r7, sp, #0
   d51d4:	4604      	mov	r4, r0
    if (isConnected()) {
   d51d6:	f7ff feae 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d51da:	4681      	mov	r9, r0
   d51dc:	b1f8      	cbz	r0, d521e <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d51de:	4621      	mov	r1, r4
   d51e0:	f107 0014 	add.w	r0, r7, #20
   d51e4:	f7ff fd59 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
   d51e8:	f000 fe28 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d51ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d51ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51f2:	4353      	muls	r3, r2
   d51f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d51f6:	1a82      	subs	r2, r0, r2
   d51f8:	429a      	cmp	r2, r3
   d51fa:	4606      	mov	r6, r0
   d51fc:	d803      	bhi.n	d5206 <_ZN4MQTT4loopEv+0x3e>
   d51fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5200:	1a82      	subs	r2, r0, r2
   d5202:	4293      	cmp	r3, r2
   d5204:	d221      	bcs.n	d524a <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d5206:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d520a:	b17b      	cbz	r3, d522c <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d520c:	4620      	mov	r0, r4
   d520e:	f001 ff83 	bl	d7118 <_ZN9TCPClient4stopEv>
                return false;
   d5212:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d5216:	f107 0014 	add.w	r0, r7, #20
   d521a:	f7ff fd49 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d521e:	4648      	mov	r0, r9
   d5220:	371c      	adds	r7, #28
   d5222:	46bd      	mov	sp, r7
   d5224:	ecbd 8b02 	vpop	{d8}
   d5228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d522c:	69e2      	ldr	r2, [r4, #28]
   d522e:	21c0      	movs	r1, #192	; 0xc0
   d5230:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5232:	69e2      	ldr	r2, [r4, #28]
   d5234:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5236:	69e1      	ldr	r1, [r4, #28]
   d5238:	2202      	movs	r2, #2
   d523a:	4620      	mov	r0, r4
   d523c:	f001 fd75 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d5240:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d5244:	2301      	movs	r3, #1
   d5246:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d524a:	4620      	mov	r0, r4
   d524c:	f001 ff0a 	bl	d7064 <_ZN9TCPClient9availableEv>
   d5250:	2800      	cmp	r0, #0
   d5252:	d0e0      	beq.n	d5216 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d5254:	f107 0113 	add.w	r1, r7, #19
   d5258:	4620      	mov	r0, r4
   d525a:	f7ff fd95 	bl	d4d88 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d525e:	4683      	mov	fp, r0
   d5260:	2800      	cmp	r0, #0
   d5262:	d0d8      	beq.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d5264:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d5266:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5268:	7819      	ldrb	r1, [r3, #0]
   d526a:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d526e:	2a30      	cmp	r2, #48	; 0x30
   d5270:	d17f      	bne.n	d5372 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d5272:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d5276:	f1ba 0f00 	cmp.w	sl, #0
   d527a:	d0cc      	beq.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d527c:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d5280:	466a      	mov	r2, sp
   d5282:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5286:	eb03 020c 	add.w	r2, r3, ip
   d528a:	7855      	ldrb	r5, [r2, #1]
   d528c:	7891      	ldrb	r1, [r2, #2]
   d528e:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d5292:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d5294:	f105 0208 	add.w	r2, r5, #8
   d5298:	4669      	mov	r1, sp
   d529a:	08d2      	lsrs	r2, r2, #3
   d529c:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d52a0:	4695      	mov	sp, r2
   d52a2:	f10c 0203 	add.w	r2, ip, #3
   d52a6:	60fa      	str	r2, [r7, #12]
   d52a8:	eb03 0e02 	add.w	lr, r3, r2
   d52ac:	eb0d 0205 	add.w	r2, sp, r5
   d52b0:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d52b2:	f8c7 d008 	str.w	sp, [r7, #8]
   d52b6:	607a      	str	r2, [r7, #4]
   d52b8:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d52bc:	428a      	cmp	r2, r1
   d52be:	d006      	beq.n	d52ce <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d52c0:	460a      	mov	r2, r1
   d52c2:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d52c6:	f802 8b01 	strb.w	r8, [r2], #1
   d52ca:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d52cc:	e7f4      	b.n	d52b8 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d52ce:	2200      	movs	r2, #0
   d52d0:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d52d2:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d52d6:	68f9      	ldr	r1, [r7, #12]
   d52d8:	f008 0806 	and.w	r8, r8, #6
   d52dc:	ebab 020c 	sub.w	r2, fp, ip
   d52e0:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d52e2:	f1b8 0f02 	cmp.w	r8, #2
   d52e6:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d52ea:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d52ec:	d125      	bne.n	d533a <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d52ee:	f813 e001 	ldrb.w	lr, [r3, r1]
   d52f2:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d52f4:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d52f6:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d52fa:	f10c 0105 	add.w	r1, ip, #5
   d52fe:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d5300:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5302:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d5306:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5308:	69e3      	ldr	r3, [r4, #28]
   d530a:	2240      	movs	r2, #64	; 0x40
   d530c:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d530e:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5310:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d5314:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5318:	69e3      	ldr	r3, [r4, #28]
   d531a:	ea4f 222b 	mov.w	r2, fp, asr #8
   d531e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5320:	69e3      	ldr	r3, [r4, #28]
   d5322:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d5326:	69e1      	ldr	r1, [r4, #28]
   d5328:	2204      	movs	r2, #4
   d532a:	4620      	mov	r0, r4
   d532c:	f001 fcfd 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d5330:	6266      	str	r6, [r4, #36]	; 0x24
   d5332:	ee18 3a10 	vmov	r3, s16
   d5336:	469d      	mov	sp, r3
   d5338:	e76d      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d533a:	f1b8 0f04 	cmp.w	r8, #4
   d533e:	d115      	bne.n	d536c <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5340:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5344:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5346:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5348:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d534c:	f10c 0105 	add.w	r1, ip, #5
   d5350:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5352:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5354:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5358:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d535a:	69e3      	ldr	r3, [r4, #28]
   d535c:	2250      	movs	r2, #80	; 0x50
   d535e:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d5360:	69e3      	ldr	r3, [r4, #28]
   d5362:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5364:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d5368:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d536a:	e7d5      	b.n	d5318 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d536c:	4419      	add	r1, r3
   d536e:	47d0      	blx	sl
   d5370:	e7df      	b.n	d5332 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d5372:	2a50      	cmp	r2, #80	; 0x50
   d5374:	d108      	bne.n	d5388 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d5376:	789a      	ldrb	r2, [r3, #2]
   d5378:	78d9      	ldrb	r1, [r3, #3]
   d537a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d537e:	b289      	uxth	r1, r1
   d5380:	4620      	mov	r0, r4
   d5382:	f7ff fed9 	bl	d5138 <_ZN4MQTT14publishReleaseEt>
   d5386:	e746      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d5388:	2a40      	cmp	r2, #64	; 0x40
   d538a:	d112      	bne.n	d53b2 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d538c:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d538e:	2a00      	cmp	r2, #0
   d5390:	f43f af41 	beq.w	d5216 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d5394:	f1bb 0f04 	cmp.w	fp, #4
   d5398:	f47f af3d 	bne.w	d5216 <_ZN4MQTT4loopEv+0x4e>
   d539c:	f011 0f06 	tst.w	r1, #6
   d53a0:	f47f af39 	bne.w	d5216 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d53a4:	7899      	ldrb	r1, [r3, #2]
   d53a6:	78d8      	ldrb	r0, [r3, #3]
   d53a8:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d53ac:	b280      	uxth	r0, r0
   d53ae:	4790      	blx	r2
   d53b0:	e731      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d53b2:	2a60      	cmp	r2, #96	; 0x60
   d53b4:	d108      	bne.n	d53c8 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d53b6:	789a      	ldrb	r2, [r3, #2]
   d53b8:	78d9      	ldrb	r1, [r3, #3]
   d53ba:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d53be:	b289      	uxth	r1, r1
   d53c0:	4620      	mov	r0, r4
   d53c2:	f7ff fedd 	bl	d5180 <_ZN4MQTT15publishCompleteEt>
   d53c6:	e726      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d53c8:	2a70      	cmp	r2, #112	; 0x70
   d53ca:	d0df      	beq.n	d538c <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d53cc:	2a90      	cmp	r2, #144	; 0x90
   d53ce:	f43f af22 	beq.w	d5216 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d53d2:	2ac0      	cmp	r2, #192	; 0xc0
   d53d4:	d10a      	bne.n	d53ec <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d53d6:	22d0      	movs	r2, #208	; 0xd0
   d53d8:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d53da:	69e3      	ldr	r3, [r4, #28]
   d53dc:	2200      	movs	r2, #0
   d53de:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d53e0:	69e1      	ldr	r1, [r4, #28]
   d53e2:	2202      	movs	r2, #2
   d53e4:	4620      	mov	r0, r4
   d53e6:	f001 fca0 	bl	d6d2a <_ZN9TCPClient5writeEPKhj>
   d53ea:	e714      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d53ec:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d53ee:	bf04      	itt	eq
   d53f0:	2300      	moveq	r3, #0
   d53f2:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d53f6:	e70e      	b.n	d5216 <_ZN4MQTT4loopEv+0x4e>

000d53f8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d53f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d53fa:	4604      	mov	r4, r0
   d53fc:	460f      	mov	r7, r1
   d53fe:	4616      	mov	r6, r2
    if (isConnected()) {
   d5400:	f7ff fd99 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d5404:	4605      	mov	r5, r0
   d5406:	b310      	cbz	r0, d544e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d5408:	4621      	mov	r1, r4
   d540a:	a801      	add	r0, sp, #4
   d540c:	f7ff fc45 	bl	d4c9a <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d5410:	8c23      	ldrh	r3, [r4, #32]
   d5412:	3301      	adds	r3, #1
   d5414:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d5416:	b1eb      	cbz	r3, d5454 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d5418:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d541a:	8c23      	ldrh	r3, [r4, #32]
   d541c:	69e2      	ldr	r2, [r4, #28]
   d541e:	121b      	asrs	r3, r3, #8
   d5420:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d5422:	69e3      	ldr	r3, [r4, #28]
   d5424:	8c22      	ldrh	r2, [r4, #32]
   d5426:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d5428:	69e2      	ldr	r2, [r4, #28]
   d542a:	2307      	movs	r3, #7
   d542c:	4639      	mov	r1, r7
   d542e:	4620      	mov	r0, r4
   d5430:	f7ff fd66 	bl	d4f00 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d5434:	69e3      	ldr	r3, [r4, #28]
   d5436:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d5438:	3804      	subs	r0, #4
   d543a:	b283      	uxth	r3, r0
   d543c:	69e2      	ldr	r2, [r4, #28]
   d543e:	2182      	movs	r1, #130	; 0x82
   d5440:	4620      	mov	r0, r4
   d5442:	f7ff fd02 	bl	d4e4a <_ZN4MQTT5writeEhPht>
   d5446:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d5448:	a801      	add	r0, sp, #4
   d544a:	f7ff fc31 	bl	d4cb0 <_ZN4MQTT11MutexLockerD1Ev>
}
   d544e:	4628      	mov	r0, r5
   d5450:	b003      	add	sp, #12
   d5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5454:	2301      	movs	r3, #1
   d5456:	e7df      	b.n	d5418 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d5458 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d5458:	2200      	movs	r2, #0
   d545a:	f7ff bfcd 	b.w	d53f8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000d5460 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5460:	b538      	push	{r3, r4, r5, lr}
   d5462:	4605      	mov	r5, r0
    if (isConnected()) {
   d5464:	f7ff fd67 	bl	d4f36 <_ZN4MQTT11isConnectedEv>
   d5468:	b110      	cbz	r0, d5470 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d546a:	4628      	mov	r0, r5
   d546c:	f7ff fd2b 	bl	d4ec6 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5470:	69e8      	ldr	r0, [r5, #28]
   d5472:	b108      	cbz	r0, d5478 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5474:	f7fe fe13 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d5478:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d547c:	f001 f873 	bl	d6566 <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d5480:	69ac      	ldr	r4, [r5, #24]
   d5482:	4b0a      	ldr	r3, [pc, #40]	; (d54ac <_ZN4MQTTD1Ev+0x4c>)
   d5484:	602b      	str	r3, [r5, #0]
   d5486:	b17c      	cbz	r4, d54a8 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5488:	6863      	ldr	r3, [r4, #4]
   d548a:	3b01      	subs	r3, #1
   d548c:	6063      	str	r3, [r4, #4]
   d548e:	b95b      	cbnz	r3, d54a8 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d5490:	6823      	ldr	r3, [r4, #0]
   d5492:	4620      	mov	r0, r4
   d5494:	689b      	ldr	r3, [r3, #8]
   d5496:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5498:	68a3      	ldr	r3, [r4, #8]
   d549a:	3b01      	subs	r3, #1
   d549c:	60a3      	str	r3, [r4, #8]
   d549e:	b91b      	cbnz	r3, d54a8 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d54a0:	6823      	ldr	r3, [r4, #0]
   d54a2:	4620      	mov	r0, r4
   d54a4:	68db      	ldr	r3, [r3, #12]
   d54a6:	4798      	blx	r3
}
   d54a8:	4628      	mov	r0, r5
   d54aa:	bd38      	pop	{r3, r4, r5, pc}
   d54ac:	000d85c8 	.word	0x000d85c8

000d54b0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d54b0:	b510      	push	{r4, lr}
   d54b2:	4b04      	ldr	r3, [pc, #16]	; (d54c4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d54b4:	6003      	str	r3, [r0, #0]
   d54b6:	4604      	mov	r4, r0
  if(buffer) {
   d54b8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d54ba:	b108      	cbz	r0, d54c0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d54bc:	f000 ff02 	bl	d62c4 <free>
    buffer = NULL;
  }
}
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}
   d54c4:	000d8400 	.word	0x000d8400

000d54c8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4604      	mov	r4, r0
}
   d54cc:	f7ff fff0 	bl	d54b0 <_ZN16Adafruit_SSD1306D1Ev>
   d54d0:	4620      	mov	r0, r4
   d54d2:	2150      	movs	r1, #80	; 0x50
   d54d4:	f002 f8ab 	bl	d762e <_ZdlPvj>
   d54d8:	4620      	mov	r0, r4
   d54da:	bd10      	pop	{r4, pc}

000d54dc <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d54dc:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d54de:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d54e0:	db4b      	blt.n	d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d54e2:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d54e6:	428c      	cmp	r4, r1
   d54e8:	dd47      	ble.n	d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d54ea:	2a00      	cmp	r2, #0
   d54ec:	db45      	blt.n	d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d54ee:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d54f2:	4294      	cmp	r4, r2
   d54f4:	dd41      	ble.n	d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d54f6:	7e84      	ldrb	r4, [r0, #26]
   d54f8:	2c02      	cmp	r4, #2
   d54fa:	d01f      	beq.n	d553c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d54fc:	2c03      	cmp	r4, #3
   d54fe:	d026      	beq.n	d554e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d5500:	2c01      	cmp	r4, #1
   d5502:	d104      	bne.n	d550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5504:	8904      	ldrh	r4, [r0, #8]
   d5506:	43d2      	mvns	r2, r2
   d5508:	4414      	add	r4, r2
      break;
   d550a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d550c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d550e:	2b01      	cmp	r3, #1
   d5510:	d023      	beq.n	d555a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d5512:	2b02      	cmp	r3, #2
   d5514:	d032      	beq.n	d557c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5516:	bb83      	cbnz	r3, d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5518:	2a00      	cmp	r2, #0
   d551a:	4613      	mov	r3, r2
   d551c:	8904      	ldrh	r4, [r0, #8]
   d551e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5520:	bfb8      	it	lt
   d5522:	1dd3      	addlt	r3, r2, #7
   d5524:	10db      	asrs	r3, r3, #3
   d5526:	fb13 1104 	smlabb	r1, r3, r4, r1
   d552a:	f002 0207 	and.w	r2, r2, #7
   d552e:	2301      	movs	r3, #1
   d5530:	4093      	lsls	r3, r2
   d5532:	5c42      	ldrb	r2, [r0, r1]
   d5534:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5538:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d553a:	e01e      	b.n	d557a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d553c:	8904      	ldrh	r4, [r0, #8]
   d553e:	43c9      	mvns	r1, r1
   d5540:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5542:	8944      	ldrh	r4, [r0, #10]
   d5544:	43d2      	mvns	r2, r2
   d5546:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5548:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d554a:	b212      	sxth	r2, r2
      break;
   d554c:	e7df      	b.n	d550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d554e:	8944      	ldrh	r4, [r0, #10]
   d5550:	43c9      	mvns	r1, r1
   d5552:	440c      	add	r4, r1
      break;
   d5554:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5556:	b222      	sxth	r2, r4
      break;
   d5558:	e7d9      	b.n	d550e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d555a:	2a00      	cmp	r2, #0
   d555c:	8904      	ldrh	r4, [r0, #8]
   d555e:	4613      	mov	r3, r2
   d5560:	bfb8      	it	lt
   d5562:	1dd3      	addlt	r3, r2, #7
   d5564:	10db      	asrs	r3, r3, #3
   d5566:	fb13 1104 	smlabb	r1, r3, r4, r1
   d556a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d556c:	f002 0007 	and.w	r0, r2, #7
   d5570:	2201      	movs	r2, #1
   d5572:	4082      	lsls	r2, r0
   d5574:	5c58      	ldrb	r0, [r3, r1]
   d5576:	4302      	orrs	r2, r0
   d5578:	545a      	strb	r2, [r3, r1]
}
   d557a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d557c:	2a00      	cmp	r2, #0
   d557e:	4613      	mov	r3, r2
   d5580:	8904      	ldrh	r4, [r0, #8]
   d5582:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5584:	bfb8      	it	lt
   d5586:	1dd3      	addlt	r3, r2, #7
   d5588:	10db      	asrs	r3, r3, #3
   d558a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d558e:	f002 0207 	and.w	r2, r2, #7
   d5592:	2301      	movs	r3, #1
   d5594:	fa03 f202 	lsl.w	r2, r3, r2
   d5598:	5c43      	ldrb	r3, [r0, r1]
   d559a:	405a      	eors	r2, r3
   d559c:	e7cc      	b.n	d5538 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d559e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d559e:	b510      	push	{r4, lr}
   d55a0:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d55a2:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d55a6:	2101      	movs	r1, #1
   d55a8:	b280      	uxth	r0, r0
   d55aa:	f001 ffce 	bl	d754a <digitalWrite>
   d55ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55b0:	b118      	cbz	r0, d55ba <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d55b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d55b6:	f000 bf0c 	b.w	d63d2 <_ZN8SPIClass14endTransactionEv>
}
   d55ba:	bd10      	pop	{r4, pc}

000d55bc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d55bc:	b570      	push	{r4, r5, r6, lr}
   d55be:	4604      	mov	r4, r0
   d55c0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d55c2:	2600      	movs	r6, #0
   d55c4:	f7ff f82e 	bl	d4624 <_ZN12Adafruit_GFXC1Ess>
   d55c8:	4b11      	ldr	r3, [pc, #68]	; (d5610 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d55ca:	6023      	str	r3, [r4, #0]
   d55cc:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d55ce:	b915      	cbnz	r5, d55d6 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d55d0:	f002 f800 	bl	d75d4 <_Z19__fetch_global_Wirev>
   d55d4:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d55d6:	23ff      	movs	r3, #255	; 0xff
   d55d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d55dc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d55e0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d55e4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d55e8:	4b0a      	ldr	r3, [pc, #40]	; (d5614 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d55ea:	63a3      	str	r3, [r4, #56]	; 0x38
   d55ec:	2301      	movs	r3, #1
   d55ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d55f2:	9b05      	ldr	r3, [sp, #20]
   d55f4:	64a3      	str	r3, [r4, #72]	; 0x48
   d55f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55fa:	9b06      	ldr	r3, [sp, #24]
   d55fc:	86a2      	strh	r2, [r4, #52]	; 0x34
   d55fe:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d5602:	6426      	str	r6, [r4, #64]	; 0x40
   d5604:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5608:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d560a:	4620      	mov	r0, r4
   d560c:	bd70      	pop	{r4, r5, r6, pc}
   d560e:	bf00      	nop
   d5610:	000d8400 	.word	0x000d8400
   d5614:	000d7f4c 	.word	0x000d7f4c

000d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d561a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d561c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d561e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5620:	b190      	cbz	r0, d5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d5622:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5626:	f001 fb69 	bl	d6cfc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d562a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d562c:	6803      	ldr	r3, [r0, #0]
   d562e:	2100      	movs	r1, #0
   d5630:	689b      	ldr	r3, [r3, #8]
   d5632:	4798      	blx	r3
    WIRE_WRITE(c);
   d5634:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5636:	6803      	ldr	r3, [r0, #0]
   d5638:	4629      	mov	r1, r5
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	4798      	blx	r3
    wire->endTransmission();
   d563e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d5640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5644:	f001 bb61 	b.w	d6d0a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5648:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d564c:	4601      	mov	r1, r0
   d564e:	b298      	uxth	r0, r3
   d5650:	f001 ff7b 	bl	d754a <digitalWrite>
  if(spi) {
   d5654:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5656:	b120      	cbz	r0, d5662 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5658:	4629      	mov	r1, r5
}
   d565a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d565e:	f000 bf3f 	b.w	d64e0 <_ZN8SPIClass8transferEh>
   d5662:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5664:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5666:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d566a:	ea05 0107 	and.w	r1, r5, r7
   d566e:	b280      	uxth	r0, r0
   d5670:	f001 ff6b 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5674:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5678:	2101      	movs	r1, #1
   d567a:	b280      	uxth	r0, r0
   d567c:	f001 ff65 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5680:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5684:	2100      	movs	r1, #0
   d5686:	b280      	uxth	r0, r0
   d5688:	f001 ff5f 	bl	d754a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d568c:	3e01      	subs	r6, #1
   d568e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d5692:	d1e8      	bne.n	d5666 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5696 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
  TRANSACTION_START
   d569a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d569c:	460d      	mov	r5, r1
  TRANSACTION_START
   d569e:	b180      	cbz	r0, d56c2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d56a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d56a2:	f001 fb1d 	bl	d6ce0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d56a6:	2d00      	cmp	r5, #0
   d56a8:	4620      	mov	r0, r4
   d56aa:	bf14      	ite	ne
   d56ac:	21a7      	movne	r1, #167	; 0xa7
   d56ae:	21a6      	moveq	r1, #166	; 0xa6
   d56b0:	f7ff ffb2 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d56b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d56b6:	b188      	cbz	r0, d56dc <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d56b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d56ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d56be:	f001 bb0f 	b.w	d6ce0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d56c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d56c4:	b118      	cbz	r0, d56ce <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d56c6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d56ca:	f000 fe9b 	bl	d6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d56ce:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d56d2:	2100      	movs	r1, #0
   d56d4:	b280      	uxth	r0, r0
   d56d6:	f001 ff38 	bl	d754a <digitalWrite>
   d56da:	e7e4      	b.n	d56a6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d56dc:	4620      	mov	r0, r4
}
   d56de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d56e2:	f7ff bf5c 	b.w	d559e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d56e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d56ea:	4604      	mov	r4, r0
  if(wire) { // I2C
   d56ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d56ee:	460d      	mov	r5, r1
  if(wire) { // I2C
   d56f0:	188f      	adds	r7, r1, r2
   d56f2:	b340      	cbz	r0, d5746 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d56f4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d56f8:	f001 fb00 	bl	d6cfc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d56fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d56fe:	6803      	ldr	r3, [r0, #0]
   d5700:	2100      	movs	r1, #0
   d5702:	689b      	ldr	r3, [r3, #8]
   d5704:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5706:	2601      	movs	r6, #1
    while(n--) {
   d5708:	42bd      	cmp	r5, r7
   d570a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d570c:	d017      	beq.n	d573e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d570e:	2e1f      	cmp	r6, #31
   d5710:	d90c      	bls.n	d572c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d5712:	f001 fafa 	bl	d6d0a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5716:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d571a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d571c:	f001 faee 	bl	d6cfc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5720:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5722:	6803      	ldr	r3, [r0, #0]
   d5724:	2100      	movs	r1, #0
   d5726:	689b      	ldr	r3, [r3, #8]
   d5728:	4798      	blx	r3
        bytesOut = 1;
   d572a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d572c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d572e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5732:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5734:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5736:	689b      	ldr	r3, [r3, #8]
   d5738:	4798      	blx	r3
      bytesOut++;
   d573a:	b2f6      	uxtb	r6, r6
    while(n--) {
   d573c:	e7e4      	b.n	d5708 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d573e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5742:	f001 bae2 	b.w	d6d0a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5746:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d574a:	4601      	mov	r1, r0
   d574c:	b298      	uxth	r0, r3
   d574e:	f001 fefc 	bl	d754a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5752:	42af      	cmp	r7, r5
   d5754:	d022      	beq.n	d579c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5756:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5758:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d575c:	b118      	cbz	r0, d5766 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d575e:	4649      	mov	r1, r9
   d5760:	f000 febe 	bl	d64e0 <_ZN8SPIClass8transferEh>
   d5764:	e7f5      	b.n	d5752 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5766:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5768:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d576c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5770:	ea09 0108 	and.w	r1, r9, r8
   d5774:	b280      	uxth	r0, r0
   d5776:	f001 fee8 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d577a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d577e:	2101      	movs	r1, #1
   d5780:	b280      	uxth	r0, r0
   d5782:	f001 fee2 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5786:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d578a:	2100      	movs	r1, #0
   d578c:	b280      	uxth	r0, r0
   d578e:	f001 fedc 	bl	d754a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5792:	3e01      	subs	r6, #1
   d5794:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5798:	d1e8      	bne.n	d576c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d579a:	e7da      	b.n	d5752 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57a0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d57a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d57a4:	1dda      	adds	r2, r3, #7
   d57a6:	bf48      	it	mi
   d57a8:	f103 020e 	addmi.w	r2, r3, #14
   d57ac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d57b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d57b2:	10d2      	asrs	r2, r2, #3
   d57b4:	435a      	muls	r2, r3
   d57b6:	2100      	movs	r1, #0
   d57b8:	f002 b86c 	b.w	d7894 <memset>

000d57bc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d57bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d57c0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d57c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d57c4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d57c8:	4604      	mov	r4, r0
   d57ca:	460f      	mov	r7, r1
   d57cc:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d57ce:	b1b3      	cbz	r3, d57fe <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d57d0:	4620      	mov	r0, r4
   d57d2:	f7ff ffe5 	bl	d57a0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d57d6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d57da:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d57de:	2820      	cmp	r0, #32
   d57e0:	dc1f      	bgt.n	d5822 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d57e2:	2320      	movs	r3, #32
   d57e4:	2201      	movs	r2, #1
   d57e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d57ea:	3820      	subs	r0, #32
   d57ec:	2373      	movs	r3, #115	; 0x73
   d57ee:	3973      	subs	r1, #115	; 0x73
   d57f0:	9300      	str	r3, [sp, #0]
   d57f2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d57f6:	4b89      	ldr	r3, [pc, #548]	; (d5a1c <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d57f8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d57fc:	e01f      	b.n	d583e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d57fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5802:	1dd8      	adds	r0, r3, #7
   d5804:	bf48      	it	mi
   d5806:	f103 000e 	addmi.w	r0, r3, #14
   d580a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d580e:	10c0      	asrs	r0, r0, #3
   d5810:	4358      	muls	r0, r3
   d5812:	f000 fd4f 	bl	d62b4 <malloc>
   d5816:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5818:	2800      	cmp	r0, #0
   d581a:	d1d9      	bne.n	d57d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d581c:	b004      	add	sp, #16
   d581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5822:	2340      	movs	r3, #64	; 0x40
   d5824:	f04f 0c01 	mov.w	ip, #1
   d5828:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d582c:	2352      	movs	r3, #82	; 0x52
   d582e:	3840      	subs	r0, #64	; 0x40
   d5830:	3952      	subs	r1, #82	; 0x52
   d5832:	9300      	str	r3, [sp, #0]
   d5834:	4b7a      	ldr	r3, [pc, #488]	; (d5a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5836:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d583a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d583e:	f340 024f 	sbfx	r2, r0, #1, #16
   d5842:	f341 014f 	sbfx	r1, r1, #1, #16
   d5846:	4620      	mov	r0, r4
   d5848:	f7fe ff02 	bl	d4650 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d584c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d584e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5852:	2800      	cmp	r0, #0
   d5854:	d078      	beq.n	d5948 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5856:	2d00      	cmp	r5, #0
   d5858:	d174      	bne.n	d5944 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d585a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d585e:	2b20      	cmp	r3, #32
   d5860:	bf0c      	ite	eq
   d5862:	253c      	moveq	r5, #60	; 0x3c
   d5864:	253d      	movne	r5, #61	; 0x3d
   d5866:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d586a:	f1b8 0f00 	cmp.w	r8, #0
   d586e:	d001      	beq.n	d5874 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5870:	f001 fa3a 	bl	d6ce8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5874:	b1fe      	cbz	r6, d58b6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5876:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d587a:	2800      	cmp	r0, #0
   d587c:	db1b      	blt.n	d58b6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d587e:	2101      	movs	r1, #1
   d5880:	b280      	uxth	r0, r0
   d5882:	f001 fe51 	bl	d7528 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5886:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d588a:	2101      	movs	r1, #1
   d588c:	b280      	uxth	r0, r0
   d588e:	f001 fe5c 	bl	d754a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5892:	2001      	movs	r0, #1
   d5894:	f000 ffaa 	bl	d67ec <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5898:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d589c:	2100      	movs	r1, #0
   d589e:	b280      	uxth	r0, r0
   d58a0:	f001 fe53 	bl	d754a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d58a4:	200a      	movs	r0, #10
   d58a6:	f000 ffa1 	bl	d67ec <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d58aa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d58ae:	2101      	movs	r1, #1
   d58b0:	b280      	uxth	r0, r0
   d58b2:	f001 fe4a 	bl	d754a <digitalWrite>
  TRANSACTION_START
   d58b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58b8:	2800      	cmp	r0, #0
   d58ba:	d074      	beq.n	d59a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d58bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d58be:	f001 fa0f 	bl	d6ce0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d58c2:	2204      	movs	r2, #4
   d58c4:	4957      	ldr	r1, [pc, #348]	; (d5a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d58c6:	4620      	mov	r0, r4
   d58c8:	f7ff ff0d 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d58cc:	7aa1      	ldrb	r1, [r4, #10]
   d58ce:	3901      	subs	r1, #1
   d58d0:	b2c9      	uxtb	r1, r1
   d58d2:	4620      	mov	r0, r4
   d58d4:	f7ff fea0 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d58d8:	4953      	ldr	r1, [pc, #332]	; (d5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d58da:	2204      	movs	r2, #4
   d58dc:	4620      	mov	r0, r4
   d58de:	f7ff ff02 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d58e2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d58e6:	2b01      	cmp	r3, #1
   d58e8:	bf0c      	ite	eq
   d58ea:	2110      	moveq	r1, #16
   d58ec:	2114      	movne	r1, #20
   d58ee:	4620      	mov	r0, r4
   d58f0:	f7ff fe92 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d58f4:	2204      	movs	r2, #4
   d58f6:	494d      	ldr	r1, [pc, #308]	; (d5a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d58f8:	4620      	mov	r0, r4
   d58fa:	f7ff fef4 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d58fe:	68a3      	ldr	r3, [r4, #8]
   d5900:	4a4b      	ldr	r2, [pc, #300]	; (d5a30 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d5902:	4293      	cmp	r3, r2
   d5904:	d15c      	bne.n	d59c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5906:	494b      	ldr	r1, [pc, #300]	; (d5a34 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5908:	2204      	movs	r2, #4
   d590a:	4620      	mov	r0, r4
   d590c:	f7ff feeb 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d5910:	21d9      	movs	r1, #217	; 0xd9
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff fe80 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5918:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d591c:	2b01      	cmp	r3, #1
   d591e:	bf0c      	ite	eq
   d5920:	2122      	moveq	r1, #34	; 0x22
   d5922:	21f1      	movne	r1, #241	; 0xf1
   d5924:	4620      	mov	r0, r4
   d5926:	f7ff fe77 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d592a:	4620      	mov	r0, r4
   d592c:	4942      	ldr	r1, [pc, #264]	; (d5a38 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d592e:	2206      	movs	r2, #6
   d5930:	f7ff fed9 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d5934:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5936:	2800      	cmp	r0, #0
   d5938:	d063      	beq.n	d5a02 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d593a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d593c:	f001 f9d0 	bl	d6ce0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d5940:	2001      	movs	r0, #1
   d5942:	e76b      	b.n	d581c <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5944:	b26d      	sxtb	r5, r5
   d5946:	e78e      	b.n	d5866 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d5948:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d594c:	2101      	movs	r1, #1
   d594e:	b280      	uxth	r0, r0
   d5950:	f001 fdea 	bl	d7528 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d5954:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5958:	2101      	movs	r1, #1
   d595a:	b280      	uxth	r0, r0
   d595c:	f001 fde4 	bl	d7528 <pinMode>
    SSD1306_DESELECT
   d5960:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5964:	2101      	movs	r1, #1
   d5966:	b280      	uxth	r0, r0
   d5968:	f001 fdef 	bl	d754a <digitalWrite>
    if(spi) { // Hardware SPI
   d596c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d596e:	b13d      	cbz	r5, d5980 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5970:	f1b8 0f00 	cmp.w	r8, #0
   d5974:	f43f af7e 	beq.w	d5874 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5978:	4628      	mov	r0, r5
   d597a:	f000 fd19 	bl	d63b0 <_ZN8SPIClass5beginEv>
   d597e:	e779      	b.n	d5874 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5980:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5984:	2101      	movs	r1, #1
   d5986:	b280      	uxth	r0, r0
   d5988:	f001 fdce 	bl	d7528 <pinMode>
      pinMode(clkPin , OUTPUT);
   d598c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5990:	2101      	movs	r1, #1
   d5992:	b280      	uxth	r0, r0
   d5994:	f001 fdc8 	bl	d7528 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5998:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d599c:	4629      	mov	r1, r5
   d599e:	b280      	uxth	r0, r0
   d59a0:	f001 fdd3 	bl	d754a <digitalWrite>
   d59a4:	e766      	b.n	d5874 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d59a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d59a8:	b118      	cbz	r0, d59b2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d59aa:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d59ae:	f000 fd29 	bl	d6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d59b2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d59b6:	2100      	movs	r1, #0
   d59b8:	b280      	uxth	r0, r0
   d59ba:	f001 fdc6 	bl	d754a <digitalWrite>
   d59be:	e780      	b.n	d58c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d59c0:	4a1e      	ldr	r2, [pc, #120]	; (d5a3c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d59c2:	4293      	cmp	r3, r2
   d59c4:	d10e      	bne.n	d59e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d59c6:	491e      	ldr	r1, [pc, #120]	; (d5a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d59c8:	2203      	movs	r2, #3
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff fe8b 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d59d0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d59d4:	2b01      	cmp	r3, #1
   d59d6:	bf0c      	ite	eq
   d59d8:	219f      	moveq	r1, #159	; 0x9f
   d59da:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d59dc:	4620      	mov	r0, r4
   d59de:	f7ff fe1b 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d59e2:	e795      	b.n	d5910 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d59e4:	4a17      	ldr	r2, [pc, #92]	; (d5a44 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d59e6:	4293      	cmp	r3, r2
   d59e8:	d192      	bne.n	d5910 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d59ea:	4917      	ldr	r1, [pc, #92]	; (d5a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d59ec:	2203      	movs	r2, #3
   d59ee:	4620      	mov	r0, r4
   d59f0:	f7ff fe79 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d59f4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d59f8:	2b01      	cmp	r3, #1
   d59fa:	bf0c      	ite	eq
   d59fc:	2110      	moveq	r1, #16
   d59fe:	21af      	movne	r1, #175	; 0xaf
   d5a00:	e7ec      	b.n	d59dc <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d5a02:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5a06:	2101      	movs	r1, #1
   d5a08:	b280      	uxth	r0, r0
   d5a0a:	f001 fd9e 	bl	d754a <digitalWrite>
   d5a0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5a10:	2800      	cmp	r0, #0
   d5a12:	d095      	beq.n	d5940 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5a14:	f000 fcdd 	bl	d63d2 <_ZN8SPIClass14endTransactionEv>
   d5a18:	e792      	b.n	d5940 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5a1a:	bf00      	nop
   d5a1c:	000d8218 	.word	0x000d8218
   d5a20:	000d7f58 	.word	0x000d7f58
   d5a24:	000d8460 	.word	0x000d8460
   d5a28:	000d8464 	.word	0x000d8464
   d5a2c:	000d8468 	.word	0x000d8468
   d5a30:	00200080 	.word	0x00200080
   d5a34:	000d8472 	.word	0x000d8472
   d5a38:	000d846c 	.word	0x000d846c
   d5a3c:	00400080 	.word	0x00400080
   d5a40:	000d8476 	.word	0x000d8476
   d5a44:	00100060 	.word	0x00100060
   d5a48:	000d8479 	.word	0x000d8479

000d5a4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5a4c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5a4e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5a50:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d5a54:	db3d      	blt.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5a56:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5a5a:	4294      	cmp	r4, r2
   d5a5c:	dd39      	ble.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d5a5e:	2900      	cmp	r1, #0
      w += x;
   d5a60:	bfbe      	ittt	lt
   d5a62:	185b      	addlt	r3, r3, r1
   d5a64:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5a66:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5a68:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5a6c:	18ce      	adds	r6, r1, r3
   d5a6e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5a70:	bfc4      	itt	gt
   d5a72:	1a63      	subgt	r3, r4, r1
   d5a74:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5a76:	2b00      	cmp	r3, #0
   d5a78:	dd2b      	ble.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d5a7a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5a7c:	10d6      	asrs	r6, r2, #3
   d5a7e:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5a82:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5a84:	f002 0007 	and.w	r0, r2, #7
   d5a88:	2201      	movs	r2, #1
   d5a8a:	4082      	lsls	r2, r0
      switch(color) {
   d5a8c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5a8e:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5a90:	d016      	beq.n	d5ac0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5a92:	2d02      	cmp	r5, #2
   d5a94:	d00b      	beq.n	d5aae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5a96:	b9e5      	cbnz	r5, d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5a98:	43d2      	mvns	r2, r2
   d5a9a:	b2d2      	uxtb	r2, r2
   d5a9c:	440b      	add	r3, r1
   d5a9e:	4299      	cmp	r1, r3
   d5aa0:	d017      	beq.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5aa2:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5aa6:	4010      	ands	r0, r2
   d5aa8:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5aac:	e7f7      	b.n	d5a9e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5aae:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5ab0:	4299      	cmp	r1, r3
   d5ab2:	d00e      	beq.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5ab4:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5ab8:	4050      	eors	r0, r2
   d5aba:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5abe:	e7f7      	b.n	d5ab0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5ac0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5ac2:	4299      	cmp	r1, r3
   d5ac4:	d005      	beq.n	d5ad2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5ac6:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5aca:	4310      	orrs	r0, r2
   d5acc:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5ad0:	e7f7      	b.n	d5ac2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5ad2:	bd70      	pop	{r4, r5, r6, pc}

000d5ad4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5ad6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5ad8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5adc:	db76      	blt.n	d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5ade:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5ae2:	42a9      	cmp	r1, r5
   d5ae4:	da72      	bge.n	d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5ae6:	2a00      	cmp	r2, #0
      __h += __y;
   d5ae8:	bfbc      	itt	lt
   d5aea:	18d2      	addlt	r2, r2, r3
   d5aec:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5aee:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5af2:	bfb8      	it	lt
   d5af4:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5af6:	18d7      	adds	r7, r2, r3
   d5af8:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5afa:	bfc4      	itt	gt
   d5afc:	1aa3      	subgt	r3, r4, r2
   d5afe:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5b00:	2b00      	cmp	r3, #0
   d5b02:	dd63      	ble.n	d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5b04:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5b08:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5b0a:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5b0e:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5b12:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5b14:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5b18:	d023      	beq.n	d5b62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5b1a:	f1c2 0208 	rsb	r2, r2, #8
   d5b1e:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5b20:	4d2c      	ldr	r5, [pc, #176]	; (d5bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5b22:	4293      	cmp	r3, r2
   d5b24:	bf3c      	itt	cc
   d5b26:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d5b2a:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5b2e:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5b30:	bf3c      	itt	cc
   d5b32:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d5b36:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d5b3a:	2e01      	cmp	r6, #1
   d5b3c:	d007      	beq.n	d5b4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d5b3e:	2e02      	cmp	r6, #2
   d5b40:	d02e      	beq.n	d5ba0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d5b42:	b94e      	cbnz	r6, d5b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d5b44:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5b48:	ea2c 0505 	bic.w	r5, ip, r5
   d5b4c:	e003      	b.n	d5b56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d5b4e:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5b52:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d5b56:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d5b58:	4293      	cmp	r3, r2
   d5b5a:	d337      	bcc.n	d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d5b5c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5b60:	440c      	add	r4, r1
        h -= mod;
   d5b62:	1a9a      	subs	r2, r3, r2
   d5b64:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5b66:	2a07      	cmp	r2, #7
   d5b68:	d90e      	bls.n	d5b88 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d5b6a:	2e02      	cmp	r6, #2
   d5b6c:	d11d      	bne.n	d5baa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d5b6e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5b70:	7821      	ldrb	r1, [r4, #0]
   d5b72:	43c9      	mvns	r1, r1
   d5b74:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5b76:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5b78:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d5b7c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5b7e:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5b80:	440c      	add	r4, r1
            } while(h >= 8);
   d5b82:	d8f5      	bhi.n	d5b70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5b84:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5b88:	b302      	cbz	r2, d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5b8a:	4b13      	ldr	r3, [pc, #76]	; (d5bd8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5b8c:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5b8e:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5b90:	d019      	beq.n	d5bc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5b92:	2e02      	cmp	r6, #2
   d5b94:	d01b      	beq.n	d5bce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5b96:	b9ce      	cbnz	r6, d5bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5b98:	7822      	ldrb	r2, [r4, #0]
   d5b9a:	ea22 0303 	bic.w	r3, r2, r3
   d5b9e:	e014      	b.n	d5bca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5ba0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5ba4:	ea85 050c 	eor.w	r5, r5, ip
   d5ba8:	e7d5      	b.n	d5b56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5baa:	2e00      	cmp	r6, #0
   d5bac:	bf14      	ite	ne
   d5bae:	25ff      	movne	r5, #255	; 0xff
   d5bb0:	2500      	moveq	r5, #0
   d5bb2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5bb4:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5bb6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5bb8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5bbc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5bbe:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5bc0:	440c      	add	r4, r1
            } while(h >= 8);
   d5bc2:	d8f7      	bhi.n	d5bb4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5bc4:	e7de      	b.n	d5b84 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5bc6:	7822      	ldrb	r2, [r4, #0]
   d5bc8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5bca:	7023      	strb	r3, [r4, #0]
}
   d5bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5bce:	7822      	ldrb	r2, [r4, #0]
   d5bd0:	4053      	eors	r3, r2
   d5bd2:	e7fa      	b.n	d5bca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5bd4:	000d8450 	.word	0x000d8450
   d5bd8:	000d8458 	.word	0x000d8458

000d5bdc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5bdc:	b470      	push	{r4, r5, r6}
   d5bde:	4614      	mov	r4, r2
  switch(rotation) {
   d5be0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5be2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5be6:	2a02      	cmp	r2, #2
   d5be8:	d00d      	beq.n	d5c06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5bea:	2a03      	cmp	r2, #3
   d5bec:	d018      	beq.n	d5c20 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5bee:	2a01      	cmp	r2, #1
   d5bf0:	d111      	bne.n	d5c16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5bf2:	8902      	ldrh	r2, [r0, #8]
   d5bf4:	43e4      	mvns	r4, r4
   d5bf6:	4414      	add	r4, r2
   d5bf8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5bfa:	9603      	str	r6, [sp, #12]
   d5bfc:	460a      	mov	r2, r1
   d5bfe:	4621      	mov	r1, r4
}
   d5c00:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5c02:	f7ff bf67 	b.w	d5ad4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5c06:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5c08:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5c0a:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5c0c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5c0e:	4414      	add	r4, r2
    x -= (w-1);
   d5c10:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5c12:	b224      	sxth	r4, r4
    x -= (w-1);
   d5c14:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5c16:	9603      	str	r6, [sp, #12]
   d5c18:	4622      	mov	r2, r4
}
   d5c1a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5c1c:	f7ff bf16 	b.w	d5a4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5c20:	8945      	ldrh	r5, [r0, #10]
   d5c22:	4419      	add	r1, r3
   d5c24:	1a69      	subs	r1, r5, r1
   d5c26:	b209      	sxth	r1, r1
    break;
   d5c28:	e7e7      	b.n	d5bfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d5c2a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5c2a:	b430      	push	{r4, r5}
   d5c2c:	4614      	mov	r4, r2
  switch(rotation) {
   d5c2e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5c30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d5c34:	2a02      	cmp	r2, #2
   d5c36:	d00d      	beq.n	d5c54 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d5c38:	2a03      	cmp	r2, #3
   d5c3a:	d018      	beq.n	d5c6e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d5c3c:	2a01      	cmp	r2, #1
   d5c3e:	d111      	bne.n	d5c64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d5c40:	18e2      	adds	r2, r4, r3
   d5c42:	8904      	ldrh	r4, [r0, #8]
   d5c44:	1aa4      	subs	r4, r4, r2
   d5c46:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5c48:	9502      	str	r5, [sp, #8]
   d5c4a:	460a      	mov	r2, r1
   d5c4c:	4621      	mov	r1, r4
}
   d5c4e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d5c50:	f7ff befc 	b.w	d5a4c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d5c54:	8902      	ldrh	r2, [r0, #8]
   d5c56:	43c9      	mvns	r1, r1
   d5c58:	4411      	add	r1, r2
    y -= (h-1);
   d5c5a:	18e2      	adds	r2, r4, r3
   d5c5c:	8944      	ldrh	r4, [r0, #10]
   d5c5e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5c60:	b209      	sxth	r1, r1
    y -= (h-1);
   d5c62:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5c64:	9502      	str	r5, [sp, #8]
   d5c66:	4622      	mov	r2, r4
}
   d5c68:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d5c6a:	f7ff bf33 	b.w	d5ad4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d5c6e:	8942      	ldrh	r2, [r0, #10]
   d5c70:	43c9      	mvns	r1, r1
   d5c72:	4411      	add	r1, r2
   d5c74:	b209      	sxth	r1, r1
    break;
   d5c76:	e7e7      	b.n	d5c48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5c78 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5c7c:	4604      	mov	r4, r0
  TRANSACTION_START
   d5c7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5c80:	2800      	cmp	r0, #0
   d5c82:	d042      	beq.n	d5d0a <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5c84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5c86:	f001 f82b 	bl	d6ce0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5c8a:	4947      	ldr	r1, [pc, #284]	; (d5da8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5c8c:	2205      	movs	r2, #5
   d5c8e:	4620      	mov	r0, r4
   d5c90:	f7ff fd29 	bl	d56e6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5c94:	7a21      	ldrb	r1, [r4, #8]
   d5c96:	3901      	subs	r1, #1
   d5c98:	4620      	mov	r0, r4
   d5c9a:	b2c9      	uxtb	r1, r1
   d5c9c:	f7ff fcbc 	bl	d5618 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5ca0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5ca4:	1dde      	adds	r6, r3, #7
   d5ca6:	bf48      	it	mi
   d5ca8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5cac:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5cb0:	8923      	ldrh	r3, [r4, #8]
   d5cb2:	10f6      	asrs	r6, r6, #3
   d5cb4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5cb8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5cbc:	2800      	cmp	r0, #0
   d5cbe:	d03a      	beq.n	d5d36 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5cc0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5cc4:	f001 f81a 	bl	d6cfc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5cca:	6803      	ldr	r3, [r0, #0]
   d5ccc:	2140      	movs	r1, #64	; 0x40
   d5cce:	689b      	ldr	r3, [r3, #8]
   d5cd0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5cd2:	2701      	movs	r7, #1
    while(count--) {
   d5cd4:	42b5      	cmp	r5, r6
   d5cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5cd8:	d024      	beq.n	d5d24 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5cda:	2f1f      	cmp	r7, #31
   d5cdc:	d90c      	bls.n	d5cf8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5cde:	f001 f814 	bl	d6d0a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5ce2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5ce6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5ce8:	f001 f808 	bl	d6cfc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5cec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5cee:	6803      	ldr	r3, [r0, #0]
   d5cf0:	2140      	movs	r1, #64	; 0x40
   d5cf2:	689b      	ldr	r3, [r3, #8]
   d5cf4:	4798      	blx	r3
        bytesOut = 1;
   d5cf6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5cf8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5cfa:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5cfe:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5d00:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5d02:	689b      	ldr	r3, [r3, #8]
   d5d04:	4798      	blx	r3
      bytesOut++;
   d5d06:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5d08:	e7e4      	b.n	d5cd4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5d0c:	b118      	cbz	r0, d5d16 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5d0e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5d12:	f000 fb77 	bl	d6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5d16:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5d1a:	2100      	movs	r1, #0
   d5d1c:	b280      	uxth	r0, r0
   d5d1e:	f001 fc14 	bl	d754a <digitalWrite>
   d5d22:	e7b2      	b.n	d5c8a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5d24:	f000 fff1 	bl	d6d0a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d5d28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5d2a:	b378      	cbz	r0, d5d8c <_ZN16Adafruit_SSD13067displayEv+0x114>
   d5d2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5d2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d32:	f000 bfd5 	b.w	d6ce0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d5d36:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d5d3a:	2101      	movs	r1, #1
   d5d3c:	b280      	uxth	r0, r0
   d5d3e:	f001 fc04 	bl	d754a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d5d42:	42b5      	cmp	r5, r6
   d5d44:	d0f0      	beq.n	d5d28 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d5d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d5d48:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5d4c:	b118      	cbz	r0, d5d56 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d5d4e:	4649      	mov	r1, r9
   d5d50:	f000 fbc6 	bl	d64e0 <_ZN8SPIClass8transferEh>
   d5d54:	e7f5      	b.n	d5d42 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d5d56:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5d58:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5d5c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5d60:	ea09 0108 	and.w	r1, r9, r8
   d5d64:	b280      	uxth	r0, r0
   d5d66:	f001 fbf0 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5d6a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5d6e:	2101      	movs	r1, #1
   d5d70:	b280      	uxth	r0, r0
   d5d72:	f001 fbea 	bl	d754a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5d76:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5d7a:	2100      	movs	r1, #0
   d5d7c:	b280      	uxth	r0, r0
   d5d7e:	f001 fbe4 	bl	d754a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5d82:	3f01      	subs	r7, #1
   d5d84:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5d88:	d1e8      	bne.n	d5d5c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5d8a:	e7da      	b.n	d5d42 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5d8c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5d90:	2101      	movs	r1, #1
   d5d92:	b280      	uxth	r0, r0
   d5d94:	f001 fbd9 	bl	d754a <digitalWrite>
   d5d98:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5d9a:	b118      	cbz	r0, d5da4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5d9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5da0:	f000 bb17 	b.w	d63d2 <_ZN8SPIClass14endTransactionEv>
}
   d5da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5da8:	000d847c 	.word	0x000d847c

000d5dac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <netdb_freeaddrinfo+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	689b      	ldr	r3, [r3, #8]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030268 	.word	0x00030268

000d5dbc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <netdb_getaddrinfo+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	68db      	ldr	r3, [r3, #12]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030268 	.word	0x00030268

000d5dcc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <HAL_Pin_Mode+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	689b      	ldr	r3, [r3, #8]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003022c 	.word	0x0003022c

000d5ddc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <HAL_Get_Pin_Mode+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	68db      	ldr	r3, [r3, #12]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003022c 	.word	0x0003022c

000d5dec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <HAL_GPIO_Write+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	691b      	ldr	r3, [r3, #16]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003022c 	.word	0x0003022c

000d5dfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <HAL_GPIO_Read+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	695b      	ldr	r3, [r3, #20]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003022c 	.word	0x0003022c

000d5e0c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <if_index_to_name+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	695b      	ldr	r3, [r3, #20]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003026c 	.word	0x0003026c

000d5e1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <HAL_RNG_GetRandomNumber+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	685b      	ldr	r3, [r3, #4]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	00030218 	.word	0x00030218

000d5e2c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <HAL_Delay_Microseconds+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	68db      	ldr	r3, [r3, #12]
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030218 	.word	0x00030218

000d5e3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	695b      	ldr	r3, [r3, #20]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030218 	.word	0x00030218

000d5e4c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <os_mutex_create+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030248 	.word	0x00030248

000d5e5c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <os_mutex_destroy+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030248 	.word	0x00030248

000d5e6c <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <os_mutex_lock+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030248 	.word	0x00030248

000d5e7c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <os_mutex_unlock+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030248 	.word	0x00030248

000d5e8c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <os_mutex_recursive_create+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030248 	.word	0x00030248

000d5e9c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <os_mutex_recursive_destroy+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030248 	.word	0x00030248

000d5eac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <inet_inet_ntop+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	695b      	ldr	r3, [r3, #20]
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030264 	.word	0x00030264

000d5ebc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <inet_htonl+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6a1b      	ldr	r3, [r3, #32]
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030264 	.word	0x00030264

000d5ecc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <inet_htons+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030264 	.word	0x00030264

000d5edc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <hal_usart_init+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	681b      	ldr	r3, [r3, #0]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	0003023c 	.word	0x0003023c

000d5eec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <hal_usart_write+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	68db      	ldr	r3, [r3, #12]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	0003023c 	.word	0x0003023c

000d5efc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <hal_usart_available+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	691b      	ldr	r3, [r3, #16]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	0003023c 	.word	0x0003023c

000d5f0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <hal_usart_read+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	695b      	ldr	r3, [r3, #20]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	0003023c 	.word	0x0003023c

000d5f1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <hal_usart_peek+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	699b      	ldr	r3, [r3, #24]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	0003023c 	.word	0x0003023c

000d5f2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <hal_usart_flush+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	69db      	ldr	r3, [r3, #28]
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	0003023c 	.word	0x0003023c

000d5f3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <hal_usart_is_enabled+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6a1b      	ldr	r3, [r3, #32]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	0003023c 	.word	0x0003023c

000d5f4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <hal_usart_available_data_for_write+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	0003023c 	.word	0x0003023c

000d5f5c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <hal_i2c_set_speed+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	681b      	ldr	r3, [r3, #0]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030228 	.word	0x00030228

000d5f6c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <hal_i2c_begin+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	68db      	ldr	r3, [r3, #12]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030228 	.word	0x00030228

000d5f7c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <hal_i2c_begin_transmission+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	699b      	ldr	r3, [r3, #24]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030228 	.word	0x00030228

000d5f8c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <hal_i2c_end_transmission+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	69db      	ldr	r3, [r3, #28]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030228 	.word	0x00030228

000d5f9c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <hal_i2c_write+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6a1b      	ldr	r3, [r3, #32]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030228 	.word	0x00030228

000d5fac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <hal_i2c_available+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030228 	.word	0x00030228

000d5fbc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <hal_i2c_read+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030228 	.word	0x00030228

000d5fcc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <hal_i2c_peek+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030228 	.word	0x00030228

000d5fdc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <hal_i2c_flush+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030228 	.word	0x00030228

000d5fec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <hal_i2c_is_enabled+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030228 	.word	0x00030228

000d5ffc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <hal_i2c_init+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030228 	.word	0x00030228

000d600c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <sock_setsockopt+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	699b      	ldr	r3, [r3, #24]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030238 	.word	0x00030238

000d601c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <sock_close+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	69db      	ldr	r3, [r3, #28]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030238 	.word	0x00030238

000d602c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <sock_connect+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6a1b      	ldr	r3, [r3, #32]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030238 	.word	0x00030238

000d603c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <sock_recv+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030238 	.word	0x00030238

000d604c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <sock_send+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030238 	.word	0x00030238

000d605c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <sock_socket+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030238 	.word	0x00030238

000d606c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <hal_spi_begin+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	681b      	ldr	r3, [r3, #0]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030230 	.word	0x00030230

000d607c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <hal_spi_transfer+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	695b      	ldr	r3, [r3, #20]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030230 	.word	0x00030230

000d608c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <hal_spi_init+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	69db      	ldr	r3, [r3, #28]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030230 	.word	0x00030230

000d609c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <hal_spi_is_enabled+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	6a1b      	ldr	r3, [r3, #32]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030230 	.word	0x00030230

000d60ac <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <hal_spi_info+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	00030230 	.word	0x00030230

000d60bc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <hal_spi_set_settings+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030230 	.word	0x00030230

000d60cc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <hal_spi_acquire+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	00030230 	.word	0x00030230

000d60dc <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <hal_spi_release+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	00030230 	.word	0x00030230

000d60ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_USB_USART_Init+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	681b      	ldr	r3, [r3, #0]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003024c 	.word	0x0003024c

000d60fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_USB_USART_Begin+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	685b      	ldr	r3, [r3, #4]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003024c 	.word	0x0003024c

000d610c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_USB_USART_Available_Data+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	691b      	ldr	r3, [r3, #16]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	0003024c 	.word	0x0003024c

000d611c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	695b      	ldr	r3, [r3, #20]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	0003024c 	.word	0x0003024c

000d612c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_USB_USART_Receive_Data+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	699b      	ldr	r3, [r3, #24]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	0003024c 	.word	0x0003024c

000d613c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_USB_USART_Send_Data+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	69db      	ldr	r3, [r3, #28]
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	0003024c 	.word	0x0003024c

000d614c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <HAL_USB_USART_Flush_Data+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	6a1b      	ldr	r3, [r3, #32]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	0003024c 	.word	0x0003024c

000d615c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <panic_+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030260 	.word	0x00030260

000d616c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <log_message+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030260 	.word	0x00030260

000d617c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <set_system_mode+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	685b      	ldr	r3, [r3, #4]
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030220 	.word	0x00030220

000d618c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <system_delay_ms+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	695b      	ldr	r3, [r3, #20]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030220 	.word	0x00030220

000d619c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <system_thread_set_state+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030220 	.word	0x00030220

000d61ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b03      	ldr	r3, [pc, #12]	; (d61bc <system_ctrl_set_app_request_handler+0x10>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d61b6:	9301      	str	r3, [sp, #4]
   d61b8:	bd08      	pop	{r3, pc}
   d61ba:	0000      	.short	0x0000
   d61bc:	00030220 	.word	0x00030220

000d61c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b03      	ldr	r3, [pc, #12]	; (d61d0 <system_ctrl_set_result+0x10>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d61ca:	9301      	str	r3, [sp, #4]
   d61cc:	bd08      	pop	{r3, pc}
   d61ce:	0000      	.short	0x0000
   d61d0:	00030220 	.word	0x00030220

000d61d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <network_connect+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	685b      	ldr	r3, [r3, #4]
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030240 	.word	0x00030240

000d61e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <network_connecting+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	689b      	ldr	r3, [r3, #8]
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030240 	.word	0x00030240

000d61f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <network_disconnect+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	68db      	ldr	r3, [r3, #12]
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	00030240 	.word	0x00030240

000d6204 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <network_ready+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	691b      	ldr	r3, [r3, #16]
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	00030240 	.word	0x00030240

000d6214 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <network_on+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	695b      	ldr	r3, [r3, #20]
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	00030240 	.word	0x00030240

000d6224 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <network_off+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	699b      	ldr	r3, [r3, #24]
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	00030240 	.word	0x00030240

000d6234 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <network_listen+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	69db      	ldr	r3, [r3, #28]
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030240 	.word	0x00030240

000d6244 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <network_listening+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	6a1b      	ldr	r3, [r3, #32]
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	00030240 	.word	0x00030240

000d6254 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <network_set_listen_timeout+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	00030240 	.word	0x00030240

000d6264 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <network_get_listen_timeout+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	00030240 	.word	0x00030240

000d6274 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <network_is_on+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030240 	.word	0x00030240

000d6284 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <network_is_off+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030240 	.word	0x00030240

000d6294 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <spark_deviceID+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	69db      	ldr	r3, [r3, #28]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	00030244 	.word	0x00030244

000d62a4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030244 	.word	0x00030244

000d62b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <malloc+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	681b      	ldr	r3, [r3, #0]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	0003021c 	.word	0x0003021c

000d62c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <free+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	685b      	ldr	r3, [r3, #4]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	0003021c 	.word	0x0003021c

000d62d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <realloc+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	689b      	ldr	r3, [r3, #8]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	0003021c 	.word	0x0003021c

000d62e4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <vsnprintf+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	0003021c 	.word	0x0003021c

000d62f4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <__errno+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	0003021c 	.word	0x0003021c

000d6304 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <newlib_impure_ptr_callback+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	0003021c 	.word	0x0003021c

000d6314 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6314:	2200      	movs	r2, #0
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	4611      	mov	r1, r2
   d631a:	f7ff bf93 	b.w	d6244 <network_listening>

000d631e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d631e:	2200      	movs	r2, #0
   d6320:	6840      	ldr	r0, [r0, #4]
   d6322:	4611      	mov	r1, r2
   d6324:	f7ff bf9e 	b.w	d6264 <network_get_listen_timeout>

000d6328 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6328:	6840      	ldr	r0, [r0, #4]
   d632a:	2200      	movs	r2, #0
   d632c:	f7ff bf92 	b.w	d6254 <network_set_listen_timeout>

000d6330 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6330:	6840      	ldr	r0, [r0, #4]
   d6332:	2200      	movs	r2, #0
   d6334:	f081 0101 	eor.w	r1, r1, #1
   d6338:	f7ff bf7c 	b.w	d6234 <network_listen>

000d633c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d633c:	2300      	movs	r3, #0
   d633e:	6840      	ldr	r0, [r0, #4]
   d6340:	461a      	mov	r2, r3
   d6342:	4619      	mov	r1, r3
   d6344:	f7ff bf6e 	b.w	d6224 <network_off>

000d6348 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6348:	2300      	movs	r3, #0
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	461a      	mov	r2, r3
   d634e:	4619      	mov	r1, r3
   d6350:	f7ff bf60 	b.w	d6214 <network_on>

000d6354 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6354:	2200      	movs	r2, #0
   d6356:	6840      	ldr	r0, [r0, #4]
   d6358:	4611      	mov	r1, r2
   d635a:	f7ff bf53 	b.w	d6204 <network_ready>

000d635e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d635e:	2200      	movs	r2, #0
   d6360:	6840      	ldr	r0, [r0, #4]
   d6362:	4611      	mov	r1, r2
   d6364:	f7ff bf3e 	b.w	d61e4 <network_connecting>

000d6368 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6368:	6840      	ldr	r0, [r0, #4]
   d636a:	2200      	movs	r2, #0
   d636c:	2102      	movs	r1, #2
   d636e:	f7ff bf41 	b.w	d61f4 <network_disconnect>

000d6372 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6372:	2300      	movs	r3, #0
   d6374:	6840      	ldr	r0, [r0, #4]
   d6376:	461a      	mov	r2, r3
   d6378:	f7ff bf2c 	b.w	d61d4 <network_connect>

000d637c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d637c:	4b02      	ldr	r3, [pc, #8]	; (d6388 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d637e:	2203      	movs	r2, #3
   d6380:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6382:	4a02      	ldr	r2, [pc, #8]	; (d638c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6384:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6386:	4770      	bx	lr
   d6388:	2003e650 	.word	0x2003e650
   d638c:	000d848c 	.word	0x000d848c

000d6390 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6390:	2100      	movs	r1, #0
   d6392:	f7ff be9b 	b.w	d60cc <hal_spi_acquire>

000d6396 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6396:	2100      	movs	r1, #0
   d6398:	f7ff bea0 	b.w	d60dc <hal_spi_release>

000d639c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d639c:	b510      	push	{r4, lr}
   d639e:	4604      	mov	r4, r0
   d63a0:	4608      	mov	r0, r1
{
    _spi = spi;
   d63a2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d63a4:	f7ff fe72 	bl	d608c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d63a8:	2300      	movs	r3, #0
   d63aa:	6063      	str	r3, [r4, #4]
}
   d63ac:	4620      	mov	r0, r4
   d63ae:	bd10      	pop	{r4, pc}

000d63b0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d63b0:	b510      	push	{r4, lr}
   d63b2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d63b4:	7800      	ldrb	r0, [r0, #0]
   d63b6:	f7ff ffeb 	bl	d6390 <_ZN8SPIClass4lockEv.isra.0>
   d63ba:	b948      	cbnz	r0, d63d0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d63bc:	7820      	ldrb	r0, [r4, #0]
   d63be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d63c2:	f7ff fe53 	bl	d606c <hal_spi_begin>
        unlock();
   d63c6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d63c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d63cc:	f7ff bfe3 	b.w	d6396 <_ZN8SPIClass6unlockEv.isra.0>
}
   d63d0:	bd10      	pop	{r4, pc}

000d63d2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d63d2:	7800      	ldrb	r0, [r0, #0]
   d63d4:	f7ff bfdf 	b.w	d6396 <_ZN8SPIClass6unlockEv.isra.0>

000d63d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63d8:	0840      	lsrs	r0, r0, #1
{
   d63da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d63dc:	6018      	str	r0, [r3, #0]
   d63de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63e0:	6818      	ldr	r0, [r3, #0]
   d63e2:	4288      	cmp	r0, r1
   d63e4:	b2e5      	uxtb	r5, r4
   d63e6:	d906      	bls.n	d63f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63e8:	3401      	adds	r4, #1
   d63ea:	2c08      	cmp	r4, #8
   d63ec:	d002      	beq.n	d63f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d63ee:	0840      	lsrs	r0, r0, #1
   d63f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d63f2:	e7f5      	b.n	d63e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d63f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d63f8:	5d5b      	ldrb	r3, [r3, r5]
   d63fa:	7013      	strb	r3, [r2, #0]
}
   d63fc:	bd30      	pop	{r4, r5, pc}
   d63fe:	bf00      	nop
   d6400:	000d84c0 	.word	0x000d84c0

000d6404 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6408:	4606      	mov	r6, r0
   d640a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d640c:	7800      	ldrb	r0, [r0, #0]
{
   d640e:	460c      	mov	r4, r1
    CHECK(lock());
   d6410:	f7ff ffbe 	bl	d6390 <_ZN8SPIClass4lockEv.isra.0>
   d6414:	2800      	cmp	r0, #0
   d6416:	db1b      	blt.n	d6450 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6418:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d641a:	2214      	movs	r2, #20
   d641c:	2100      	movs	r1, #0
   d641e:	a809      	add	r0, sp, #36	; 0x24
   d6420:	f001 fa38 	bl	d7894 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6424:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6426:	2200      	movs	r2, #0
   d6428:	a909      	add	r1, sp, #36	; 0x24
   d642a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d642c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6430:	f7ff fe3c 	bl	d60ac <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6434:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6438:	b113      	cbz	r3, d6440 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d643a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d643e:	b155      	cbz	r5, d6456 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6440:	2700      	movs	r7, #0
   d6442:	46b9      	mov	r9, r7
   d6444:	46b8      	mov	r8, r7
   d6446:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6448:	7923      	ldrb	r3, [r4, #4]
   d644a:	b15d      	cbz	r5, d6464 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d644c:	b1c3      	cbz	r3, d6480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d644e:	2000      	movs	r0, #0
}
   d6450:	b00f      	add	sp, #60	; 0x3c
   d6452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6456:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d645a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d645e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6462:	e7f1      	b.n	d6448 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6464:	2b00      	cmp	r3, #0
   d6466:	d135      	bne.n	d64d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6468:	68a3      	ldr	r3, [r4, #8]
   d646a:	4543      	cmp	r3, r8
   d646c:	d108      	bne.n	d6480 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d646e:	f88d 9020 	strb.w	r9, [sp, #32]
   d6472:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6476:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d647a:	89a3      	ldrh	r3, [r4, #12]
   d647c:	429a      	cmp	r2, r3
   d647e:	d0e6      	beq.n	d644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6480:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6482:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d6484:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6488:	980a      	ldr	r0, [sp, #40]	; 0x28
   d648a:	ab04      	add	r3, sp, #16
   d648c:	f10d 020f 	add.w	r2, sp, #15
   d6490:	f7ff ffa2 	bl	d63d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6494:	7921      	ldrb	r1, [r4, #4]
   d6496:	b985      	cbnz	r5, d64ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6498:	b989      	cbnz	r1, d64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d649a:	68a3      	ldr	r3, [r4, #8]
   d649c:	4543      	cmp	r3, r8
   d649e:	d30e      	bcc.n	d64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d64a0:	f88d 9020 	strb.w	r9, [sp, #32]
   d64a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d64a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d64ac:	89a3      	ldrh	r3, [r4, #12]
   d64ae:	429a      	cmp	r2, r3
   d64b0:	d105      	bne.n	d64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d64b2:	9b04      	ldr	r3, [sp, #16]
   d64b4:	4543      	cmp	r3, r8
   d64b6:	d102      	bne.n	d64be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d64b8:	e7c9      	b.n	d644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d64ba:	2900      	cmp	r1, #0
   d64bc:	d1f9      	bne.n	d64b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d64be:	2300      	movs	r3, #0
   d64c0:	9301      	str	r3, [sp, #4]
   d64c2:	7b63      	ldrb	r3, [r4, #13]
   d64c4:	9300      	str	r3, [sp, #0]
   d64c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d64ca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d64cc:	7830      	ldrb	r0, [r6, #0]
   d64ce:	f7ff fdf5 	bl	d60bc <hal_spi_set_settings>
   d64d2:	e7bc      	b.n	d644e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d64d4:	e9cd 5500 	strd	r5, r5, [sp]
   d64d8:	462b      	mov	r3, r5
   d64da:	462a      	mov	r2, r5
   d64dc:	2101      	movs	r1, #1
   d64de:	e7f5      	b.n	d64cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d64e0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d64e0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d64e2:	7800      	ldrb	r0, [r0, #0]
   d64e4:	f7ff fdca 	bl	d607c <hal_spi_transfer>
}
   d64e8:	b2c0      	uxtb	r0, r0
   d64ea:	bd08      	pop	{r3, pc}

000d64ec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d64ec:	b510      	push	{r4, lr}
   d64ee:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d64f0:	6800      	ldr	r0, [r0, #0]
   d64f2:	b118      	cbz	r0, d64fc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d64f4:	f7ff fee6 	bl	d62c4 <free>
            wakeupSource_ = nullptr;
   d64f8:	2300      	movs	r3, #0
   d64fa:	6023      	str	r3, [r4, #0]
        }
    }
   d64fc:	bd10      	pop	{r4, pc}

000d64fe <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d64fe:	b510      	push	{r4, lr}
   d6500:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6502:	f7ff fff3 	bl	d64ec <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6506:	4620      	mov	r0, r4
   d6508:	bd10      	pop	{r4, pc}
	...

000d650c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d650c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d650e:	4b09      	ldr	r3, [pc, #36]	; (d6534 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6510:	4c09      	ldr	r4, [pc, #36]	; (d6538 <_GLOBAL__sub_I_System+0x2c>)
   d6512:	2202      	movs	r2, #2
   d6514:	2000      	movs	r0, #0
   d6516:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6518:	4b08      	ldr	r3, [pc, #32]	; (d653c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d651a:	6020      	str	r0, [r4, #0]
   d651c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d651e:	71a0      	strb	r0, [r4, #6]
   d6520:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6522:	f7ff fe2b 	bl	d617c <set_system_mode>
SystemClass System;
   d6526:	4620      	mov	r0, r4
   d6528:	4a05      	ldr	r2, [pc, #20]	; (d6540 <_GLOBAL__sub_I_System+0x34>)
   d652a:	4906      	ldr	r1, [pc, #24]	; (d6544 <_GLOBAL__sub_I_System+0x38>)
   d652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6530:	f001 b878 	b.w	d7624 <__aeabi_atexit>
   d6534:	2003e664 	.word	0x2003e664
   d6538:	2003e658 	.word	0x2003e658
   d653c:	ffff0000 	.word	0xffff0000
   d6540:	2003e514 	.word	0x2003e514
   d6544:	000d64ff 	.word	0x000d64ff

000d6548 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6548:	b570      	push	{r4, r5, r6, lr}
   d654a:	b086      	sub	sp, #24
   d654c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d654e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6550:	4668      	mov	r0, sp
   d6552:	f000 fa73 	bl	d6a3c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6558:	1d34      	adds	r4, r6, #4
   d655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d655c:	682b      	ldr	r3, [r5, #0]
   d655e:	7023      	strb	r3, [r4, #0]
    }
   d6560:	4630      	mov	r0, r6
   d6562:	b006      	add	sp, #24
   d6564:	bd70      	pop	{r4, r5, r6, pc}

000d6566 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6566:	b510      	push	{r4, lr}
   d6568:	4604      	mov	r4, r0
{
	free(buffer);
   d656a:	6800      	ldr	r0, [r0, #0]
   d656c:	f7ff feaa 	bl	d62c4 <free>
}
   d6570:	4620      	mov	r0, r4
   d6572:	bd10      	pop	{r4, pc}

000d6574 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6574:	b510      	push	{r4, lr}
   d6576:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6578:	6800      	ldr	r0, [r0, #0]
   d657a:	b108      	cbz	r0, d6580 <_ZN6String10invalidateEv+0xc>
   d657c:	f7ff fea2 	bl	d62c4 <free>
	buffer = NULL;
   d6580:	2300      	movs	r3, #0
	capacity = len = 0;
   d6582:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6586:	6023      	str	r3, [r4, #0]
}
   d6588:	bd10      	pop	{r4, pc}

000d658a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d658a:	b538      	push	{r3, r4, r5, lr}
   d658c:	4604      	mov	r4, r0
   d658e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6590:	6800      	ldr	r0, [r0, #0]
   d6592:	3101      	adds	r1, #1
   d6594:	f7ff fe9e 	bl	d62d4 <realloc>
	if (newbuffer) {
   d6598:	b110      	cbz	r0, d65a0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d659a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d659e:	2001      	movs	r0, #1
	}
	return 0;
}
   d65a0:	bd38      	pop	{r3, r4, r5, pc}

000d65a2 <_ZN6String7reserveEj>:
{
   d65a2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d65a4:	6803      	ldr	r3, [r0, #0]
{
   d65a6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d65a8:	b123      	cbz	r3, d65b4 <_ZN6String7reserveEj+0x12>
   d65aa:	6843      	ldr	r3, [r0, #4]
   d65ac:	428b      	cmp	r3, r1
   d65ae:	d301      	bcc.n	d65b4 <_ZN6String7reserveEj+0x12>
   d65b0:	2001      	movs	r0, #1
}
   d65b2:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d65b4:	4620      	mov	r0, r4
   d65b6:	f7ff ffe8 	bl	d658a <_ZN6String12changeBufferEj>
   d65ba:	2800      	cmp	r0, #0
   d65bc:	d0f9      	beq.n	d65b2 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d65be:	68a3      	ldr	r3, [r4, #8]
   d65c0:	2b00      	cmp	r3, #0
   d65c2:	d1f5      	bne.n	d65b0 <_ZN6String7reserveEj+0xe>
   d65c4:	6822      	ldr	r2, [r4, #0]
   d65c6:	7013      	strb	r3, [r2, #0]
   d65c8:	e7f2      	b.n	d65b0 <_ZN6String7reserveEj+0xe>

000d65ca <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d65ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d65cc:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d65ce:	4611      	mov	r1, r2
   d65d0:	9201      	str	r2, [sp, #4]
{
   d65d2:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d65d4:	f7ff ffe5 	bl	d65a2 <_ZN6String7reserveEj>
   d65d8:	9a01      	ldr	r2, [sp, #4]
   d65da:	b928      	cbnz	r0, d65e8 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d65dc:	4620      	mov	r0, r4
   d65de:	f7ff ffc9 	bl	d6574 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d65e2:	4620      	mov	r0, r4
   d65e4:	b003      	add	sp, #12
   d65e6:	bd30      	pop	{r4, r5, pc}
	len = length;
   d65e8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d65ea:	4629      	mov	r1, r5
   d65ec:	6820      	ldr	r0, [r4, #0]
   d65ee:	f001 f943 	bl	d7878 <memcpy>
	buffer[len] = 0;
   d65f2:	6822      	ldr	r2, [r4, #0]
   d65f4:	68a3      	ldr	r3, [r4, #8]
   d65f6:	2100      	movs	r1, #0
   d65f8:	54d1      	strb	r1, [r2, r3]
	return *this;
   d65fa:	e7f2      	b.n	d65e2 <_ZN6String4copyEPKcj+0x18>

000d65fc <_ZN6StringC1EPKc>:
	buffer = NULL;
   d65fc:	2300      	movs	r3, #0
String::String(const char *cstr)
   d65fe:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6600:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6604:	4604      	mov	r4, r0
	len = 0;
   d6606:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6608:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d660a:	b141      	cbz	r1, d661e <_ZN6StringC1EPKc+0x22>
   d660c:	4608      	mov	r0, r1
   d660e:	9101      	str	r1, [sp, #4]
   d6610:	f001 f976 	bl	d7900 <strlen>
   d6614:	9901      	ldr	r1, [sp, #4]
   d6616:	4602      	mov	r2, r0
   d6618:	4620      	mov	r0, r4
   d661a:	f7ff ffd6 	bl	d65ca <_ZN6String4copyEPKcj>
}
   d661e:	4620      	mov	r0, r4
   d6620:	b002      	add	sp, #8
   d6622:	bd10      	pop	{r4, pc}

000d6624 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6624:	b513      	push	{r0, r1, r4, lr}
   d6626:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6628:	b159      	cbz	r1, d6642 <_ZN6StringaSEPKc+0x1e>
   d662a:	4608      	mov	r0, r1
   d662c:	9101      	str	r1, [sp, #4]
   d662e:	f001 f967 	bl	d7900 <strlen>
   d6632:	9901      	ldr	r1, [sp, #4]
   d6634:	4602      	mov	r2, r0
   d6636:	4620      	mov	r0, r4
   d6638:	f7ff ffc7 	bl	d65ca <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d663c:	4620      	mov	r0, r4
   d663e:	b002      	add	sp, #8
   d6640:	bd10      	pop	{r4, pc}
	else invalidate();
   d6642:	f7ff ff97 	bl	d6574 <_ZN6String10invalidateEv>
   d6646:	e7f9      	b.n	d663c <_ZN6StringaSEPKc+0x18>

000d6648 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6648:	b510      	push	{r4, lr}
   d664a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d664c:	6800      	ldr	r0, [r0, #0]
   d664e:	b108      	cbz	r0, d6654 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6650:	f7ff fc24 	bl	d5e9c <os_mutex_recursive_destroy>
    }
   d6654:	4620      	mov	r0, r4
   d6656:	bd10      	pop	{r4, pc}

000d6658 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6658:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d665a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d665c:	4604      	mov	r4, r0
      if (_M_manager)
   d665e:	b113      	cbz	r3, d6666 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6660:	2203      	movs	r2, #3
   d6662:	4601      	mov	r1, r0
   d6664:	4798      	blx	r3
    }
   d6666:	4620      	mov	r0, r4
   d6668:	bd10      	pop	{r4, pc}
	...

000d666c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d666c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d666e:	4c06      	ldr	r4, [pc, #24]	; (d6688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6670:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6672:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6674:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6676:	f7ff fc09 	bl	d5e8c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d667a:	4620      	mov	r0, r4
   d667c:	4a03      	ldr	r2, [pc, #12]	; (d668c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d667e:	4904      	ldr	r1, [pc, #16]	; (d6690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6684:	f000 bfce 	b.w	d7624 <__aeabi_atexit>
   d6688:	2003e668 	.word	0x2003e668
   d668c:	2003e514 	.word	0x2003e514
   d6690:	000d6649 	.word	0x000d6649

000d6694 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6696:	4606      	mov	r6, r0
   d6698:	460d      	mov	r5, r1
  size_t n = 0;
   d669a:	188f      	adds	r7, r1, r2
   d669c:	2400      	movs	r4, #0
  while (size--) {
   d669e:	42bd      	cmp	r5, r7
   d66a0:	d00c      	beq.n	d66bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d66a2:	6833      	ldr	r3, [r6, #0]
   d66a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d66a8:	689b      	ldr	r3, [r3, #8]
   d66aa:	4630      	mov	r0, r6
   d66ac:	4798      	blx	r3
     if (chunk>=0)
   d66ae:	1e03      	subs	r3, r0, #0
   d66b0:	db01      	blt.n	d66b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d66b2:	441c      	add	r4, r3
  while (size--) {
   d66b4:	e7f3      	b.n	d669e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d66b6:	2c00      	cmp	r4, #0
   d66b8:	bf08      	it	eq
   d66ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d66bc:	4620      	mov	r0, r4
   d66be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d66c0:	b513      	push	{r0, r1, r4, lr}
   d66c2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d66c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d66c6:	b159      	cbz	r1, d66e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d66c8:	9101      	str	r1, [sp, #4]
   d66ca:	f001 f919 	bl	d7900 <strlen>
   d66ce:	6823      	ldr	r3, [r4, #0]
   d66d0:	9901      	ldr	r1, [sp, #4]
   d66d2:	68db      	ldr	r3, [r3, #12]
   d66d4:	4602      	mov	r2, r0
   d66d6:	4620      	mov	r0, r4
    }
   d66d8:	b002      	add	sp, #8
   d66da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d66de:	4718      	bx	r3
    }
   d66e0:	b002      	add	sp, #8
   d66e2:	bd10      	pop	{r4, pc}

000d66e4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d66e4:	b508      	push	{r3, lr}
  return write(str);
   d66e6:	f7ff ffeb 	bl	d66c0 <_ZN5Print5writeEPKc>
}
   d66ea:	bd08      	pop	{r3, pc}

000d66ec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d66ec:	6803      	ldr	r3, [r0, #0]
   d66ee:	689b      	ldr	r3, [r3, #8]
   d66f0:	4718      	bx	r3

000d66f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d66f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d66f4:	210d      	movs	r1, #13
{
   d66f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d66f8:	f7ff fff8 	bl	d66ec <_ZN5Print5printEc>
  n += print('\n');
   d66fc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d66fe:	4604      	mov	r4, r0
  n += print('\n');
   d6700:	4628      	mov	r0, r5
   d6702:	f7ff fff3 	bl	d66ec <_ZN5Print5printEc>
  return n;
}
   d6706:	4420      	add	r0, r4
   d6708:	bd38      	pop	{r3, r4, r5, pc}

000d670a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d670a:	b538      	push	{r3, r4, r5, lr}
   d670c:	4605      	mov	r5, r0
  return write(str);
   d670e:	f7ff ffd7 	bl	d66c0 <_ZN5Print5writeEPKc>
   d6712:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6714:	4628      	mov	r0, r5
   d6716:	f7ff ffec 	bl	d66f2 <_ZN5Print7printlnEv>
  return n;
}
   d671a:	4420      	add	r0, r4
   d671c:	bd38      	pop	{r3, r4, r5, pc}

000d671e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d671e:	b530      	push	{r4, r5, lr}
   d6720:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6722:	2300      	movs	r3, #0
   d6724:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6728:	2a01      	cmp	r2, #1
   d672a:	bf98      	it	ls
   d672c:	220a      	movls	r2, #10
   d672e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6730:	460d      	mov	r5, r1
   d6732:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6736:	fb01 5312 	mls	r3, r1, r2, r5
   d673a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d673e:	2b09      	cmp	r3, #9
   d6740:	bf94      	ite	ls
   d6742:	3330      	addls	r3, #48	; 0x30
   d6744:	3337      	addhi	r3, #55	; 0x37
   d6746:	b2db      	uxtb	r3, r3
  } while(n);
   d6748:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d674a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d674e:	d9ef      	bls.n	d6730 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6750:	4621      	mov	r1, r4
   d6752:	f7ff ffb5 	bl	d66c0 <_ZN5Print5writeEPKc>
}
   d6756:	b00b      	add	sp, #44	; 0x2c
   d6758:	bd30      	pop	{r4, r5, pc}

000d675a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d675e:	b086      	sub	sp, #24
   d6760:	af00      	add	r7, sp, #0
   d6762:	4605      	mov	r5, r0
   d6764:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6766:	1d38      	adds	r0, r7, #4
   d6768:	2114      	movs	r1, #20
{
   d676a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d676c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d676e:	f7ff fdb9 	bl	d62e4 <vsnprintf>

    if (n<bufsize)
   d6772:	2813      	cmp	r0, #19
   d6774:	d80e      	bhi.n	d6794 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6776:	1d39      	adds	r1, r7, #4
   d6778:	4628      	mov	r0, r5
   d677a:	f7ff ffa1 	bl	d66c0 <_ZN5Print5writeEPKc>
   d677e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6780:	b11e      	cbz	r6, d678a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6782:	4628      	mov	r0, r5
   d6784:	f7ff ffb5 	bl	d66f2 <_ZN5Print7printlnEv>
   d6788:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d678a:	4620      	mov	r0, r4
   d678c:	3718      	adds	r7, #24
   d678e:	46bd      	mov	sp, r7
   d6790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6794:	f100 0308 	add.w	r3, r0, #8
   d6798:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d679c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d679e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d67a2:	4622      	mov	r2, r4
   d67a4:	1c41      	adds	r1, r0, #1
   d67a6:	683b      	ldr	r3, [r7, #0]
   d67a8:	4668      	mov	r0, sp
   d67aa:	f7ff fd9b 	bl	d62e4 <vsnprintf>
  return write(str);
   d67ae:	4669      	mov	r1, sp
   d67b0:	4628      	mov	r0, r5
   d67b2:	f7ff ff85 	bl	d66c0 <_ZN5Print5writeEPKc>
   d67b6:	4604      	mov	r4, r0
   d67b8:	46c5      	mov	sp, r8
   d67ba:	e7e1      	b.n	d6780 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d67bc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d67bc:	2300      	movs	r3, #0
   d67be:	6840      	ldr	r0, [r0, #4]
   d67c0:	461a      	mov	r2, r3
   d67c2:	4619      	mov	r1, r3
   d67c4:	f7ff bd26 	b.w	d6214 <network_on>

000d67c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d67c8:	4b01      	ldr	r3, [pc, #4]	; (d67d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d67ca:	4a02      	ldr	r2, [pc, #8]	; (d67d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d67cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d67ce:	4770      	bx	lr
   d67d0:	2003e66c 	.word	0x2003e66c
   d67d4:	000d84d0 	.word	0x000d84d0

000d67d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d67d8:	4b02      	ldr	r3, [pc, #8]	; (d67e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d67da:	681a      	ldr	r2, [r3, #0]
   d67dc:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d67de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d67e0:	4770      	bx	lr
   d67e2:	bf00      	nop
   d67e4:	2003e4ac 	.word	0x2003e4ac
   d67e8:	2003e670 	.word	0x2003e670

000d67ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d67ec:	2100      	movs	r1, #0
   d67ee:	f7ff bccd 	b.w	d618c <system_delay_ms>

000d67f2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d67f2:	b510      	push	{r4, lr}
   d67f4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67f6:	f7ff ff2f 	bl	d6658 <_ZNSt14_Function_baseD1Ev>
   d67fa:	4620      	mov	r0, r4
   d67fc:	bd10      	pop	{r4, pc}
	...

000d6800 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6800:	4803      	ldr	r0, [pc, #12]	; (d6810 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6802:	4a04      	ldr	r2, [pc, #16]	; (d6814 <_GLOBAL__sub_I_RGB+0x14>)
   d6804:	4904      	ldr	r1, [pc, #16]	; (d6818 <_GLOBAL__sub_I_RGB+0x18>)
   d6806:	2300      	movs	r3, #0
   d6808:	6083      	str	r3, [r0, #8]
   d680a:	f000 bf0b 	b.w	d7624 <__aeabi_atexit>
   d680e:	bf00      	nop
   d6810:	2003e674 	.word	0x2003e674
   d6814:	2003e514 	.word	0x2003e514
   d6818:	000d67f3 	.word	0x000d67f3

000d681c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d681c:	4b01      	ldr	r3, [pc, #4]	; (d6824 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d681e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6820:	4770      	bx	lr
   d6822:	bf00      	nop
   d6824:	2003e4b0 	.word	0x2003e4b0

000d6828 <serialEventRun>:
{
   d6828:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d682a:	4b0b      	ldr	r3, [pc, #44]	; (d6858 <serialEventRun+0x30>)
   d682c:	b143      	cbz	r3, d6840 <serialEventRun+0x18>
   d682e:	f000 f971 	bl	d6b14 <_Z16_fetch_usbserialv>
   d6832:	6803      	ldr	r3, [r0, #0]
   d6834:	691b      	ldr	r3, [r3, #16]
   d6836:	4798      	blx	r3
   d6838:	2800      	cmp	r0, #0
   d683a:	dd01      	ble.n	d6840 <serialEventRun+0x18>
        serialEvent();
   d683c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6840:	4b06      	ldr	r3, [pc, #24]	; (d685c <serialEventRun+0x34>)
   d6842:	b143      	cbz	r3, d6856 <serialEventRun+0x2e>
   d6844:	f000 f9e4 	bl	d6c10 <_Z22__fetch_global_Serial1v>
   d6848:	6803      	ldr	r3, [r0, #0]
   d684a:	691b      	ldr	r3, [r3, #16]
   d684c:	4798      	blx	r3
   d684e:	2800      	cmp	r0, #0
   d6850:	dd01      	ble.n	d6856 <serialEventRun+0x2e>
        serialEvent1();
   d6852:	f3af 8000 	nop.w
}
   d6856:	bd08      	pop	{r3, pc}
	...

000d6860 <_post_loop>:
{
   d6860:	b508      	push	{r3, lr}
	serialEventRun();
   d6862:	f7ff ffe1 	bl	d6828 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6866:	f7ff fae9 	bl	d5e3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d686a:	4b01      	ldr	r3, [pc, #4]	; (d6870 <_post_loop+0x10>)
   d686c:	6018      	str	r0, [r3, #0]
}
   d686e:	bd08      	pop	{r3, pc}
   d6870:	2003e7d4 	.word	0x2003e7d4

000d6874 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6874:	4802      	ldr	r0, [pc, #8]	; (d6880 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6876:	4a03      	ldr	r2, [pc, #12]	; (d6884 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6878:	4903      	ldr	r1, [pc, #12]	; (d6888 <_Z33system_initialize_user_backup_ramv+0x14>)
   d687a:	1a12      	subs	r2, r2, r0
   d687c:	f000 bffc 	b.w	d7878 <memcpy>
   d6880:	2003f400 	.word	0x2003f400
   d6884:	2003f404 	.word	0x2003f404
   d6888:	000d87a0 	.word	0x000d87a0

000d688c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d688c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d688e:	2300      	movs	r3, #0
   d6890:	9300      	str	r3, [sp, #0]
   d6892:	461a      	mov	r2, r3
   d6894:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6898:	f7ff fc92 	bl	d61c0 <system_ctrl_set_result>
}
   d689c:	b003      	add	sp, #12
   d689e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d68a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d68a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d68a6:	8843      	ldrh	r3, [r0, #2]
   d68a8:	2b0a      	cmp	r3, #10
   d68aa:	d008      	beq.n	d68be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d68ac:	2b50      	cmp	r3, #80	; 0x50
   d68ae:	d10b      	bne.n	d68c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d68b0:	4b09      	ldr	r3, [pc, #36]	; (d68d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d68b2:	681b      	ldr	r3, [r3, #0]
   d68b4:	b14b      	cbz	r3, d68ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d68b6:	b003      	add	sp, #12
   d68b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d68bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d68be:	f7ff ffe5 	bl	d688c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d68c2:	b003      	add	sp, #12
   d68c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d68c8:	2300      	movs	r3, #0
   d68ca:	9300      	str	r3, [sp, #0]
   d68cc:	461a      	mov	r2, r3
   d68ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d68d2:	f7ff fc75 	bl	d61c0 <system_ctrl_set_result>
}
   d68d6:	e7f4      	b.n	d68c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d68d8:	2003e688 	.word	0x2003e688

000d68dc <module_user_init_hook>:
{
   d68dc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d68de:	4c12      	ldr	r4, [pc, #72]	; (d6928 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d68e0:	4812      	ldr	r0, [pc, #72]	; (d692c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d68e2:	4d13      	ldr	r5, [pc, #76]	; (d6930 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d68e4:	2100      	movs	r1, #0
   d68e6:	f7ff fd0d 	bl	d6304 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d68ea:	6823      	ldr	r3, [r4, #0]
   d68ec:	42ab      	cmp	r3, r5
   d68ee:	4b11      	ldr	r3, [pc, #68]	; (d6934 <module_user_init_hook+0x58>)
   d68f0:	bf0c      	ite	eq
   d68f2:	2201      	moveq	r2, #1
   d68f4:	2200      	movne	r2, #0
   d68f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d68f8:	d002      	beq.n	d6900 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d68fa:	f7ff ffbb 	bl	d6874 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d68fe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6900:	f7ff fa8c 	bl	d5e1c <HAL_RNG_GetRandomNumber>
   d6904:	4604      	mov	r4, r0
    srand(seed);
   d6906:	f000 ffcd 	bl	d78a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d690a:	4b0b      	ldr	r3, [pc, #44]	; (d6938 <module_user_init_hook+0x5c>)
   d690c:	b113      	cbz	r3, d6914 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d690e:	4620      	mov	r0, r4
   d6910:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6914:	2100      	movs	r1, #0
   d6916:	4808      	ldr	r0, [pc, #32]	; (d6938 <module_user_init_hook+0x5c>)
   d6918:	f7ff fcc4 	bl	d62a4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d691c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6920:	4806      	ldr	r0, [pc, #24]	; (d693c <module_user_init_hook+0x60>)
   d6922:	2100      	movs	r1, #0
   d6924:	f7ff bc42 	b.w	d61ac <system_ctrl_set_app_request_handler>
   d6928:	2003f400 	.word	0x2003f400
   d692c:	000d681d 	.word	0x000d681d
   d6930:	9a271c1e 	.word	0x9a271c1e
   d6934:	2003e684 	.word	0x2003e684
   d6938:	00000000 	.word	0x00000000
   d693c:	000d68a5 	.word	0x000d68a5

000d6940 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6940:	4770      	bx	lr

000d6942 <_ZN9IPAddressD0Ev>:
   d6942:	b510      	push	{r4, lr}
   d6944:	2118      	movs	r1, #24
   d6946:	4604      	mov	r4, r0
   d6948:	f000 fe71 	bl	d762e <_ZdlPvj>
   d694c:	4620      	mov	r0, r4
   d694e:	bd10      	pop	{r4, pc}

000d6950 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6950:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6952:	7d03      	ldrb	r3, [r0, #20]
   d6954:	2b06      	cmp	r3, #6
{
   d6956:	b08d      	sub	sp, #52	; 0x34
   d6958:	460e      	mov	r6, r1
   d695a:	f100 0704 	add.w	r7, r0, #4
   d695e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6962:	d012      	beq.n	d698a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6964:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6968:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d696c:	220a      	movs	r2, #10
   d696e:	4630      	mov	r0, r6
   d6970:	f7ff fed5 	bl	d671e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6974:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6976:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6978:	d019      	beq.n	d69ae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d697a:	2c00      	cmp	r4, #0
   d697c:	d0f4      	beq.n	d6968 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d697e:	212e      	movs	r1, #46	; 0x2e
   d6980:	4630      	mov	r0, r6
   d6982:	f7ff feb3 	bl	d66ec <_ZN5Print5printEc>
   d6986:	4404      	add	r4, r0
   d6988:	e7ee      	b.n	d6968 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d698a:	232f      	movs	r3, #47	; 0x2f
   d698c:	466a      	mov	r2, sp
   d698e:	4639      	mov	r1, r7
   d6990:	200a      	movs	r0, #10
		buf[0] = 0;
   d6992:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6996:	f7ff fa89 	bl	d5eac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d699a:	4668      	mov	r0, sp
   d699c:	f000 ffb0 	bl	d7900 <strlen>
   d69a0:	6833      	ldr	r3, [r6, #0]
   d69a2:	4602      	mov	r2, r0
   d69a4:	68db      	ldr	r3, [r3, #12]
   d69a6:	4669      	mov	r1, sp
   d69a8:	4630      	mov	r0, r6
   d69aa:	4798      	blx	r3
   d69ac:	4604      	mov	r4, r0
    }
    return n;
}
   d69ae:	4620      	mov	r0, r4
   d69b0:	b00d      	add	sp, #52	; 0x34
   d69b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69b4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d69b4:	b510      	push	{r4, lr}
   d69b6:	4b05      	ldr	r3, [pc, #20]	; (d69cc <_ZN9IPAddressC1Ev+0x18>)
   d69b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d69ba:	2211      	movs	r2, #17
   d69bc:	f840 3b04 	str.w	r3, [r0], #4
   d69c0:	2100      	movs	r1, #0
   d69c2:	f000 ff67 	bl	d7894 <memset>
}
   d69c6:	4620      	mov	r0, r4
   d69c8:	bd10      	pop	{r4, pc}
   d69ca:	bf00      	nop
   d69cc:	000d84f8 	.word	0x000d84f8

000d69d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d69d0:	4603      	mov	r3, r0
   d69d2:	4a07      	ldr	r2, [pc, #28]	; (d69f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d69d4:	b510      	push	{r4, lr}
   d69d6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d69da:	f101 0210 	add.w	r2, r1, #16
   d69de:	f851 4b04 	ldr.w	r4, [r1], #4
   d69e2:	f843 4b04 	str.w	r4, [r3], #4
   d69e6:	4291      	cmp	r1, r2
   d69e8:	d1f9      	bne.n	d69de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d69ea:	780a      	ldrb	r2, [r1, #0]
   d69ec:	701a      	strb	r2, [r3, #0]
}
   d69ee:	bd10      	pop	{r4, pc}
   d69f0:	000d84f8 	.word	0x000d84f8

000d69f4 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d69f4:	7d03      	ldrb	r3, [r0, #20]
   d69f6:	2b04      	cmp	r3, #4
   d69f8:	d104      	bne.n	d6a04 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d69fa:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d69fc:	3800      	subs	r0, #0
   d69fe:	bf18      	it	ne
   d6a00:	2001      	movne	r0, #1
   d6a02:	4770      	bx	lr
    } else if (version() == 6) {
   d6a04:	2b06      	cmp	r3, #6
   d6a06:	d107      	bne.n	d6a18 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6a08:	6843      	ldr	r3, [r0, #4]
   d6a0a:	b93b      	cbnz	r3, d6a1c <_ZNK9IPAddresscvbEv+0x28>
   d6a0c:	6883      	ldr	r3, [r0, #8]
   d6a0e:	b92b      	cbnz	r3, d6a1c <_ZNK9IPAddresscvbEv+0x28>
   d6a10:	68c3      	ldr	r3, [r0, #12]
   d6a12:	b91b      	cbnz	r3, d6a1c <_ZNK9IPAddresscvbEv+0x28>
   d6a14:	6900      	ldr	r0, [r0, #16]
   d6a16:	e7f1      	b.n	d69fc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6a18:	2000      	movs	r0, #0
   d6a1a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6a1c:	2001      	movs	r0, #1
}
   d6a1e:	4770      	bx	lr

000d6a20 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6a20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6a22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6a26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6a2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6a2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6a32:	2304      	movs	r3, #4
   d6a34:	6041      	str	r1, [r0, #4]
   d6a36:	7503      	strb	r3, [r0, #20]
}
   d6a38:	bd10      	pop	{r4, pc}
	...

000d6a3c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6a3c:	b513      	push	{r0, r1, r4, lr}
   d6a3e:	4b05      	ldr	r3, [pc, #20]	; (d6a54 <_ZN9IPAddressC1EPKh+0x18>)
   d6a40:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6a42:	78cb      	ldrb	r3, [r1, #3]
   d6a44:	9300      	str	r3, [sp, #0]
   d6a46:	788b      	ldrb	r3, [r1, #2]
   d6a48:	784a      	ldrb	r2, [r1, #1]
   d6a4a:	7809      	ldrb	r1, [r1, #0]
   d6a4c:	f7ff ffe8 	bl	d6a20 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6a50:	b002      	add	sp, #8
   d6a52:	bd10      	pop	{r4, pc}
   d6a54:	000d84f8 	.word	0x000d84f8

000d6a58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a58:	7441      	strb	r1, [r0, #17]
}
   d6a5a:	4770      	bx	lr

000d6a5c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6a5c:	4770      	bx	lr

000d6a5e <_ZN9USBSerial4readEv>:
{
   d6a5e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6a60:	2100      	movs	r1, #0
   d6a62:	7c00      	ldrb	r0, [r0, #16]
   d6a64:	f7ff fb62 	bl	d612c <HAL_USB_USART_Receive_Data>
}
   d6a68:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6a6c:	bd08      	pop	{r3, pc}

000d6a6e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6a6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6a70:	2101      	movs	r1, #1
   d6a72:	7c00      	ldrb	r0, [r0, #16]
   d6a74:	f7ff fb5a 	bl	d612c <HAL_USB_USART_Receive_Data>
}
   d6a78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6a7c:	bd08      	pop	{r3, pc}

000d6a7e <_ZN9USBSerial17availableForWriteEv>:
{
   d6a7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6a80:	7c00      	ldrb	r0, [r0, #16]
   d6a82:	f7ff fb4b 	bl	d611c <HAL_USB_USART_Available_Data_For_Write>
}
   d6a86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a8a:	bd08      	pop	{r3, pc}

000d6a8c <_ZN9USBSerial9availableEv>:
{
   d6a8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6a8e:	7c00      	ldrb	r0, [r0, #16]
   d6a90:	f7ff fb3c 	bl	d610c <HAL_USB_USART_Available_Data>
}
   d6a94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a98:	bd08      	pop	{r3, pc}

000d6a9a <_ZN9USBSerial5writeEh>:
{
   d6a9a:	b513      	push	{r0, r1, r4, lr}
   d6a9c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6a9e:	7c00      	ldrb	r0, [r0, #16]
{
   d6aa0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6aa2:	f7ff fb3b 	bl	d611c <HAL_USB_USART_Available_Data_For_Write>
   d6aa6:	2800      	cmp	r0, #0
   d6aa8:	9901      	ldr	r1, [sp, #4]
   d6aaa:	dc01      	bgt.n	d6ab0 <_ZN9USBSerial5writeEh+0x16>
   d6aac:	7c60      	ldrb	r0, [r4, #17]
   d6aae:	b120      	cbz	r0, d6aba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6ab0:	7c20      	ldrb	r0, [r4, #16]
   d6ab2:	f7ff fb43 	bl	d613c <HAL_USB_USART_Send_Data>
   d6ab6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6aba:	b002      	add	sp, #8
   d6abc:	bd10      	pop	{r4, pc}

000d6abe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6abe:	7c00      	ldrb	r0, [r0, #16]
   d6ac0:	f7ff bb44 	b.w	d614c <HAL_USB_USART_Flush_Data>

000d6ac4 <_ZN9USBSerialD0Ev>:
   d6ac4:	b510      	push	{r4, lr}
   d6ac6:	2114      	movs	r1, #20
   d6ac8:	4604      	mov	r4, r0
   d6aca:	f000 fdb0 	bl	d762e <_ZdlPvj>
   d6ace:	4620      	mov	r0, r4
   d6ad0:	bd10      	pop	{r4, pc}
	...

000d6ad4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ad4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ada:	4604      	mov	r4, r0
   d6adc:	4608      	mov	r0, r1
   d6ade:	2100      	movs	r1, #0
   d6ae0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6ae4:	4b04      	ldr	r3, [pc, #16]	; (d6af8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6ae6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6ae8:	2301      	movs	r3, #1
  _serial = serial;
   d6aea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6aec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6aee:	4611      	mov	r1, r2
   d6af0:	f7ff fafc 	bl	d60ec <HAL_USB_USART_Init>
}
   d6af4:	4620      	mov	r0, r4
   d6af6:	bd10      	pop	{r4, pc}
   d6af8:	000d850c 	.word	0x000d850c

000d6afc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6afc:	7c00      	ldrb	r0, [r0, #16]
   d6afe:	2200      	movs	r2, #0
   d6b00:	f7ff bafc 	b.w	d60fc <HAL_USB_USART_Begin>

000d6b04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b06:	2214      	movs	r2, #20
{
   d6b08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b0a:	2100      	movs	r1, #0
   d6b0c:	f000 fec2 	bl	d7894 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b10:	4620      	mov	r0, r4
   d6b12:	bd10      	pop	{r4, pc}

000d6b14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b16:	4c10      	ldr	r4, [pc, #64]	; (d6b58 <_Z16_fetch_usbserialv+0x44>)
{
   d6b18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6b1a:	a803      	add	r0, sp, #12
   d6b1c:	f7ff fff2 	bl	d6b04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b20:	7821      	ldrb	r1, [r4, #0]
   d6b22:	f3bf 8f5b 	dmb	ish
   d6b26:	f011 0101 	ands.w	r1, r1, #1
   d6b2a:	d111      	bne.n	d6b50 <_Z16_fetch_usbserialv+0x3c>
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	9101      	str	r1, [sp, #4]
   d6b30:	f7fd fac2 	bl	d40b8 <__cxa_guard_acquire>
   d6b34:	9901      	ldr	r1, [sp, #4]
   d6b36:	b158      	cbz	r0, d6b50 <_Z16_fetch_usbserialv+0x3c>
   d6b38:	aa03      	add	r2, sp, #12
   d6b3a:	4808      	ldr	r0, [pc, #32]	; (d6b5c <_Z16_fetch_usbserialv+0x48>)
   d6b3c:	f7ff ffca 	bl	d6ad4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6b40:	4620      	mov	r0, r4
   d6b42:	f7fd fabe 	bl	d40c2 <__cxa_guard_release>
   d6b46:	4a06      	ldr	r2, [pc, #24]	; (d6b60 <_Z16_fetch_usbserialv+0x4c>)
   d6b48:	4906      	ldr	r1, [pc, #24]	; (d6b64 <_Z16_fetch_usbserialv+0x50>)
   d6b4a:	4804      	ldr	r0, [pc, #16]	; (d6b5c <_Z16_fetch_usbserialv+0x48>)
   d6b4c:	f000 fd6a 	bl	d7624 <__aeabi_atexit>
	return _usbserial;
}
   d6b50:	4802      	ldr	r0, [pc, #8]	; (d6b5c <_Z16_fetch_usbserialv+0x48>)
   d6b52:	b008      	add	sp, #32
   d6b54:	bd10      	pop	{r4, pc}
   d6b56:	bf00      	nop
   d6b58:	2003e68c 	.word	0x2003e68c
   d6b5c:	2003e690 	.word	0x2003e690
   d6b60:	2003e514 	.word	0x2003e514
   d6b64:	000d6a5d 	.word	0x000d6a5d

000d6b68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6b68:	4770      	bx	lr

000d6b6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b6a:	7441      	strb	r1, [r0, #17]
}
   d6b6c:	4770      	bx	lr

000d6b6e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6b6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6b70:	7c00      	ldrb	r0, [r0, #16]
   d6b72:	f7ff f9eb 	bl	d5f4c <hal_usart_available_data_for_write>
}
   d6b76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b7a:	bd08      	pop	{r3, pc}

000d6b7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6b7c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6b7e:	7c00      	ldrb	r0, [r0, #16]
   d6b80:	f7ff f9bc 	bl	d5efc <hal_usart_available>
}
   d6b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b88:	bd08      	pop	{r3, pc}

000d6b8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6b8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6b8c:	7c00      	ldrb	r0, [r0, #16]
   d6b8e:	f7ff f9c5 	bl	d5f1c <hal_usart_peek>
}
   d6b92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b96:	bd08      	pop	{r3, pc}

000d6b98 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b98:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6b9a:	7c00      	ldrb	r0, [r0, #16]
   d6b9c:	f7ff f9b6 	bl	d5f0c <hal_usart_read>
}
   d6ba0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ba4:	bd08      	pop	{r3, pc}

000d6ba6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6ba6:	7c00      	ldrb	r0, [r0, #16]
   d6ba8:	f7ff b9c0 	b.w	d5f2c <hal_usart_flush>

000d6bac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6bae:	7c45      	ldrb	r5, [r0, #17]
{
   d6bb0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6bb2:	b12d      	cbz	r5, d6bc0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6bb4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6bb6:	b003      	add	sp, #12
   d6bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6bbc:	f7ff b996 	b.w	d5eec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6bc0:	7c00      	ldrb	r0, [r0, #16]
   d6bc2:	9101      	str	r1, [sp, #4]
   d6bc4:	f7ff f9c2 	bl	d5f4c <hal_usart_available_data_for_write>
   d6bc8:	2800      	cmp	r0, #0
   d6bca:	9901      	ldr	r1, [sp, #4]
   d6bcc:	dcf2      	bgt.n	d6bb4 <_ZN11USARTSerial5writeEh+0x8>
}
   d6bce:	4628      	mov	r0, r5
   d6bd0:	b003      	add	sp, #12
   d6bd2:	bd30      	pop	{r4, r5, pc}

000d6bd4 <_ZN11USARTSerialD0Ev>:
   d6bd4:	b510      	push	{r4, lr}
   d6bd6:	2114      	movs	r1, #20
   d6bd8:	4604      	mov	r4, r0
   d6bda:	f000 fd28 	bl	d762e <_ZdlPvj>
   d6bde:	4620      	mov	r0, r4
   d6be0:	bd10      	pop	{r4, pc}
	...

000d6be4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6be4:	b510      	push	{r4, lr}
   d6be6:	f04f 0c00 	mov.w	ip, #0
   d6bea:	4604      	mov	r4, r0
   d6bec:	4608      	mov	r0, r1
   d6bee:	4611      	mov	r1, r2
   d6bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6bf4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6bf8:	4a04      	ldr	r2, [pc, #16]	; (d6c0c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6bfa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6bfc:	2201      	movs	r2, #1
  _serial = serial;
   d6bfe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6c00:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6c02:	461a      	mov	r2, r3
   d6c04:	f7ff f96a 	bl	d5edc <hal_usart_init>
}
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd10      	pop	{r4, pc}
   d6c0c:	000d853c 	.word	0x000d853c

000d6c10 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c10:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c12:	4c0e      	ldr	r4, [pc, #56]	; (d6c4c <_Z22__fetch_global_Serial1v+0x3c>)
   d6c14:	7821      	ldrb	r1, [r4, #0]
   d6c16:	f3bf 8f5b 	dmb	ish
   d6c1a:	f011 0101 	ands.w	r1, r1, #1
   d6c1e:	d112      	bne.n	d6c46 <_Z22__fetch_global_Serial1v+0x36>
   d6c20:	4620      	mov	r0, r4
   d6c22:	9101      	str	r1, [sp, #4]
   d6c24:	f7fd fa48 	bl	d40b8 <__cxa_guard_acquire>
   d6c28:	9901      	ldr	r1, [sp, #4]
   d6c2a:	b160      	cbz	r0, d6c46 <_Z22__fetch_global_Serial1v+0x36>
   d6c2c:	4a08      	ldr	r2, [pc, #32]	; (d6c50 <_Z22__fetch_global_Serial1v+0x40>)
   d6c2e:	4b09      	ldr	r3, [pc, #36]	; (d6c54 <_Z22__fetch_global_Serial1v+0x44>)
   d6c30:	4809      	ldr	r0, [pc, #36]	; (d6c58 <_Z22__fetch_global_Serial1v+0x48>)
   d6c32:	f7ff ffd7 	bl	d6be4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6c36:	4620      	mov	r0, r4
   d6c38:	f7fd fa43 	bl	d40c2 <__cxa_guard_release>
   d6c3c:	4a07      	ldr	r2, [pc, #28]	; (d6c5c <_Z22__fetch_global_Serial1v+0x4c>)
   d6c3e:	4908      	ldr	r1, [pc, #32]	; (d6c60 <_Z22__fetch_global_Serial1v+0x50>)
   d6c40:	4805      	ldr	r0, [pc, #20]	; (d6c58 <_Z22__fetch_global_Serial1v+0x48>)
   d6c42:	f000 fcef 	bl	d7624 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c46:	4804      	ldr	r0, [pc, #16]	; (d6c58 <_Z22__fetch_global_Serial1v+0x48>)
   d6c48:	b002      	add	sp, #8
   d6c4a:	bd10      	pop	{r4, pc}
   d6c4c:	2003e6a4 	.word	0x2003e6a4
   d6c50:	2003e6a8 	.word	0x2003e6a8
   d6c54:	2003e72c 	.word	0x2003e72c
   d6c58:	2003e7b0 	.word	0x2003e7b0
   d6c5c:	2003e514 	.word	0x2003e514
   d6c60:	000d6b69 	.word	0x000d6b69

000d6c64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6c64:	4770      	bx	lr

000d6c66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c68:	4606      	mov	r6, r0
   d6c6a:	4615      	mov	r5, r2
   d6c6c:	460c      	mov	r4, r1
   d6c6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c70:	42bc      	cmp	r4, r7
   d6c72:	d006      	beq.n	d6c82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6c74:	6833      	ldr	r3, [r6, #0]
   d6c76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6c7a:	689b      	ldr	r3, [r3, #8]
   d6c7c:	4630      	mov	r0, r6
   d6c7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6c80:	e7f6      	b.n	d6c70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6c82:	4628      	mov	r0, r5
   d6c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6c86:	7c00      	ldrb	r0, [r0, #16]
   d6c88:	2200      	movs	r2, #0
   d6c8a:	f7ff b987 	b.w	d5f9c <hal_i2c_write>

000d6c8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6c8e:	7c00      	ldrb	r0, [r0, #16]
   d6c90:	2100      	movs	r1, #0
   d6c92:	f7ff b98b 	b.w	d5fac <hal_i2c_available>

000d6c96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6c96:	7c00      	ldrb	r0, [r0, #16]
   d6c98:	2100      	movs	r1, #0
   d6c9a:	f7ff b98f 	b.w	d5fbc <hal_i2c_read>

000d6c9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6c9e:	7c00      	ldrb	r0, [r0, #16]
   d6ca0:	2100      	movs	r1, #0
   d6ca2:	f7ff b993 	b.w	d5fcc <hal_i2c_peek>

000d6ca6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6ca6:	7c00      	ldrb	r0, [r0, #16]
   d6ca8:	2100      	movs	r1, #0
   d6caa:	f7ff b997 	b.w	d5fdc <hal_i2c_flush>

000d6cae <_ZN7TwoWireD0Ev>:
   d6cae:	b510      	push	{r4, lr}
   d6cb0:	2114      	movs	r1, #20
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	f000 fcbb 	bl	d762e <_ZdlPvj>
   d6cb8:	4620      	mov	r0, r4
   d6cba:	bd10      	pop	{r4, pc}

000d6cbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6cbc:	b510      	push	{r4, lr}
   d6cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cc2:	4604      	mov	r4, r0
   d6cc4:	4608      	mov	r0, r1
   d6cc6:	2100      	movs	r1, #0
   d6cc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6ccc:	4b03      	ldr	r3, [pc, #12]	; (d6cdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6cce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6cd0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6cd2:	4611      	mov	r1, r2
   d6cd4:	f7ff f992 	bl	d5ffc <hal_i2c_init>
}
   d6cd8:	4620      	mov	r0, r4
   d6cda:	bd10      	pop	{r4, pc}
   d6cdc:	000d856c 	.word	0x000d856c

000d6ce0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6ce0:	7c00      	ldrb	r0, [r0, #16]
   d6ce2:	2200      	movs	r2, #0
   d6ce4:	f7ff b93a 	b.w	d5f5c <hal_i2c_set_speed>

000d6ce8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ce8:	2300      	movs	r3, #0
   d6cea:	7c00      	ldrb	r0, [r0, #16]
   d6cec:	461a      	mov	r2, r3
   d6cee:	4619      	mov	r1, r3
   d6cf0:	f7ff b93c 	b.w	d5f6c <hal_i2c_begin>

000d6cf4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6cf4:	7c00      	ldrb	r0, [r0, #16]
   d6cf6:	2200      	movs	r2, #0
   d6cf8:	f7ff b940 	b.w	d5f7c <hal_i2c_begin_transmission>

000d6cfc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6cfc:	b2c9      	uxtb	r1, r1
   d6cfe:	f7ff bff9 	b.w	d6cf4 <_ZN7TwoWire17beginTransmissionEh>

000d6d02 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6d02:	7c00      	ldrb	r0, [r0, #16]
   d6d04:	2200      	movs	r2, #0
   d6d06:	f7ff b941 	b.w	d5f8c <hal_i2c_end_transmission>

000d6d0a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6d0a:	2101      	movs	r1, #1
   d6d0c:	f7ff bff9 	b.w	d6d02 <_ZN7TwoWire15endTransmissionEh>

000d6d10 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6d10:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6d12:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6d14:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6d18:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6d1a:	2201      	movs	r2, #1
   d6d1c:	f04f 33ff 	mov.w	r3, #4294967295
   d6d20:	f10d 0107 	add.w	r1, sp, #7
   d6d24:	47a0      	blx	r4
}
   d6d26:	b002      	add	sp, #8
   d6d28:	bd10      	pop	{r4, pc}

000d6d2a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6d2a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6d2c:	6803      	ldr	r3, [r0, #0]
   d6d2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6d30:	f04f 33ff 	mov.w	r3, #4294967295
   d6d34:	46a4      	mov	ip, r4
}
   d6d36:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6d3a:	4760      	bx	ip

000d6d3c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6d3c:	b513      	push	{r0, r1, r4, lr}
   d6d3e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6d40:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6d42:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6d46:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6d48:	f10d 0107 	add.w	r1, sp, #7
   d6d4c:	2201      	movs	r2, #1
   d6d4e:	47a0      	blx	r4
}
   d6d50:	b002      	add	sp, #8
   d6d52:	bd10      	pop	{r4, pc}

000d6d54 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6d54:	4770      	bx	lr

000d6d56 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6d56:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d58:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6d5a:	681a      	ldr	r2, [r3, #0]
   d6d5c:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d6d5e:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6d60:	da10      	bge.n	d6d84 <_ZN9TCPClient9connectedEv+0x2e>
   d6d62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6d66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6d6a:	429a      	cmp	r2, r3
   d6d6c:	d10a      	bne.n	d6d84 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6d6e:	6803      	ldr	r3, [r0, #0]
   d6d70:	691b      	ldr	r3, [r3, #16]
   d6d72:	4798      	blx	r3
        if (!rv) {
   d6d74:	4604      	mov	r4, r0
   d6d76:	b928      	cbnz	r0, d6d84 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d6d78:	682b      	ldr	r3, [r5, #0]
   d6d7a:	4628      	mov	r0, r5
   d6d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d7e:	4798      	blx	r3
        rv = available();
   d6d80:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6d82:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6d84:	2001      	movs	r0, #1
   d6d86:	e7fc      	b.n	d6d82 <_ZN9TCPClient9connectedEv+0x2c>

000d6d88 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6d88:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d6d8a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d6d8c:	43c0      	mvns	r0, r0
   d6d8e:	0fc0      	lsrs	r0, r0, #31
   d6d90:	4770      	bx	lr

000d6d92 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6d92:	4770      	bx	lr

000d6d94 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6d94:	4b06      	ldr	r3, [pc, #24]	; (d6db0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6d96:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6d98:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6d9a:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6d9e:	d005      	beq.n	d6dac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6da0:	4608      	mov	r0, r1
   d6da2:	f000 fc49 	bl	d7638 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6da6:	2800      	cmp	r0, #0
	return nullptr;
   d6da8:	bf08      	it	eq
   d6daa:	2400      	moveq	r4, #0
      }
   d6dac:	4620      	mov	r0, r4
   d6dae:	bd10      	pop	{r4, pc}
   d6db0:	000d84c8 	.word	0x000d84c8

000d6db4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6db4:	b510      	push	{r4, lr}
   d6db6:	21ac      	movs	r1, #172	; 0xac
   d6db8:	4604      	mov	r4, r0
   d6dba:	f000 fc38 	bl	d762e <_ZdlPvj>
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	bd10      	pop	{r4, pc}

000d6dc2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6dc2:	f7fd b96a 	b.w	d409a <_ZdlPv>

000d6dc6 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d6dca:	f04f 0800 	mov.w	r8, #0
   d6dce:	b086      	sub	sp, #24
   d6dd0:	461d      	mov	r5, r3
   d6dd2:	f8c0 8004 	str.w	r8, [r0, #4]
   d6dd6:	4604      	mov	r4, r0
   d6dd8:	460e      	mov	r6, r1
   d6dda:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6ddc:	4641      	mov	r1, r8
   d6dde:	2210      	movs	r2, #16
   d6de0:	a802      	add	r0, sp, #8
   d6de2:	f000 fd57 	bl	d7894 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6de6:	1c6b      	adds	r3, r5, #1
   d6de8:	d009      	beq.n	d6dfe <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d6dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6dee:	fbb5 f3f0 	udiv	r3, r5, r0
   d6df2:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6df6:	fb00 5313 	mls	r3, r0, r3, r5
   d6dfa:	4358      	muls	r0, r3
   d6dfc:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6dfe:	6960      	ldr	r0, [r4, #20]
   d6e00:	2310      	movs	r3, #16
   d6e02:	9300      	str	r3, [sp, #0]
   d6e04:	6800      	ldr	r0, [r0, #0]
   d6e06:	ab02      	add	r3, sp, #8
   d6e08:	f241 0205 	movw	r2, #4101	; 0x1005
   d6e0c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6e10:	f7ff f8fc 	bl	d600c <sock_setsockopt>
    if (ret < 0) {
   d6e14:	2800      	cmp	r0, #0
   d6e16:	da07      	bge.n	d6e28 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6e18:	f7ff fa6c 	bl	d62f4 <__errno>
   d6e1c:	6803      	ldr	r3, [r0, #0]
   d6e1e:	6063      	str	r3, [r4, #4]
        return 0;
   d6e20:	2000      	movs	r0, #0
}
   d6e22:	b006      	add	sp, #24
   d6e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6e28:	6960      	ldr	r0, [r4, #20]
   d6e2a:	2300      	movs	r3, #0
   d6e2c:	6800      	ldr	r0, [r0, #0]
   d6e2e:	463a      	mov	r2, r7
   d6e30:	4631      	mov	r1, r6
   d6e32:	f7ff f90b 	bl	d604c <sock_send>
    if (ret < 0) {
   d6e36:	1e03      	subs	r3, r0, #0
   d6e38:	dbee      	blt.n	d6e18 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d6e3a:	4618      	mov	r0, r3
   d6e3c:	e7f1      	b.n	d6e22 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6e40 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6e40:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6e42:	6984      	ldr	r4, [r0, #24]
   d6e44:	4b0a      	ldr	r3, [pc, #40]	; (d6e70 <_ZN9TCPClientD1Ev+0x30>)
   d6e46:	6003      	str	r3, [r0, #0]
   d6e48:	4605      	mov	r5, r0
   d6e4a:	b17c      	cbz	r4, d6e6c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6e4c:	6863      	ldr	r3, [r4, #4]
   d6e4e:	3b01      	subs	r3, #1
   d6e50:	6063      	str	r3, [r4, #4]
   d6e52:	b95b      	cbnz	r3, d6e6c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6e54:	6823      	ldr	r3, [r4, #0]
   d6e56:	4620      	mov	r0, r4
   d6e58:	689b      	ldr	r3, [r3, #8]
   d6e5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6e5c:	68a3      	ldr	r3, [r4, #8]
   d6e5e:	3b01      	subs	r3, #1
   d6e60:	60a3      	str	r3, [r4, #8]
   d6e62:	b91b      	cbnz	r3, d6e6c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6e64:	6823      	ldr	r3, [r4, #0]
   d6e66:	4620      	mov	r0, r4
   d6e68:	68db      	ldr	r3, [r3, #12]
   d6e6a:	4798      	blx	r3
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	bd38      	pop	{r3, r4, r5, pc}
   d6e70:	000d85c8 	.word	0x000d85c8

000d6e74 <_ZN9TCPClientD0Ev>:
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
   d6e78:	f7ff ffe2 	bl	d6e40 <_ZN9TCPClientD1Ev>
   d6e7c:	4620      	mov	r0, r4
   d6e7e:	211c      	movs	r1, #28
   d6e80:	f000 fbd5 	bl	d762e <_ZdlPvj>
   d6e84:	4620      	mov	r0, r4
   d6e86:	bd10      	pop	{r4, pc}

000d6e88 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d6e88:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6e8a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6e8c:	4b05      	ldr	r3, [pc, #20]	; (d6ea4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6e8e:	4604      	mov	r4, r0
   d6e90:	358c      	adds	r5, #140	; 0x8c
   d6e92:	f844 3b04 	str.w	r3, [r4], #4
   d6e96:	4606      	mov	r6, r0
   d6e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e9c:	682b      	ldr	r3, [r5, #0]
   d6e9e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6ea0:	4630      	mov	r0, r6
   d6ea2:	bd70      	pop	{r4, r5, r6, pc}
   d6ea4:	000d84f8 	.word	0x000d84f8

000d6ea8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d6ea8:	b510      	push	{r4, lr}
   d6eaa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6eac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6eb0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6eb4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d6eb6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6eb8:	d005      	beq.n	d6ec6 <_ZN9TCPClient4peekEv+0x1e>
   d6eba:	6963      	ldr	r3, [r4, #20]
   d6ebc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6ec0:	4413      	add	r3, r2
   d6ec2:	7918      	ldrb	r0, [r3, #4]
}
   d6ec4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6ec6:	6803      	ldr	r3, [r0, #0]
   d6ec8:	691b      	ldr	r3, [r3, #16]
   d6eca:	4798      	blx	r3
   d6ecc:	2800      	cmp	r0, #0
   d6ece:	d1f4      	bne.n	d6eba <_ZN9TCPClient4peekEv+0x12>
   d6ed0:	f04f 30ff 	mov.w	r0, #4294967295
   d6ed4:	e7f6      	b.n	d6ec4 <_ZN9TCPClient4peekEv+0x1c>

000d6ed6 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d6ed6:	b510      	push	{r4, lr}
   d6ed8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6eda:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ede:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6ee2:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6ee4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6ee6:	d008      	beq.n	d6efa <_ZN9TCPClient4readEv+0x24>
   d6ee8:	6963      	ldr	r3, [r4, #20]
   d6eea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6eee:	1c51      	adds	r1, r2, #1
   d6ef0:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6ef4:	4413      	add	r3, r2
   d6ef6:	7918      	ldrb	r0, [r3, #4]
}
   d6ef8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6efa:	6803      	ldr	r3, [r0, #0]
   d6efc:	691b      	ldr	r3, [r3, #16]
   d6efe:	4798      	blx	r3
   d6f00:	2800      	cmp	r0, #0
   d6f02:	d1f1      	bne.n	d6ee8 <_ZN9TCPClient4readEv+0x12>
   d6f04:	f04f 30ff 	mov.w	r0, #4294967295
   d6f08:	e7f6      	b.n	d6ef8 <_ZN9TCPClient4readEv+0x22>

000d6f0a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f0c:	6943      	ldr	r3, [r0, #20]
   d6f0e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6f10:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6f14:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6f18:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6f1a:	4605      	mov	r5, r0
   d6f1c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6f1e:	d016      	beq.n	d6f4e <_ZN9TCPClient4readEPhj+0x44>
   d6f20:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6f22:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6f26:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6f2a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6f2c:	42bc      	cmp	r4, r7
   d6f2e:	bf28      	it	cs
   d6f30:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6f32:	3304      	adds	r3, #4
   d6f34:	4622      	mov	r2, r4
   d6f36:	4419      	add	r1, r3
   d6f38:	4630      	mov	r0, r6
   d6f3a:	f000 fc9d 	bl	d7878 <memcpy>
   d6f3e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6f40:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6f44:	4423      	add	r3, r4
   d6f46:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6f4e:	6803      	ldr	r3, [r0, #0]
   d6f50:	691b      	ldr	r3, [r3, #16]
   d6f52:	4798      	blx	r3
   d6f54:	2800      	cmp	r0, #0
   d6f56:	d1e3      	bne.n	d6f20 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6f58:	f04f 34ff 	mov.w	r4, #4294967295
   d6f5c:	e7f5      	b.n	d6f4a <_ZN9TCPClient4readEPhj+0x40>

000d6f5e <_ZN9TCPClient12flush_bufferEv>:
   d6f5e:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6f60:	2300      	movs	r3, #0
   d6f62:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6f66:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6f68:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6f6c:	4770      	bx	lr

000d6f6e <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f72:	461f      	mov	r7, r3
    stop();
   d6f74:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f76:	460c      	mov	r4, r1
    stop();
   d6f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6f7a:	b08a      	sub	sp, #40	; 0x28
   d6f7c:	4605      	mov	r5, r0
   d6f7e:	4616      	mov	r6, r2
    stop();
   d6f80:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6f82:	7d23      	ldrb	r3, [r4, #20]
   d6f84:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6f88:	2b04      	cmp	r3, #4
   d6f8a:	bf0c      	ite	eq
   d6f8c:	2002      	moveq	r0, #2
   d6f8e:	200a      	movne	r0, #10
   d6f90:	2206      	movs	r2, #6
   d6f92:	2101      	movs	r1, #1
   d6f94:	f7ff f862 	bl	d605c <sock_socket>
   d6f98:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6f9c:	696b      	ldr	r3, [r5, #20]
   d6f9e:	681b      	ldr	r3, [r3, #0]
   d6fa0:	2b00      	cmp	r3, #0
   d6fa2:	da08      	bge.n	d6fb6 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6fa4:	682b      	ldr	r3, [r5, #0]
   d6fa6:	4628      	mov	r0, r5
   d6fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6faa:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6fac:	4798      	blx	r3
}
   d6fae:	4620      	mov	r0, r4
   d6fb0:	b00a      	add	sp, #40	; 0x28
   d6fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d6fb6:	4628      	mov	r0, r5
   d6fb8:	f7ff ffd1 	bl	d6f5e <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6fbc:	b1b7      	cbz	r7, d6fec <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6fbe:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6fc0:	a903      	add	r1, sp, #12
   d6fc2:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6fc4:	9303      	str	r3, [sp, #12]
   d6fc6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6fca:	f7fe ff1f 	bl	d5e0c <if_index_to_name>
   d6fce:	2800      	cmp	r0, #0
   d6fd0:	d1e8      	bne.n	d6fa4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6fd2:	6968      	ldr	r0, [r5, #20]
   d6fd4:	2306      	movs	r3, #6
   d6fd6:	9300      	str	r3, [sp, #0]
   d6fd8:	6800      	ldr	r0, [r0, #0]
   d6fda:	ab03      	add	r3, sp, #12
   d6fdc:	f241 020b 	movw	r2, #4107	; 0x100b
   d6fe0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6fe4:	f7ff f812 	bl	d600c <sock_setsockopt>
   d6fe8:	2800      	cmp	r0, #0
   d6fea:	d1db      	bne.n	d6fa4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6fec:	221c      	movs	r2, #28
   d6fee:	2100      	movs	r1, #0
   d6ff0:	a803      	add	r0, sp, #12
   d6ff2:	f000 fc4f 	bl	d7894 <memset>
    if (ip.version() == 4) {
   d6ff6:	7d23      	ldrb	r3, [r4, #20]
   d6ff8:	2b04      	cmp	r3, #4
   d6ffa:	d11d      	bne.n	d7038 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6ffc:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7000:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7002:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7006:	f7fe ff61 	bl	d5ecc <inet_htons>
   d700a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d700e:	6860      	ldr	r0, [r4, #4]
   d7010:	f7fe ff54 	bl	d5ebc <inet_htonl>
   d7014:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7016:	696b      	ldr	r3, [r5, #20]
   d7018:	221c      	movs	r2, #28
   d701a:	6818      	ldr	r0, [r3, #0]
   d701c:	a903      	add	r1, sp, #12
   d701e:	f7ff f805 	bl	d602c <sock_connect>
   d7022:	2800      	cmp	r0, #0
   d7024:	d1be      	bne.n	d6fa4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7026:	3404      	adds	r4, #4
   d7028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d702a:	696d      	ldr	r5, [r5, #20]
   d702c:	358c      	adds	r5, #140	; 0x8c
   d702e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7030:	6823      	ldr	r3, [r4, #0]
   d7032:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7034:	2401      	movs	r4, #1
   d7036:	e7ba      	b.n	d6fae <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7038:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d703c:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d703e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7042:	f7fe ff43 	bl	d5ecc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7046:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7048:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d704c:	1d23      	adds	r3, r4, #4
   d704e:	f104 0714 	add.w	r7, r4, #20
   d7052:	6818      	ldr	r0, [r3, #0]
   d7054:	6859      	ldr	r1, [r3, #4]
   d7056:	4632      	mov	r2, r6
   d7058:	c203      	stmia	r2!, {r0, r1}
   d705a:	3308      	adds	r3, #8
   d705c:	42bb      	cmp	r3, r7
   d705e:	4616      	mov	r6, r2
   d7060:	d1f7      	bne.n	d7052 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7062:	e7d8      	b.n	d7016 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7064 <_ZN9TCPClient9availableEv>:
{
   d7064:	b530      	push	{r4, r5, lr}
   d7066:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7068:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d706c:	b08b      	sub	sp, #44	; 0x2c
   d706e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7070:	b12b      	cbz	r3, d707e <_ZN9TCPClient9availableEv+0x1a>
   d7072:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7076:	429a      	cmp	r2, r3
   d7078:	d101      	bne.n	d707e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d707a:	f7ff ff70 	bl	d6f5e <_ZN9TCPClient12flush_bufferEv>
   d707e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7080:	6808      	ldr	r0, [r1, #0]
   d7082:	2800      	cmp	r0, #0
   d7084:	db18      	blt.n	d70b8 <_ZN9TCPClient9availableEv+0x54>
   d7086:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d708a:	2d7f      	cmp	r5, #127	; 0x7f
   d708c:	d814      	bhi.n	d70b8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d708e:	3104      	adds	r1, #4
   d7090:	2308      	movs	r3, #8
   d7092:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7096:	4429      	add	r1, r5
   d7098:	f7fe ffd0 	bl	d603c <sock_recv>
            if (ret > 0) {
   d709c:	2800      	cmp	r0, #0
   d709e:	dd13      	ble.n	d70c8 <_ZN9TCPClient9availableEv+0x64>
   d70a0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d70a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70a6:	b90a      	cbnz	r2, d70ac <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d70a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d70ac:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d70ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70b2:	4410      	add	r0, r2
   d70b4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d70b8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d70ba:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d70be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d70c2:	1ac0      	subs	r0, r0, r3
   d70c4:	b00b      	add	sp, #44	; 0x2c
   d70c6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d70c8:	f7ff f914 	bl	d62f4 <__errno>
   d70cc:	6803      	ldr	r3, [r0, #0]
   d70ce:	2b0b      	cmp	r3, #11
   d70d0:	d0f2      	beq.n	d70b8 <_ZN9TCPClient9availableEv+0x54>
   d70d2:	f7ff f90f 	bl	d62f4 <__errno>
   d70d6:	6803      	ldr	r3, [r0, #0]
   d70d8:	2b0b      	cmp	r3, #11
   d70da:	d0ed      	beq.n	d70b8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d70dc:	2320      	movs	r3, #32
   d70de:	2500      	movs	r5, #0
   d70e0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d70e4:	f7ff f906 	bl	d62f4 <__errno>
   d70e8:	6803      	ldr	r3, [r0, #0]
   d70ea:	9301      	str	r3, [sp, #4]
   d70ec:	4b08      	ldr	r3, [pc, #32]	; (d7110 <_ZN9TCPClient9availableEv+0xac>)
   d70ee:	4909      	ldr	r1, [pc, #36]	; (d7114 <_ZN9TCPClient9availableEv+0xb0>)
   d70f0:	9300      	str	r3, [sp, #0]
   d70f2:	aa02      	add	r2, sp, #8
   d70f4:	462b      	mov	r3, r5
   d70f6:	2032      	movs	r0, #50	; 0x32
   d70f8:	f7ff f838 	bl	d616c <log_message>
                    sock_close(d_->sock);
   d70fc:	6963      	ldr	r3, [r4, #20]
   d70fe:	6818      	ldr	r0, [r3, #0]
   d7100:	f7fe ff8c 	bl	d601c <sock_close>
   d7104:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7106:	f04f 32ff 	mov.w	r2, #4294967295
   d710a:	601a      	str	r2, [r3, #0]
   d710c:	e7d4      	b.n	d70b8 <_ZN9TCPClient9availableEv+0x54>
   d710e:	bf00      	nop
   d7110:	000d8593 	.word	0x000d8593
   d7114:	000d858c 	.word	0x000d858c

000d7118 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7118:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d711a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d711c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d711e:	6818      	ldr	r0, [r3, #0]
   d7120:	2800      	cmp	r0, #0
   d7122:	db01      	blt.n	d7128 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7124:	f7fe ff7a 	bl	d601c <sock_close>
   d7128:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d712a:	f04f 32ff 	mov.w	r2, #4294967295
   d712e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7130:	6960      	ldr	r0, [r4, #20]
   d7132:	2211      	movs	r2, #17
   d7134:	2100      	movs	r1, #0
   d7136:	308c      	adds	r0, #140	; 0x8c
   d7138:	f000 fbac 	bl	d7894 <memset>
    flush_buffer();
   d713c:	4620      	mov	r0, r4
}
   d713e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7142:	f7ff bf0c 	b.w	d6f5e <_ZN9TCPClient12flush_bufferEv>

000d7146 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7146:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7148:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d714a:	4604      	mov	r4, r0
          total(0) {
   d714c:	6001      	str	r1, [r0, #0]
   d714e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7152:	3088      	adds	r0, #136	; 0x88
   d7154:	f7ff fc2e 	bl	d69b4 <_ZN9IPAddressC1Ev>
}
   d7158:	4620      	mov	r0, r4
   d715a:	bd10      	pop	{r4, pc}

000d715c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d715c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d715e:	2300      	movs	r3, #0
   d7160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7164:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7168:	4a0e      	ldr	r2, [pc, #56]	; (d71a4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d716a:	6103      	str	r3, [r0, #16]
   d716c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d716e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7170:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7172:	20ac      	movs	r0, #172	; 0xac
   d7174:	9101      	str	r1, [sp, #4]
   d7176:	f7fc ff8c 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d717a:	1e05      	subs	r5, r0, #0
   d717c:	f105 060c 	add.w	r6, r5, #12
   d7180:	d008      	beq.n	d7194 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7182:	2301      	movs	r3, #1
   d7184:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7188:	4b07      	ldr	r3, [pc, #28]	; (d71a8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d718a:	9901      	ldr	r1, [sp, #4]
   d718c:	602b      	str	r3, [r5, #0]
   d718e:	4630      	mov	r0, r6
   d7190:	f7ff ffd9 	bl	d7146 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7194:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7196:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d719a:	f7ff fee0 	bl	d6f5e <_ZN9TCPClient12flush_bufferEv>
}
   d719e:	b002      	add	sp, #8
   d71a0:	bd70      	pop	{r4, r5, r6, pc}
   d71a2:	bf00      	nop
   d71a4:	000d85c8 	.word	0x000d85c8
   d71a8:	000d85ac 	.word	0x000d85ac

000d71ac <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d71ac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d71ae:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d71b2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d71b4:	f7ff ffd2 	bl	d715c <_ZN9TCPClientC1Ei>
}
   d71b8:	4620      	mov	r0, r4
   d71ba:	bd10      	pop	{r4, pc}

000d71bc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d71bc:	b510      	push	{r4, lr}
   d71be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d71c0:	6800      	ldr	r0, [r0, #0]
   d71c2:	2800      	cmp	r0, #0
   d71c4:	db01      	blt.n	d71ca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d71c6:	f7fe ff29 	bl	d601c <sock_close>
    }
}
   d71ca:	4620      	mov	r0, r4
   d71cc:	bd10      	pop	{r4, pc}

000d71ce <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d71ce:	300c      	adds	r0, #12
   d71d0:	f7ff bff4 	b.w	d71bc <_ZN9TCPClient4DataD1Ev>

000d71d4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71d8:	4698      	mov	r8, r3
    stop();
   d71da:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71dc:	b093      	sub	sp, #76	; 0x4c
   d71de:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d71e0:	2400      	movs	r4, #0
    stop();
   d71e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d71e4:	4606      	mov	r6, r0
   d71e6:	4617      	mov	r7, r2
    stop();
   d71e8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d71ea:	4628      	mov	r0, r5
   d71ec:	466b      	mov	r3, sp
   d71ee:	4622      	mov	r2, r4
   d71f0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d71f2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d71f4:	f7fe fde2 	bl	d5dbc <netdb_getaddrinfo>
   d71f8:	4605      	mov	r5, r0
   d71fa:	2800      	cmp	r0, #0
   d71fc:	d163      	bne.n	d72c6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d71fe:	9b00      	ldr	r3, [sp, #0]
   d7200:	2b00      	cmp	r3, #0
   d7202:	d04b      	beq.n	d729c <_ZN9TCPClient7connectEPKctm+0xc8>
   d7204:	695b      	ldr	r3, [r3, #20]
   d7206:	2b00      	cmp	r3, #0
   d7208:	d048      	beq.n	d729c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d720a:	a806      	add	r0, sp, #24
   d720c:	f7ff fbd2 	bl	d69b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7210:	9b00      	ldr	r3, [sp, #0]
   d7212:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7214:	7863      	ldrb	r3, [r4, #1]
   d7216:	2b02      	cmp	r3, #2
   d7218:	d104      	bne.n	d7224 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d721a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d721c:	a806      	add	r0, sp, #24
   d721e:	f7ff f993 	bl	d6548 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7222:	e026      	b.n	d7272 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7224:	2b0a      	cmp	r3, #10
   d7226:	d124      	bne.n	d7272 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7228:	2211      	movs	r2, #17
   d722a:	4629      	mov	r1, r5
   d722c:	a801      	add	r0, sp, #4
   d722e:	f000 fb31 	bl	d7894 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7232:	68a3      	ldr	r3, [r4, #8]
   d7234:	2b00      	cmp	r3, #0
   d7236:	d038      	beq.n	d72aa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7238:	f104 0308 	add.w	r3, r4, #8
   d723c:	f10d 0c04 	add.w	ip, sp, #4
   d7240:	3418      	adds	r4, #24
   d7242:	6818      	ldr	r0, [r3, #0]
   d7244:	6859      	ldr	r1, [r3, #4]
   d7246:	4662      	mov	r2, ip
   d7248:	c203      	stmia	r2!, {r0, r1}
   d724a:	3308      	adds	r3, #8
   d724c:	42a3      	cmp	r3, r4
   d724e:	4694      	mov	ip, r2
   d7250:	d1f7      	bne.n	d7242 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7252:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7254:	a901      	add	r1, sp, #4
   d7256:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7258:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d725c:	f7ff fbb8 	bl	d69d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7260:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7264:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7268:	ac07      	add	r4, sp, #28
   d726a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d726c:	f8dc 3000 	ldr.w	r3, [ip]
   d7270:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7272:	a806      	add	r0, sp, #24
   d7274:	f7ff fbbe 	bl	d69f4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7278:	b180      	cbz	r0, d729c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d727a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d727c:	ad07      	add	r5, sp, #28
   d727e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7282:	4b12      	ldr	r3, [pc, #72]	; (d72cc <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7284:	930c      	str	r3, [sp, #48]	; 0x30
   d7286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7288:	ac0d      	add	r4, sp, #52	; 0x34
   d728a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d728c:	682b      	ldr	r3, [r5, #0]
   d728e:	7023      	strb	r3, [r4, #0]
   d7290:	463a      	mov	r2, r7
   d7292:	4643      	mov	r3, r8
   d7294:	a90c      	add	r1, sp, #48	; 0x30
   d7296:	4630      	mov	r0, r6
   d7298:	47c8      	blx	r9
   d729a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d729c:	9800      	ldr	r0, [sp, #0]
   d729e:	f7fe fd85 	bl	d5dac <netdb_freeaddrinfo>
}
   d72a2:	4628      	mov	r0, r5
   d72a4:	b013      	add	sp, #76	; 0x4c
   d72a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d72aa:	68e3      	ldr	r3, [r4, #12]
   d72ac:	2b00      	cmp	r3, #0
   d72ae:	d1c3      	bne.n	d7238 <_ZN9TCPClient7connectEPKctm+0x64>
   d72b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d72b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d72b8:	f7fe fe00 	bl	d5ebc <inet_htonl>
   d72bc:	4581      	cmp	r9, r0
   d72be:	d1bb      	bne.n	d7238 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d72c0:	f104 0114 	add.w	r1, r4, #20
   d72c4:	e7aa      	b.n	d721c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d72c6:	4625      	mov	r5, r4
   d72c8:	e7e8      	b.n	d729c <_ZN9TCPClient7connectEPKctm+0xc8>
   d72ca:	bf00      	nop
   d72cc:	000d84f8 	.word	0x000d84f8

000d72d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d72d0:	2200      	movs	r2, #0
   d72d2:	6840      	ldr	r0, [r0, #4]
   d72d4:	4611      	mov	r1, r2
   d72d6:	f7fe bf95 	b.w	d6204 <network_ready>

000d72da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72da:	2200      	movs	r2, #0
   d72dc:	6840      	ldr	r0, [r0, #4]
   d72de:	4611      	mov	r1, r2
   d72e0:	f7fe bfb0 	b.w	d6244 <network_listening>

000d72e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d72e4:	2200      	movs	r2, #0
   d72e6:	6840      	ldr	r0, [r0, #4]
   d72e8:	4611      	mov	r1, r2
   d72ea:	f7fe bfbb 	b.w	d6264 <network_get_listen_timeout>

000d72ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d72ee:	6840      	ldr	r0, [r0, #4]
   d72f0:	2200      	movs	r2, #0
   d72f2:	f7fe bfaf 	b.w	d6254 <network_set_listen_timeout>

000d72f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d72f6:	6840      	ldr	r0, [r0, #4]
   d72f8:	2200      	movs	r2, #0
   d72fa:	f081 0101 	eor.w	r1, r1, #1
   d72fe:	f7fe bf99 	b.w	d6234 <network_listen>

000d7302 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7302:	2300      	movs	r3, #0
   d7304:	6840      	ldr	r0, [r0, #4]
   d7306:	461a      	mov	r2, r3
   d7308:	4619      	mov	r1, r3
   d730a:	f7fe bf8b 	b.w	d6224 <network_off>

000d730e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d730e:	2200      	movs	r2, #0
   d7310:	6840      	ldr	r0, [r0, #4]
   d7312:	4611      	mov	r1, r2
   d7314:	f7fe bf66 	b.w	d61e4 <network_connecting>

000d7318 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7318:	6840      	ldr	r0, [r0, #4]
   d731a:	2200      	movs	r2, #0
   d731c:	2102      	movs	r1, #2
   d731e:	f7fe bf69 	b.w	d61f4 <network_disconnect>

000d7322 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7322:	2300      	movs	r3, #0
   d7324:	6840      	ldr	r0, [r0, #4]
   d7326:	461a      	mov	r2, r3
   d7328:	f7fe bf54 	b.w	d61d4 <network_connect>

000d732c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d732c:	4b02      	ldr	r3, [pc, #8]	; (d7338 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d732e:	2204      	movs	r2, #4
   d7330:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7332:	4a02      	ldr	r2, [pc, #8]	; (d733c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7334:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7336:	4770      	bx	lr
   d7338:	2003e7c4 	.word	0x2003e7c4
   d733c:	000d8614 	.word	0x000d8614

000d7340 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7340:	2300      	movs	r3, #0
   d7342:	6840      	ldr	r0, [r0, #4]
   d7344:	461a      	mov	r2, r3
   d7346:	f7fe bf45 	b.w	d61d4 <network_connect>

000d734a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d734a:	6840      	ldr	r0, [r0, #4]
   d734c:	2200      	movs	r2, #0
   d734e:	2102      	movs	r1, #2
   d7350:	f7fe bf50 	b.w	d61f4 <network_disconnect>

000d7354 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7354:	2200      	movs	r2, #0
   d7356:	6840      	ldr	r0, [r0, #4]
   d7358:	4611      	mov	r1, r2
   d735a:	f7fe bf43 	b.w	d61e4 <network_connecting>

000d735e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d735e:	2200      	movs	r2, #0
   d7360:	6840      	ldr	r0, [r0, #4]
   d7362:	4611      	mov	r1, r2
   d7364:	f7fe bf4e 	b.w	d6204 <network_ready>

000d7368 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7368:	2300      	movs	r3, #0
   d736a:	6840      	ldr	r0, [r0, #4]
   d736c:	461a      	mov	r2, r3
   d736e:	4619      	mov	r1, r3
   d7370:	f7fe bf50 	b.w	d6214 <network_on>

000d7374 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7374:	2300      	movs	r3, #0
   d7376:	6840      	ldr	r0, [r0, #4]
   d7378:	461a      	mov	r2, r3
   d737a:	4619      	mov	r1, r3
   d737c:	f7fe bf52 	b.w	d6224 <network_off>

000d7380 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7380:	6840      	ldr	r0, [r0, #4]
   d7382:	2100      	movs	r1, #0
   d7384:	f7fe bf76 	b.w	d6274 <network_is_on>

000d7388 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7388:	6840      	ldr	r0, [r0, #4]
   d738a:	2100      	movs	r1, #0
   d738c:	f7fe bf7a 	b.w	d6284 <network_is_off>

000d7390 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7390:	6840      	ldr	r0, [r0, #4]
   d7392:	2200      	movs	r2, #0
   d7394:	f081 0101 	eor.w	r1, r1, #1
   d7398:	f7fe bf4c 	b.w	d6234 <network_listen>

000d739c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d739c:	6840      	ldr	r0, [r0, #4]
   d739e:	2200      	movs	r2, #0
   d73a0:	f7fe bf58 	b.w	d6254 <network_set_listen_timeout>

000d73a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d73a4:	2200      	movs	r2, #0
   d73a6:	6840      	ldr	r0, [r0, #4]
   d73a8:	4611      	mov	r1, r2
   d73aa:	f7fe bf5b 	b.w	d6264 <network_get_listen_timeout>

000d73ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d73ae:	2200      	movs	r2, #0
   d73b0:	6840      	ldr	r0, [r0, #4]
   d73b2:	4611      	mov	r1, r2
   d73b4:	f7fe bf46 	b.w	d6244 <network_listening>

000d73b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d73b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d73bc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d73be:	b095      	sub	sp, #84	; 0x54
   d73c0:	4616      	mov	r6, r2
   d73c2:	460d      	mov	r5, r1
   d73c4:	4607      	mov	r7, r0
    IPAddress addr;
   d73c6:	f7ff faf5 	bl	d69b4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d73ca:	4621      	mov	r1, r4
   d73cc:	2218      	movs	r2, #24
   d73ce:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d73d0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d73d2:	f000 fa5f 	bl	d7894 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d73d6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d73d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d73dc:	4621      	mov	r1, r4
   d73de:	466b      	mov	r3, sp
   d73e0:	aa0c      	add	r2, sp, #48	; 0x30
   d73e2:	4630      	mov	r0, r6
   d73e4:	f7fe fcea 	bl	d5dbc <netdb_getaddrinfo>
    if (!r) {
   d73e8:	4604      	mov	r4, r0
   d73ea:	2800      	cmp	r0, #0
   d73ec:	d14c      	bne.n	d7488 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d73ee:	4602      	mov	r2, r0
   d73f0:	2101      	movs	r1, #1
   d73f2:	6868      	ldr	r0, [r5, #4]
   d73f4:	f7fe ff06 	bl	d6204 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d73fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73fc:	4622      	mov	r2, r4
   d73fe:	6868      	ldr	r0, [r5, #4]
   d7400:	f7fe ff00 	bl	d6204 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7404:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7406:	4681      	mov	r9, r0
        bool ok = false;
   d7408:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d740a:	2e00      	cmp	r6, #0
   d740c:	d03c      	beq.n	d7488 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d740e:	2900      	cmp	r1, #0
   d7410:	d13a      	bne.n	d7488 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7412:	6873      	ldr	r3, [r6, #4]
   d7414:	2b02      	cmp	r3, #2
   d7416:	d003      	beq.n	d7420 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7418:	2b0a      	cmp	r3, #10
   d741a:	d011      	beq.n	d7440 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d741c:	69f6      	ldr	r6, [r6, #28]
   d741e:	e7f4      	b.n	d740a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7420:	f1b8 0f00 	cmp.w	r8, #0
   d7424:	d00a      	beq.n	d743c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7426:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7428:	a806      	add	r0, sp, #24
   d742a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d742c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d742e:	f7ff fb05 	bl	d6a3c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7434:	1d3c      	adds	r4, r7, #4
   d7436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7438:	682b      	ldr	r3, [r5, #0]
   d743a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d743c:	4641      	mov	r1, r8
   d743e:	e7ed      	b.n	d741c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7440:	f1b9 0f00 	cmp.w	r9, #0
   d7444:	d101      	bne.n	d744a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7446:	4649      	mov	r1, r9
   d7448:	e7e8      	b.n	d741c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d744a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d744c:	2210      	movs	r2, #16
   d744e:	a801      	add	r0, sp, #4
   d7450:	f000 fa20 	bl	d7894 <memset>
                    a.v = 6;
   d7454:	2306      	movs	r3, #6
   d7456:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d745a:	ad01      	add	r5, sp, #4
   d745c:	f104 0308 	add.w	r3, r4, #8
   d7460:	3418      	adds	r4, #24
   d7462:	6818      	ldr	r0, [r3, #0]
   d7464:	6859      	ldr	r1, [r3, #4]
   d7466:	462a      	mov	r2, r5
   d7468:	c203      	stmia	r2!, {r0, r1}
   d746a:	3308      	adds	r3, #8
   d746c:	42a3      	cmp	r3, r4
   d746e:	4615      	mov	r5, r2
   d7470:	d1f7      	bne.n	d7462 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7472:	a901      	add	r1, sp, #4
   d7474:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7476:	ad07      	add	r5, sp, #28
   d7478:	f7ff faaa 	bl	d69d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d747c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d747e:	1d3c      	adds	r4, r7, #4
   d7480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7482:	682b      	ldr	r3, [r5, #0]
   d7484:	7023      	strb	r3, [r4, #0]
   d7486:	e7de      	b.n	d7446 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7488:	9800      	ldr	r0, [sp, #0]
   d748a:	f7fe fc8f 	bl	d5dac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d748e:	4638      	mov	r0, r7
   d7490:	b015      	add	sp, #84	; 0x54
   d7492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7498 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7498:	4b02      	ldr	r3, [pc, #8]	; (d74a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d749a:	4a03      	ldr	r2, [pc, #12]	; (d74a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d749c:	601a      	str	r2, [r3, #0]
   d749e:	2200      	movs	r2, #0
   d74a0:	605a      	str	r2, [r3, #4]

} // spark
   d74a2:	4770      	bx	lr
   d74a4:	2003e7cc 	.word	0x2003e7cc
   d74a8:	000d8650 	.word	0x000d8650

000d74ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d74ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d74ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d74b0:	d902      	bls.n	d74b8 <pinAvailable+0xc>
    return false;
   d74b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d74b4:	b002      	add	sp, #8
   d74b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d74b8:	f1a0 030b 	sub.w	r3, r0, #11
   d74bc:	2b02      	cmp	r3, #2
   d74be:	d81a      	bhi.n	d74f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d74c0:	4c17      	ldr	r4, [pc, #92]	; (d7520 <pinAvailable+0x74>)
   d74c2:	7821      	ldrb	r1, [r4, #0]
   d74c4:	f3bf 8f5b 	dmb	ish
   d74c8:	f011 0101 	ands.w	r1, r1, #1
   d74cc:	d10b      	bne.n	d74e6 <pinAvailable+0x3a>
   d74ce:	4620      	mov	r0, r4
   d74d0:	9101      	str	r1, [sp, #4]
   d74d2:	f7fc fdf1 	bl	d40b8 <__cxa_guard_acquire>
   d74d6:	9901      	ldr	r1, [sp, #4]
   d74d8:	b128      	cbz	r0, d74e6 <pinAvailable+0x3a>
   d74da:	4812      	ldr	r0, [pc, #72]	; (d7524 <pinAvailable+0x78>)
   d74dc:	f7fe ff5e 	bl	d639c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d74e0:	4620      	mov	r0, r4
   d74e2:	f7fc fdee 	bl	d40c2 <__cxa_guard_release>
   d74e6:	4b0f      	ldr	r3, [pc, #60]	; (d7524 <pinAvailable+0x78>)
   d74e8:	7818      	ldrb	r0, [r3, #0]
   d74ea:	f7fe fdd7 	bl	d609c <hal_spi_is_enabled>
   d74ee:	2800      	cmp	r0, #0
   d74f0:	d1df      	bne.n	d74b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d74f2:	2001      	movs	r0, #1
   d74f4:	e7de      	b.n	d74b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d74f6:	2801      	cmp	r0, #1
   d74f8:	d809      	bhi.n	d750e <pinAvailable+0x62>
   d74fa:	f000 f86b 	bl	d75d4 <_Z19__fetch_global_Wirev>
   d74fe:	2100      	movs	r1, #0
   d7500:	7c00      	ldrb	r0, [r0, #16]
   d7502:	f7fe fd73 	bl	d5fec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7506:	f080 0001 	eor.w	r0, r0, #1
   d750a:	b2c0      	uxtb	r0, r0
   d750c:	e7d2      	b.n	d74b4 <pinAvailable+0x8>
   d750e:	3809      	subs	r0, #9
   d7510:	2801      	cmp	r0, #1
   d7512:	d8ee      	bhi.n	d74f2 <pinAvailable+0x46>
   d7514:	f7ff fb7c 	bl	d6c10 <_Z22__fetch_global_Serial1v>
   d7518:	7c00      	ldrb	r0, [r0, #16]
   d751a:	f7fe fd0f 	bl	d5f3c <hal_usart_is_enabled>
   d751e:	e7f2      	b.n	d7506 <pinAvailable+0x5a>
   d7520:	2003e644 	.word	0x2003e644
   d7524:	2003e648 	.word	0x2003e648

000d7528 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7528:	2823      	cmp	r0, #35	; 0x23
{
   d752a:	b538      	push	{r3, r4, r5, lr}
   d752c:	4604      	mov	r4, r0
   d752e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7530:	d80a      	bhi.n	d7548 <pinMode+0x20>
   d7532:	29ff      	cmp	r1, #255	; 0xff
   d7534:	d008      	beq.n	d7548 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7536:	f7ff ffb9 	bl	d74ac <pinAvailable>
   d753a:	b128      	cbz	r0, d7548 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d753c:	4629      	mov	r1, r5
   d753e:	4620      	mov	r0, r4
}
   d7540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7544:	f7fe bc42 	b.w	d5dcc <HAL_Pin_Mode>
}
   d7548:	bd38      	pop	{r3, r4, r5, pc}

000d754a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d754a:	b538      	push	{r3, r4, r5, lr}
   d754c:	4604      	mov	r4, r0
   d754e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7550:	f7fe fc44 	bl	d5ddc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7554:	28ff      	cmp	r0, #255	; 0xff
   d7556:	d010      	beq.n	d757a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7558:	2806      	cmp	r0, #6
   d755a:	d804      	bhi.n	d7566 <digitalWrite+0x1c>
   d755c:	234d      	movs	r3, #77	; 0x4d
   d755e:	fa23 f000 	lsr.w	r0, r3, r0
   d7562:	07c3      	lsls	r3, r0, #31
   d7564:	d409      	bmi.n	d757a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7566:	4620      	mov	r0, r4
   d7568:	f7ff ffa0 	bl	d74ac <pinAvailable>
   d756c:	b128      	cbz	r0, d757a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d756e:	4629      	mov	r1, r5
   d7570:	4620      	mov	r0, r4
}
   d7572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7576:	f7fe bc39 	b.w	d5dec <HAL_GPIO_Write>
}
   d757a:	bd38      	pop	{r3, r4, r5, pc}

000d757c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d757c:	b510      	push	{r4, lr}
   d757e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7580:	f7fe fc2c 	bl	d5ddc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7584:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7586:	b2db      	uxtb	r3, r3
   d7588:	2b01      	cmp	r3, #1
   d758a:	d908      	bls.n	d759e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d758c:	4620      	mov	r0, r4
   d758e:	f7ff ff8d 	bl	d74ac <pinAvailable>
   d7592:	b120      	cbz	r0, d759e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7594:	4620      	mov	r0, r4
}
   d7596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d759a:	f7fe bc2f 	b.w	d5dfc <HAL_GPIO_Read>
}
   d759e:	2000      	movs	r0, #0
   d75a0:	bd10      	pop	{r4, pc}
	...

000d75a4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d75a4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d75a6:	2300      	movs	r3, #0
   d75a8:	2520      	movs	r5, #32
   d75aa:	8043      	strh	r3, [r0, #2]
   d75ac:	2314      	movs	r3, #20
{
   d75ae:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d75b0:	8003      	strh	r3, [r0, #0]
   d75b2:	6085      	str	r5, [r0, #8]
   d75b4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d75b6:	4906      	ldr	r1, [pc, #24]	; (d75d0 <_Z17acquireWireBufferv+0x2c>)
   d75b8:	4628      	mov	r0, r5
   d75ba:	f000 f83a 	bl	d7632 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d75be:	4904      	ldr	r1, [pc, #16]	; (d75d0 <_Z17acquireWireBufferv+0x2c>)
	};
   d75c0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d75c2:	4628      	mov	r0, r5
   d75c4:	f000 f835 	bl	d7632 <_ZnajRKSt9nothrow_t>
	};
   d75c8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d75ca:	4620      	mov	r0, r4
   d75cc:	bd38      	pop	{r3, r4, r5, pc}
   d75ce:	bf00      	nop
   d75d0:	000d8684 	.word	0x000d8684

000d75d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d75d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d75d6:	4d0f      	ldr	r5, [pc, #60]	; (d7614 <_Z19__fetch_global_Wirev+0x40>)
   d75d8:	7829      	ldrb	r1, [r5, #0]
   d75da:	f3bf 8f5b 	dmb	ish
   d75de:	f011 0401 	ands.w	r4, r1, #1
{
   d75e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d75e4:	d113      	bne.n	d760e <_Z19__fetch_global_Wirev+0x3a>
   d75e6:	4628      	mov	r0, r5
   d75e8:	f7fc fd66 	bl	d40b8 <__cxa_guard_acquire>
   d75ec:	b178      	cbz	r0, d760e <_Z19__fetch_global_Wirev+0x3a>
   d75ee:	a801      	add	r0, sp, #4
   d75f0:	f7ff ffd8 	bl	d75a4 <_Z17acquireWireBufferv>
   d75f4:	aa01      	add	r2, sp, #4
   d75f6:	4621      	mov	r1, r4
   d75f8:	4807      	ldr	r0, [pc, #28]	; (d7618 <_Z19__fetch_global_Wirev+0x44>)
   d75fa:	f7ff fb5f 	bl	d6cbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d75fe:	4628      	mov	r0, r5
   d7600:	f7fc fd5f 	bl	d40c2 <__cxa_guard_release>
   d7604:	4a05      	ldr	r2, [pc, #20]	; (d761c <_Z19__fetch_global_Wirev+0x48>)
   d7606:	4906      	ldr	r1, [pc, #24]	; (d7620 <_Z19__fetch_global_Wirev+0x4c>)
   d7608:	4803      	ldr	r0, [pc, #12]	; (d7618 <_Z19__fetch_global_Wirev+0x44>)
   d760a:	f000 f80b 	bl	d7624 <__aeabi_atexit>
	return wire;
}
   d760e:	4802      	ldr	r0, [pc, #8]	; (d7618 <_Z19__fetch_global_Wirev+0x44>)
   d7610:	b007      	add	sp, #28
   d7612:	bd30      	pop	{r4, r5, pc}
   d7614:	2003e7d8 	.word	0x2003e7d8
   d7618:	2003e7dc 	.word	0x2003e7dc
   d761c:	2003e514 	.word	0x2003e514
   d7620:	000d6c65 	.word	0x000d6c65

000d7624 <__aeabi_atexit>:
   d7624:	460b      	mov	r3, r1
   d7626:	4601      	mov	r1, r0
   d7628:	4618      	mov	r0, r3
   d762a:	f000 b917 	b.w	d785c <__cxa_atexit>

000d762e <_ZdlPvj>:
   d762e:	f7fc bd34 	b.w	d409a <_ZdlPv>

000d7632 <_ZnajRKSt9nothrow_t>:
   d7632:	f7fc bd30 	b.w	d4096 <_Znaj>
	...

000d7638 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7638:	4901      	ldr	r1, [pc, #4]	; (d7640 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d763a:	f000 b8f9 	b.w	d7830 <_ZNKSt9type_infoeqERKS_>
   d763e:	bf00      	nop
   d7640:	000d86a0 	.word	0x000d86a0

000d7644 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7646:	2400      	movs	r4, #0
   d7648:	2310      	movs	r3, #16
   d764a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d764e:	6803      	ldr	r3, [r0, #0]
   d7650:	9400      	str	r4, [sp, #0]
   d7652:	699e      	ldr	r6, [r3, #24]
   d7654:	f88d 4004 	strb.w	r4, [sp, #4]
   d7658:	4615      	mov	r5, r2
   d765a:	466b      	mov	r3, sp
   d765c:	6812      	ldr	r2, [r2, #0]
   d765e:	47b0      	blx	r6
   d7660:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7664:	f003 0306 	and.w	r3, r3, #6
   d7668:	2b06      	cmp	r3, #6
   d766a:	bf03      	ittte	eq
   d766c:	9b00      	ldreq	r3, [sp, #0]
   d766e:	602b      	streq	r3, [r5, #0]
   d7670:	2001      	moveq	r0, #1
   d7672:	4620      	movne	r0, r4
   d7674:	b004      	add	sp, #16
   d7676:	bd70      	pop	{r4, r5, r6, pc}

000d7678 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7678:	9800      	ldr	r0, [sp, #0]
   d767a:	4290      	cmp	r0, r2
   d767c:	bf14      	ite	ne
   d767e:	2001      	movne	r0, #1
   d7680:	2006      	moveq	r0, #6
   d7682:	4770      	bx	lr

000d7684 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7684:	b510      	push	{r4, lr}
   d7686:	4b03      	ldr	r3, [pc, #12]	; (d7694 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7688:	6003      	str	r3, [r0, #0]
   d768a:	4604      	mov	r4, r0
   d768c:	f000 f8cd 	bl	d782a <_ZNSt9type_infoD1Ev>
   d7690:	4620      	mov	r0, r4
   d7692:	bd10      	pop	{r4, pc}
   d7694:	000d86e0 	.word	0x000d86e0

000d7698 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7698:	b510      	push	{r4, lr}
   d769a:	4604      	mov	r4, r0
   d769c:	f7ff fff2 	bl	d7684 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d76a0:	4620      	mov	r0, r4
   d76a2:	2108      	movs	r1, #8
   d76a4:	f7ff ffc3 	bl	d762e <_ZdlPvj>
   d76a8:	4620      	mov	r0, r4
   d76aa:	bd10      	pop	{r4, pc}

000d76ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d76ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76b0:	461f      	mov	r7, r3
   d76b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d76b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d76ba:	4598      	cmp	r8, r3
   d76bc:	4606      	mov	r6, r0
   d76be:	4615      	mov	r5, r2
   d76c0:	d107      	bne.n	d76d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d76c2:	9907      	ldr	r1, [sp, #28]
   d76c4:	f000 f8b4 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d76c8:	b118      	cbz	r0, d76d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d76ca:	7165      	strb	r5, [r4, #5]
   d76cc:	2000      	movs	r0, #0
   d76ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d76d2:	4639      	mov	r1, r7
   d76d4:	4630      	mov	r0, r6
   d76d6:	f000 f8ab 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d76da:	2800      	cmp	r0, #0
   d76dc:	d0f6      	beq.n	d76cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d76de:	2301      	movs	r3, #1
   d76e0:	f8c4 8000 	str.w	r8, [r4]
   d76e4:	7125      	strb	r5, [r4, #4]
   d76e6:	71a3      	strb	r3, [r4, #6]
   d76e8:	e7f0      	b.n	d76cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d76ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d76ea:	b538      	push	{r3, r4, r5, lr}
   d76ec:	4615      	mov	r5, r2
   d76ee:	461c      	mov	r4, r3
   d76f0:	f000 f89e 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d76f4:	b120      	cbz	r0, d7700 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d76f6:	2308      	movs	r3, #8
   d76f8:	60e3      	str	r3, [r4, #12]
   d76fa:	2306      	movs	r3, #6
   d76fc:	6025      	str	r5, [r4, #0]
   d76fe:	7123      	strb	r3, [r4, #4]
   d7700:	bd38      	pop	{r3, r4, r5, pc}

000d7702 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7702:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7704:	4605      	mov	r5, r0
   d7706:	460c      	mov	r4, r1
   d7708:	9201      	str	r2, [sp, #4]
   d770a:	461e      	mov	r6, r3
   d770c:	f000 f890 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d7710:	b950      	cbnz	r0, d7728 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7712:	2e03      	cmp	r6, #3
   d7714:	d808      	bhi.n	d7728 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7716:	6823      	ldr	r3, [r4, #0]
   d7718:	9a01      	ldr	r2, [sp, #4]
   d771a:	695b      	ldr	r3, [r3, #20]
   d771c:	4629      	mov	r1, r5
   d771e:	4620      	mov	r0, r4
   d7720:	b002      	add	sp, #8
   d7722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7726:	4718      	bx	r3
   d7728:	b002      	add	sp, #8
   d772a:	bd70      	pop	{r4, r5, r6, pc}

000d772c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d772c:	b510      	push	{r4, lr}
   d772e:	4b03      	ldr	r3, [pc, #12]	; (d773c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7730:	6003      	str	r3, [r0, #0]
   d7732:	4604      	mov	r4, r0
   d7734:	f7ff ffa6 	bl	d7684 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7738:	4620      	mov	r0, r4
   d773a:	bd10      	pop	{r4, pc}
   d773c:	000d8740 	.word	0x000d8740

000d7740 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7740:	b510      	push	{r4, lr}
   d7742:	4604      	mov	r4, r0
   d7744:	f7ff fff2 	bl	d772c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7748:	4620      	mov	r0, r4
   d774a:	210c      	movs	r1, #12
   d774c:	f7ff ff6f 	bl	d762e <_ZdlPvj>
   d7750:	4620      	mov	r0, r4
   d7752:	bd10      	pop	{r4, pc}

000d7754 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7756:	9f08      	ldr	r7, [sp, #32]
   d7758:	4297      	cmp	r7, r2
   d775a:	4605      	mov	r5, r0
   d775c:	460e      	mov	r6, r1
   d775e:	4614      	mov	r4, r2
   d7760:	d00a      	beq.n	d7778 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7762:	68a8      	ldr	r0, [r5, #8]
   d7764:	6802      	ldr	r2, [r0, #0]
   d7766:	9708      	str	r7, [sp, #32]
   d7768:	6a15      	ldr	r5, [r2, #32]
   d776a:	4631      	mov	r1, r6
   d776c:	4622      	mov	r2, r4
   d776e:	46ac      	mov	ip, r5
   d7770:	b003      	add	sp, #12
   d7772:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7776:	4760      	bx	ip
   d7778:	4619      	mov	r1, r3
   d777a:	9301      	str	r3, [sp, #4]
   d777c:	f000 f858 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d7780:	9b01      	ldr	r3, [sp, #4]
   d7782:	2800      	cmp	r0, #0
   d7784:	d0ed      	beq.n	d7762 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7786:	2006      	movs	r0, #6
   d7788:	b003      	add	sp, #12
   d778a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d778c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d778c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7790:	460d      	mov	r5, r1
   d7792:	4619      	mov	r1, r3
   d7794:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7798:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d779c:	4681      	mov	r9, r0
   d779e:	4617      	mov	r7, r2
   d77a0:	4698      	mov	r8, r3
   d77a2:	f000 f845 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d77a6:	b190      	cbz	r0, d77ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d77a8:	2d00      	cmp	r5, #0
   d77aa:	6034      	str	r4, [r6, #0]
   d77ac:	7137      	strb	r7, [r6, #4]
   d77ae:	db09      	blt.n	d77c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d77b0:	1961      	adds	r1, r4, r5
   d77b2:	458a      	cmp	sl, r1
   d77b4:	bf0c      	ite	eq
   d77b6:	2106      	moveq	r1, #6
   d77b8:	2101      	movne	r1, #1
   d77ba:	71b1      	strb	r1, [r6, #6]
   d77bc:	2000      	movs	r0, #0
   d77be:	b001      	add	sp, #4
   d77c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77c4:	3502      	adds	r5, #2
   d77c6:	d1f9      	bne.n	d77bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d77c8:	2301      	movs	r3, #1
   d77ca:	71b3      	strb	r3, [r6, #6]
   d77cc:	e7f6      	b.n	d77bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d77ce:	4554      	cmp	r4, sl
   d77d0:	d106      	bne.n	d77e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d77d2:	4659      	mov	r1, fp
   d77d4:	4648      	mov	r0, r9
   d77d6:	f000 f82b 	bl	d7830 <_ZNKSt9type_infoeqERKS_>
   d77da:	b108      	cbz	r0, d77e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d77dc:	7177      	strb	r7, [r6, #5]
   d77de:	e7ed      	b.n	d77bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d77e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d77e4:	6803      	ldr	r3, [r0, #0]
   d77e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d77ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d77ee:	69dc      	ldr	r4, [r3, #28]
   d77f0:	463a      	mov	r2, r7
   d77f2:	4643      	mov	r3, r8
   d77f4:	4629      	mov	r1, r5
   d77f6:	46a4      	mov	ip, r4
   d77f8:	b001      	add	sp, #4
   d77fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77fe:	4760      	bx	ip

000d7800 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7804:	4607      	mov	r7, r0
   d7806:	460c      	mov	r4, r1
   d7808:	4615      	mov	r5, r2
   d780a:	461e      	mov	r6, r3
   d780c:	f7ff ff6d 	bl	d76ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7810:	b948      	cbnz	r0, d7826 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7812:	68b8      	ldr	r0, [r7, #8]
   d7814:	6803      	ldr	r3, [r0, #0]
   d7816:	699f      	ldr	r7, [r3, #24]
   d7818:	462a      	mov	r2, r5
   d781a:	4633      	mov	r3, r6
   d781c:	4621      	mov	r1, r4
   d781e:	46bc      	mov	ip, r7
   d7820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7824:	4760      	bx	ip
   d7826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d782a <_ZNSt9type_infoD1Ev>:
   d782a:	4770      	bx	lr

000d782c <_ZNKSt9type_info14__is_pointer_pEv>:
   d782c:	2000      	movs	r0, #0
   d782e:	4770      	bx	lr

000d7830 <_ZNKSt9type_infoeqERKS_>:
   d7830:	4281      	cmp	r1, r0
   d7832:	b508      	push	{r3, lr}
   d7834:	d00e      	beq.n	d7854 <_ZNKSt9type_infoeqERKS_+0x24>
   d7836:	6840      	ldr	r0, [r0, #4]
   d7838:	7803      	ldrb	r3, [r0, #0]
   d783a:	2b2a      	cmp	r3, #42	; 0x2a
   d783c:	d00c      	beq.n	d7858 <_ZNKSt9type_infoeqERKS_+0x28>
   d783e:	6849      	ldr	r1, [r1, #4]
   d7840:	780b      	ldrb	r3, [r1, #0]
   d7842:	2b2a      	cmp	r3, #42	; 0x2a
   d7844:	bf08      	it	eq
   d7846:	3101      	addeq	r1, #1
   d7848:	f000 f850 	bl	d78ec <strcmp>
   d784c:	fab0 f080 	clz	r0, r0
   d7850:	0940      	lsrs	r0, r0, #5
   d7852:	bd08      	pop	{r3, pc}
   d7854:	2001      	movs	r0, #1
   d7856:	e7fc      	b.n	d7852 <_ZNKSt9type_infoeqERKS_+0x22>
   d7858:	2000      	movs	r0, #0
   d785a:	e7fa      	b.n	d7852 <_ZNKSt9type_infoeqERKS_+0x22>

000d785c <__cxa_atexit>:
   d785c:	b510      	push	{r4, lr}
   d785e:	4c05      	ldr	r4, [pc, #20]	; (d7874 <__cxa_atexit+0x18>)
   d7860:	4613      	mov	r3, r2
   d7862:	b12c      	cbz	r4, d7870 <__cxa_atexit+0x14>
   d7864:	460a      	mov	r2, r1
   d7866:	4601      	mov	r1, r0
   d7868:	2002      	movs	r0, #2
   d786a:	f3af 8000 	nop.w
   d786e:	bd10      	pop	{r4, pc}
   d7870:	4620      	mov	r0, r4
   d7872:	e7fc      	b.n	d786e <__cxa_atexit+0x12>
   d7874:	00000000 	.word	0x00000000

000d7878 <memcpy>:
   d7878:	440a      	add	r2, r1
   d787a:	4291      	cmp	r1, r2
   d787c:	f100 33ff 	add.w	r3, r0, #4294967295
   d7880:	d100      	bne.n	d7884 <memcpy+0xc>
   d7882:	4770      	bx	lr
   d7884:	b510      	push	{r4, lr}
   d7886:	f811 4b01 	ldrb.w	r4, [r1], #1
   d788a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d788e:	4291      	cmp	r1, r2
   d7890:	d1f9      	bne.n	d7886 <memcpy+0xe>
   d7892:	bd10      	pop	{r4, pc}

000d7894 <memset>:
   d7894:	4402      	add	r2, r0
   d7896:	4603      	mov	r3, r0
   d7898:	4293      	cmp	r3, r2
   d789a:	d100      	bne.n	d789e <memset+0xa>
   d789c:	4770      	bx	lr
   d789e:	f803 1b01 	strb.w	r1, [r3], #1
   d78a2:	e7f9      	b.n	d7898 <memset+0x4>

000d78a4 <srand>:
   d78a4:	b538      	push	{r3, r4, r5, lr}
   d78a6:	4b0d      	ldr	r3, [pc, #52]	; (d78dc <srand+0x38>)
   d78a8:	681d      	ldr	r5, [r3, #0]
   d78aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d78ac:	4604      	mov	r4, r0
   d78ae:	b97b      	cbnz	r3, d78d0 <srand+0x2c>
   d78b0:	2018      	movs	r0, #24
   d78b2:	f7fe fcff 	bl	d62b4 <malloc>
   d78b6:	4a0a      	ldr	r2, [pc, #40]	; (d78e0 <srand+0x3c>)
   d78b8:	4b0a      	ldr	r3, [pc, #40]	; (d78e4 <srand+0x40>)
   d78ba:	63a8      	str	r0, [r5, #56]	; 0x38
   d78bc:	e9c0 2300 	strd	r2, r3, [r0]
   d78c0:	4b09      	ldr	r3, [pc, #36]	; (d78e8 <srand+0x44>)
   d78c2:	6083      	str	r3, [r0, #8]
   d78c4:	230b      	movs	r3, #11
   d78c6:	8183      	strh	r3, [r0, #12]
   d78c8:	2201      	movs	r2, #1
   d78ca:	2300      	movs	r3, #0
   d78cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d78d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d78d2:	2200      	movs	r2, #0
   d78d4:	611c      	str	r4, [r3, #16]
   d78d6:	615a      	str	r2, [r3, #20]
   d78d8:	bd38      	pop	{r3, r4, r5, pc}
   d78da:	bf00      	nop
   d78dc:	2003e4b0 	.word	0x2003e4b0
   d78e0:	abcd330e 	.word	0xabcd330e
   d78e4:	e66d1234 	.word	0xe66d1234
   d78e8:	0005deec 	.word	0x0005deec

000d78ec <strcmp>:
   d78ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d78f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d78f4:	2a01      	cmp	r2, #1
   d78f6:	bf28      	it	cs
   d78f8:	429a      	cmpcs	r2, r3
   d78fa:	d0f7      	beq.n	d78ec <strcmp>
   d78fc:	1ad0      	subs	r0, r2, r3
   d78fe:	4770      	bx	lr

000d7900 <strlen>:
   d7900:	4603      	mov	r3, r0
   d7902:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7906:	2a00      	cmp	r2, #0
   d7908:	d1fb      	bne.n	d7902 <strlen+0x2>
   d790a:	1a18      	subs	r0, r3, r0
   d790c:	3801      	subs	r0, #1
   d790e:	4770      	bx	lr

000d7910 <dynalib_user>:
   d7910:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d7920:	0000 0000 7325 6d00 6461 696c 7362 6c00     ....%s.madlibs.l
   d7930:	6261 742e 6568 6377 2e6c 6f63 006d 6564     ab.thewcl.com.de
   d7940:	6166 6c75 2074 4d00 4253 4c00 4253 3c00     fault .MSB.LSB.<
   d7950:	5053 5349 7465 6974 676e 2073 6564 6166     SPISettings defa
   d7960:	6c75 3e74 3c00 5053 5349 7465 6974 676e     ult>.<SPISetting
   d7970:	2073 7325 7525 2520 2073 4f4d 4544 7525     s %s%u %s MODE%u
   d7980:	003e                                        >.

000d7982 <_ZL4font>:
   d7982:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7992:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d79a2:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d79b2:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d79c2:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d79d2:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d79e2:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d79f2:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7a02:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7a12:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7a22:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7a32:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7a42:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7a52:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7a62:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7a72:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7a82:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7a92:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7aa2:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7ab2:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d7ac2:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d7ad2:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d7ae2:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7af2:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7b02:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7b12:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7b22:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7b32:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7b42:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7b52:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7b62:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7b72:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7b82:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7b92:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7ba2:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7bb2:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7bc2:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7bd2:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7be2:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7bf2:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7c02:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7c12:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7c22:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7c32:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7c42:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d7c52:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7c62:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d7c72:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d7c82:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7c92:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7ca2:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7cb2:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7cc2:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7cd2:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7ce2:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7cf2:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d7d02:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7d12:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7d22:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d7d32:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d7d42:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d7d52:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d7d62:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d7d72:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d7d82:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7d92:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7da2:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7db2:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7dc2:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7dd2:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7de2:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7df2:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d7e02:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7e12:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7e22:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d7e32:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d7e42:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d7e52:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d7e62:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d7e72:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d7e84 <_ZTV12Adafruit_GFX>:
	...
   d7e94:	49d5 000d 6695 000d 40a5 000d 43dd 000d     .I...f...@...C..
   d7ea4:	43df 000d 4411 000d 43ed 000d 43ff 000d     .C...D...C...C..
   d7eb4:	4321 000d 43dd 000d 4609 000d 4583 000d     !C...C...F...E..
   d7ec4:	4429 000d 4467 000d 44a1 000d 44e7 000d     )D..gD...D...D..
   d7ed4:	4585 000d 4503 000d                         .E...E..

000d7edc <_ZTV16OledWingAdafruit>:
	...
   d7ee4:	4ae5 000d 4b05 000d 49d5 000d 6695 000d     .J...K...I...f..
   d7ef4:	54dd 000d 43dd 000d 43df 000d 4411 000d     .T...C...C...D..
   d7f04:	43ed 000d 43ff 000d 4321 000d 43dd 000d     .C...C..!C...C..
   d7f14:	4609 000d 5697 000d 5c2b 000d 5bdd 000d     .F...V..+\...[..
   d7f24:	44a1 000d 44e7 000d 4585 000d 4503 000d     .D...D...E...E..
   d7f34:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

000d7f44 <_ZTVN8particle11SPISettingsE>:
	...
   d7f4c:	42cd 000d 42bd 000d 42bf 000d               .B...B...B..

000d7f58 <_ZL12splash1_data>:
   d7f58:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d7f68:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d7f78:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d7f88:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d7f98:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d7fa8:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d7fc0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d7fd0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d7fe0:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d7ff0:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d8000:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d8010:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d8020:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d8030:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d8040:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d8050:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d8060:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d8070:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d8080:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d8090:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d80a0:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d80b0:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d80c0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d80d0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d80e8:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d8100:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d8110:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d8120:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d8130:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d8140:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d8150:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d8160:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d8170:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d8180:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d8190:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d81a0:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d81b0:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d81c0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d81d0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d81e0:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d81f0:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d8200:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d8210:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d8218 <_ZL12splash2_data>:
   d8218:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d8228:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d8238:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d8254:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d8264:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d8274:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d8284:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d8294:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d82a4:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d82b4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d82c4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d82d4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d82e4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d82f4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d8304:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d8314:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d8324:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d8334:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d8344:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d8354:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d8364:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d8374:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d8384:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d8394:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d83ac:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d83bc:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d83cc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d83dc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d83ec:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d83f8 <_ZTV16Adafruit_SSD1306>:
	...
   d8400:	54b1 000d 54c9 000d 49d5 000d 6695 000d     .T...T...I...f..
   d8410:	54dd 000d 43dd 000d 43df 000d 4411 000d     .T...C...C...D..
   d8420:	43ed 000d 43ff 000d 4321 000d 43dd 000d     .C...C..!C...C..
   d8430:	4609 000d 5697 000d 5c2b 000d 5bdd 000d     .F...V..+\...[..
   d8440:	44a1 000d 44e7 000d 4585 000d 4503 000d     .D...D...E...E..

000d8450 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d8450:	8000 e0c0 f8f0 fefc                         ........

000d8458 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d8458:	0100 0703 1f0f 7f3f                         ......?.

000d8460 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d8460:	d5ae a880                                   ....

000d8464 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d8464:	00d3 8d40                                   ..@.

000d8468 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d8468:	0020 c8a1                                    ...

000d846c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d846c:	40db a6a4 af2e                              .@....

000d8472 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d8472:	02da 8f81                                   ....

000d8476 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d8476:	12da                                         ...

000d8479 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d8479:	02da                                         ...

000d847c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d847c:	0022 21ff 0000 0000                         "..!....

000d8484 <_ZTVN5spark13EthernetClassE>:
	...
   d848c:	6373 000d 6369 000d 635f 000d 6355 000d     sc..ic.._c..Uc..
   d849c:	6349 000d 633d 000d 7381 000d 7389 000d     Ic..=c...s...s..
   d84ac:	6331 000d 6329 000d 631f 000d 6315 000d     1c..)c...c...c..
   d84bc:	73b9 000d                                   .s..

000d84c0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d84c0:	0800 1810 2820 3830                         .... (08

000d84c8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d84d0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d84e0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d84f0 <_ZTV9IPAddress>:
	...
   d84f8:	6951 000d 6941 000d 6943 000d               Qi..Ai..Ci..

000d8504 <_ZTV9USBSerial>:
	...
   d850c:	6a5d 000d 6ac5 000d 6a9b 000d 6695 000d     ]j...j...j...f..
   d851c:	6a8d 000d 6a5f 000d 6a6f 000d 6abf 000d     .j.._j..oj...j..
   d852c:	6a7f 000d 6a59 000d                         .j..Yj..

000d8534 <_ZTV11USARTSerial>:
	...
   d853c:	6b69 000d 6bd5 000d 6bad 000d 6695 000d     ik...k...k...f..
   d854c:	6b7d 000d 6b99 000d 6b8b 000d 6ba7 000d     }k...k...k...k..
   d855c:	6b6b 000d 6b6f 000d                         kk..ok..

000d8564 <_ZTV7TwoWire>:
	...
   d856c:	6c65 000d 6caf 000d 6c87 000d 6c67 000d     el...l...l..gl..
   d857c:	6c8f 000d 6c97 000d 6c9f 000d 6ca7 000d     .l...l...l...l..
   d858c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   d859c:	2072 203d 6425 0000                         r = %d..

000d85a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d85ac:	6d93 000d 6db5 000d 71cf 000d 6dc3 000d     .m...m...q...m..
   d85bc:	6d95 000d                                   .m..

000d85c0 <_ZTV9TCPClient>:
	...
   d85c8:	6e41 000d 6e75 000d 6d11 000d 6d2b 000d     An..un...m..+m..
   d85d8:	7065 000d 6ed7 000d 6ea9 000d 6d55 000d     ep...n...n..Um..
   d85e8:	6f6f 000d 71d5 000d 6f0b 000d 7119 000d     oo...q...o...q..
   d85f8:	6d57 000d 6d89 000d 6d3d 000d 6dc7 000d     Wm...m..=m...m..
   d8608:	6e89 000d                                   .n..

000d860c <_ZTVN5spark9WiFiClassE>:
	...
   d8614:	7323 000d 7319 000d 730f 000d 72d1 000d     #s...s...s...r..
   d8624:	67bd 000d 7303 000d 7381 000d 7389 000d     .g...s...s...s..
   d8634:	72f7 000d 72ef 000d 72e5 000d 72db 000d     .r...r...r...r..
   d8644:	73b9 000d                                   .s..

000d8648 <_ZTVN5spark12NetworkClassE>:
	...
   d8650:	7341 000d 734b 000d 7355 000d 735f 000d     As..Ks..Us.._s..
   d8660:	7369 000d 7375 000d 7381 000d 7389 000d     is..us...s...s..
   d8670:	7391 000d 739d 000d 73a5 000d 73af 000d     .s...s...s...s..
   d8680:	73b9 000d                                   .s..

000d8684 <_ZSt7nothrow>:
	...

000d8685 <_ZTSSt19_Sp_make_shared_tag>:
   d8685:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8695:	6572 5f64 6174 0067 0000                     red_tag....

000d86a0 <_ZTISt19_Sp_make_shared_tag>:
   d86a0:	86e0 000d 8685 000d                         ........

000d86a8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d86a8:	8740 000d 86b4 000d 8764 000d               @.......d...

000d86b4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d86b4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d86c4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d86d4:	0045 0000                                   E...

000d86d8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d86d8:	0000 0000 86a8 000d 7685 000d 7699 000d     .........v...v..
   d86e8:	782d 000d 782d 000d 7703 000d 7645 000d     -x..-x...w..Ev..
   d86f8:	76eb 000d 76ad 000d 7679 000d               .v...v..yv..

000d8704 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8704:	8740 000d 8710 000d 86a8 000d               @...........

000d8710 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8710:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8720:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d8730:	666e 456f 0000 0000                         nfoE....

000d8738 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8738:	0000 0000 8704 000d 772d 000d 7741 000d     ........-w..Aw..
   d8748:	782d 000d 782d 000d 7703 000d 7645 000d     -x..-x...w..Ev..
   d8758:	7801 000d 778d 000d 7755 000d               .x...w..Uw..

000d8764 <_ZTISt9type_info>:
   d8764:	86e0 000d 876c 000d                         ....l...

000d876c <_ZTSSt9type_info>:
   d876c:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d8779 <link_const_variable_data_end>:
   d8779:	00          	.byte	0x00
	...

000d877c <link_constructors_location>:
   d877c:	000d4221 	.word	0x000d4221
   d8780:	000d637d 	.word	0x000d637d
   d8784:	000d650d 	.word	0x000d650d
   d8788:	000d666d 	.word	0x000d666d
   d878c:	000d67c9 	.word	0x000d67c9
   d8790:	000d67d9 	.word	0x000d67d9
   d8794:	000d6801 	.word	0x000d6801
   d8798:	000d732d 	.word	0x000d732d
   d879c:	000d7499 	.word	0x000d7499
